April 2006(This essay is derived from a talk at the 2006 
Startup School.)The startups we've funded so far are pretty quick, but they seem
quicker to learn some lessons than others.  I think it's because
some things about startups are kind of counterintuitive.We've now 
invested 
in enough companies that I've learned a trick
for determining which points are the counterintuitive ones:
they're the ones I have to keep repeating.So I'm going to number these points, and maybe with future startups
I'll be able to pull off a form of Huffman coding. I'll make them
all read this, and then instead of nagging them in detail, I'll
just be able to say: number four!
1. Release Early.The thing I probably repeat most is this recipe for a startup: get
a version 1 out fast, then improve it based on users' reactions.By "release early" I don't mean you should release something full
of bugs, but that you should release something minimal.  Users hate
bugs, but they don't seem to mind a minimal version 1, if there's
more coming soon.There are several reasons it pays to get version 1 done fast.  One
is that this is simply the right way to write software, whether for
a startup or not.  I've been repeating that since 1993, and I haven't seen much since to
contradict it.  I've seen a lot of startups die because they were
too slow to release stuff, and none because they were too quick.
[1]One of the things that will surprise you if you build something
popular is that you won't know your users.  Reddit now has almost half a million
unique visitors a month.  Who are all those people?  They have no
idea.  No web startup does.  And since you don't know your users,
it's dangerous to guess what they'll like.  Better to release
something and let them tell you.Wufoo took this to heart and released
their form-builder before the underlying database.  You can't even
drive the thing yet, but 83,000 people came to sit in the driver's
seat and hold the steering wheel.  And Wufoo got valuable feedback
from it: Linux users complained they used too much Flash, so they
rewrote their software not to.  If they'd waited to release everything
at once, they wouldn't have discovered this problem till it was
more deeply wired in.Even if you had no users, it would still be important to release
quickly, because for a startup the initial release acts as a shakedown
cruise.  If anything major is broken-- if the idea's no good,
for example, or the founders hate one another-- the stress of getting
that first version out will expose it.  And if you have such problems
you want to find them early.Perhaps the most important reason to release early, though, is that
it makes you work harder.  When you're working on something that
isn't released, problems are intriguing.  In something that's out
there, problems are alarming.  There is a lot more urgency once you
release.  And I think that's precisely why people put it off.  They
know they'll have to work a lot harder once they do. 
[2]
2. Keep Pumping Out Features.Of course, "release early" has a second component, without which
it would be bad advice.  If you're going to start with something
that doesn't do much, you better improve it fast.What I find myself repeating is "pump out features."  And this rule
isn't just for the initial stages.  This is something all startups
should do for as long as they want to be considered startups.I don't mean, of course, that you should make your application ever
more complex.  By "feature" I mean one unit of hacking-- one quantum
of making users' lives better.As with exercise, improvements beget improvements.  If you run every
day, you'll probably feel like running tomorrow.  But if you skip
running for a couple weeks, it will be an effort to drag yourself
out.  So it is with hacking: the more ideas you implement, the more
ideas you'll have.  You should make your system better at least in
some small way every day or two.This is not just a good way to get development done; it is also a
form of marketing.  Users love a site that's constantly improving.
In fact, users expect a site to improve.  Imagine if you visited a
site that seemed very good, and then returned two months later and
not one thing had changed.  Wouldn't it start to seem lame? 
[3]They'll like you even better when you improve in response to their
comments, because customers are used to companies ignoring them.
If you're the rare exception-- a company that actually listens--
you'll generate fanatical loyalty.  You won't need to advertise,
because your users will do it for you.This seems obvious too, so why do I have to keep repeating it?  I
think the problem here is that people get used to how things are.
Once a product gets past the stage where it has glaring flaws, you
start to get used to it, and gradually whatever features it happens
to have become its identity.  For example, I doubt many people at
Yahoo (or Google for that matter) realized how much better web mail
could be till Paul Buchheit showed them.I think the solution is to assume that anything you've made is far
short of what it could be.  Force yourself, as a sort of intellectual
exercise, to keep thinking of improvements.  Ok, sure, what you
have is perfect.  But if you had to change something, what would
it be?If your product seems finished, there are two possible explanations:
(a) it is finished, or (b) you lack imagination.  Experience suggests
(b) is a thousand times more likely.
3. Make Users Happy.Improving constantly is an instance of a more general rule: make
users happy.  One thing all startups have in common is that they
can't force anyone to do anything.  They can't force anyone to use
their software, and they can't force anyone to do deals with them.
A startup has to sing for its supper.  That's why the successful
ones make great things.  They have to, or die.When you're running a startup you feel like a little bit of debris
blown about by powerful winds.  The most powerful wind is users.
They can either catch you and loft you up into the sky, as they did
with Google, or leave you flat on the pavement, as they do with
most startups.  Users are a fickle wind, but more powerful than any
other.  If they take you up, no competitor can keep you down.As a little piece of debris, the rational thing for you to do is
not to lie flat, but to curl yourself into a shape the wind will
catch.I like the wind metaphor because it reminds you how impersonal the
stream of traffic is.  The vast majority of people who visit your
site will be casual visitors.  It's them you have to design your
site for.  The people who really care will find what they want by
themselves.The median visitor will arrive with their finger poised on the Back
button.  Think about your own experience: most links you
follow lead to something lame.  Anyone who has used the web for
more than a couple weeks has been trained to click on Back after
following a link.  So your site has to say "Wait!  Don't click on
Back.  This site isn't lame.  Look at this, for example."There are two things you have to do to make people pause.  The most
important is to explain, as concisely as possible, what the hell
your site is about.  How often have you visited a site that seemed
to assume you already knew what they did?  For example, the corporate
site that says the
company makes

  enterprise content management solutions for business that enable
  organizations to unify people, content and processes to minimize
  business risk, accelerate time-to-value and sustain lower total
  cost of ownership.

An established company may get away with such an opaque description,
but no startup can.  A startup
should be able to explain in one or two sentences exactly what it
does. 
[4]
And not just to users.  You need this for everyone:
investors, acquirers, partners, reporters, potential employees, and
even current employees.  You probably shouldn't even start a company
to do something that can't be described compellingly in one or two
sentences.The other thing I repeat is to give people everything you've got,
right away.  If you have something impressive, try to put it on the
front page, because that's the only one most visitors will see.
Though indeed there's a paradox here: the more you push the good
stuff toward the front, the more likely visitors are to explore
further. 
[5]In the best case these two suggestions get combined: you tell
visitors what your site is about by showing them.  One of the
standard pieces of advice in fiction writing is "show, don't tell."
Don't say that a character's angry; have him grind his teeth, or
break his pencil in half.  Nothing will explain what your site does
so well as using it.The industry term here is "conversion."  The job of your site is
to convert casual visitors into users-- whatever your definition
of a user is.  You can measure this in your growth rate.  Either
your site is catching on, or it isn't, and you must know which.  If
you have decent growth, you'll win in the end, no matter how obscure
you are now.  And if you don't, you need to fix something.
4. Fear the Right Things.Another thing I find myself saying a lot is "don't worry."  Actually,
it's more often "don't worry about this; worry about that instead."
Startups are right to be paranoid, but they sometimes fear the wrong
things.Most visible disasters are not so alarming as they seem.  Disasters
are normal in a startup: a founder quits, you discover a patent
that covers what you're doing, your servers keep crashing, you run
into an insoluble technical problem, you have to change your name,
a deal falls through-- these are all par for the course.  They won't
kill you unless you let them.Nor will most competitors.  A lot of startups worry "what if Google
builds something like us?"  Actually big companies are not the ones
you have to worry about-- not even Google.  The people at Google
are smart, but no smarter than you; they're not as motivated, because
Google is not going to go out of business if this one product fails;
and even at Google they have a lot of bureaucracy to slow them down.What you should fear, as a startup, is not the established players,
but other startups you don't know exist yet.  They're way more
dangerous than Google because, like you, they're cornered animals.Looking just at existing competitors can give you a false sense of
security.  You should compete against what someone else could be
doing, not just what you can see people doing.  A corollary is that
you shouldn't relax just because you have no visible competitors
yet.  No matter what your idea, there's someone else out there
working on the same thing.That's the downside of it being easier to start a startup: more people
are doing it.  But I disagree with Caterina Fake when she says that
makes this a bad time to start a startup.  More people are starting
startups, but not as many more as could.  Most college graduates
still think they have to get a job.  The average person can't ignore
something that's been beaten into their head since they were three
just because serving web pages recently got a lot cheaper.And in any case, competitors are not the biggest threat.  Way more
startups hose themselves than get crushed by competitors.  There
are a lot of ways to do it, but the three main ones are internal
disputes, inertia, and ignoring users.  Each is, by itself, enough
to kill you.  But if I had to pick the worst, it would be ignoring
users.  If you want a recipe for a startup that's going to die,
here it is: a couple of founders who have some great idea they know
everyone is going to love, and that's what they're going to build,
no matter what.Almost everyone's initial plan is broken.  If companies stuck to
their initial plans, Microsoft would be selling programming languages,
and Apple would be selling printed circuit boards.  In both cases
their customers told them what their business should be-- and they
were smart enough to listen.As Richard Feynman said, the imagination of nature is greater than
the imagination of man.  You'll find more interesting things by
looking at the world than you could ever produce just by thinking.
This principle is very powerful.  It's why the best abstract painting
still falls short of Leonardo, for example.  And it applies to
startups too.  No idea for a product could ever be so clever as the
ones you can discover by smashing a beam of prototypes into a beam
of users.
5. Commitment Is a Self-Fulfilling Prophecy.I now have enough experience with startups to be able to say what
the most important quality is in a startup founder, and it's not
what you might think.  The most important quality in a startup
founder is determination.  Not intelligence-- determination.This is a little depressing.  I'd like to believe Viaweb succeeded
because we were smart, not merely determined.  A lot of people in
the startup world want to believe that.  Not just founders, but
investors too.  They like the idea of inhabiting a world ruled by
intelligence.  And you can tell they really believe this, because
it affects their investment decisions.Time after time VCs invest in startups founded by eminent professors.
This may work in biotech, where a lot of startups simply commercialize
existing research, but in software you want to invest in students,
not professors.  Microsoft, Yahoo, and Google were all founded by
people who dropped out of school to do it.  What students lack in
experience they more than make up in dedication.Of course, if you want to get rich, it's not enough merely to be
determined.  You have to be smart too, right?  I'd like to think
so, but I've had an experience that convinced me otherwise: I spent
several years living in New York.You can lose quite a lot in the brains department and it won't kill
you.  But lose even a little bit in the commitment department, and
that will kill you very rapidly.Running a startup is like walking on your hands: it's possible, but
it requires extraordinary effort.  If an ordinary employee were
asked to do the things a startup founder has to, he'd be very
indignant.  Imagine if you were hired at some big company, and in
addition to writing software ten times faster than you'd ever had
to before, they expected you to answer support calls, administer
the servers, design the web site, cold-call customers, find the
company office space, and go out and get everyone lunch.And to do all this not in the calm, womb-like atmosphere of a big
company, but against a backdrop of constant disasters.  That's the
part that really demands determination.  In a startup, there's
always some disaster happening.  So if you're the least bit inclined
to find an excuse to quit, there's always one right there.But if you lack commitment, chances are it will have been hurting
you long before you actually quit.  Everyone who deals with startups
knows how important commitment is, so if they sense you're ambivalent,
they won't give you much attention.  If you lack commitment, you'll
just find that for some mysterious reason good things happen to
your competitors but not to you.  If you lack commitment, it will
seem to you that you're unlucky.Whereas if you're determined to stick around, people will pay
attention to you, because odds are they'll have to deal with you
later.  You're a local, not just a tourist, so everyone has to come
to terms with you.At Y Combinator we sometimes mistakenly fund teams who have the
attitude that they're going to give this startup thing a shot for
three months, and if something great happens, they'll stick with
it-- "something great" meaning either that someone wants to buy
them or invest millions of dollars in them.  But if this is your
attitude, "something great" is very unlikely to happen to you,
because both acquirers and investors judge you by your level of
commitment.If an acquirer thinks you're going to stick around no matter what,
they'll be more likely to buy you, because if they don't and you
stick around, you'll probably grow, your price will go up, and
they'll be left wishing they'd bought you earlier.  Ditto for
investors.  What really motivates investors, even big VCs, is not
the hope of good returns, but the fear of missing out. 
[6]
So if
you make it clear you're going to succeed no matter what, and the only
reason you need them is to make it happen a little faster, you're
much more likely to get money.You can't fake this.  The only way to convince everyone that you're
ready to fight to the death is actually to be ready to.You have to be the right kind of determined, though.  I carefully
chose the word determined rather than stubborn, because stubbornness
is a disastrous quality in a startup.  You have to be determined,
but flexible, like a running back.  A successful running back doesn't
just put his head down and try to run through people.  He improvises:
if someone appears in front of him, he runs around them; if someone
tries to grab him, he spins out of their grip; he'll even run in
the wrong direction briefly if that will help.  The one thing he'll
never do is stand still. 
[7]
6. There Is Always Room.I was talking recently to a startup founder about whether it might
be good to add a social component to their software.  He said he
didn't think so, because the whole social thing was tapped out.
Really?  So in a hundred years the only social networking sites
will be the Facebook, MySpace, Flickr, and Del.icio.us?  Not likely.There is always room for new stuff.  At every point in history,
even the darkest bits of the dark ages, people were discovering
things that made everyone say "why didn't anyone think of that
before?"  We know this continued to be true up till 2004, when the
Facebook was founded-- though strictly speaking someone else did
think of that.The reason we don't see the opportunities all around us is that we
adjust to however things are, and assume that's how things have to
be.  For example, it would seem crazy to most people to try to make
a better search engine than Google.  Surely that field, at least,
is tapped out.  Really?  In a hundred years-- or even twenty-- are
people still going to search for information using something like
the current Google?  Even Google probably doesn't think that.In particular, I don't think there's any limit to the number of
startups.  Sometimes you hear people saying "All these guys starting
startups now are going to be disappointed. How many little startups
are Google and Yahoo going to buy, after all?" That sounds cleverly
skeptical, but I can prove it's mistaken.  No one proposes that
there's some limit to the number of people who can be employed in
an economy consisting of big, slow-moving companies with a couple
thousand people each.  Why should there be any limit to the number
who could be employed by small, fast-moving companies with ten each?
It seems to me the only limit would be the number of people who
want to work that hard.The limit on the number of startups is not the number that can get
acquired by Google and Yahoo-- though it seems even that should
be unlimited, if the startups were actually worth buying-- but the
amount of wealth that can be created.  And I don't think there's
any limit on that, except cosmological ones.So for all practical purposes, there is no limit to the number of
startups.  Startups make wealth, which means they make things people
want, and if there's a limit on the number of things people want,
we are nowhere near it.  I still don't even have a flying car.
7. Don't Get Your Hopes Up.This is another one I've been repeating since long before Y Combinator.
It was practically the corporate motto at Viaweb.Startup founders are naturally optimistic.  They wouldn't do it
otherwise.  But you should treat your optimism the way you'd treat
the core of a nuclear reactor: as a source of power that's also
very dangerous.  You have to build a shield around it, or it will
fry you.The shielding of a reactor is not uniform; the reactor would be
useless if it were.  It's pierced in a few places to let pipes in.
An optimism shield has to be pierced too.  I think the place to
draw the line is between what you expect of yourself, and what you
expect of other people.  It's ok to be optimistic about what you
can do, but assume the worst about machines and other people.This is particularly necessary in a startup, because you tend to
be pushing the limits of whatever you're doing.  So things don't
happen in the smooth, predictable way they do in the rest of the
world.  Things change suddenly, and usually for the worse.Shielding your optimism is nowhere more important than with deals.
If your startup is doing a deal, just assume it's not going to
happen.  The VCs who say they're going to invest in you aren't.
The company that says they're going to buy you isn't.  The big
customer who wants to use your system in their whole company won't.
Then if things work out you can be pleasantly surprised.The reason I warn startups not to get their hopes up is not to save
them from being disappointed when things fall through.  It's
for a more practical reason: to prevent them from leaning their
company against something that's going to fall over, taking them
with it.For example, if someone says they want to invest in you, there's a
natural tendency to stop looking for other investors.  That's why
people proposing deals seem so positive: they want you to
stop looking.  And you want to stop too, because doing deals is a
pain.  Raising money, in particular, is a huge time sink.  So you
have to consciously force yourself to keep looking.Even if you ultimately do the first deal, it will be to your advantage
to have kept looking, because you'll get better terms.  Deals are
dynamic; unless you're negotiating with someone unusually honest,
there's not a single point where you shake hands and the deal's
done. There are usually a lot of subsidiary questions to be cleared
up after the handshake, and if the other side senses weakness-- if
they sense you need this deal-- they will be very tempted to screw
you in the details.VCs and corp dev guys are professional negotiators.  They're trained
to take advantage of weakness. 
[8]
So while they're often nice
guys, they just can't help it.  And as pros they do this more than
you.  So don't even try to bluff them.  The only way a startup can
have any leverage in a deal is genuinely not to need it.  And if
you don't believe in a deal, you'll be less likely to depend on it.So I want to plant a hypnotic suggestion in your heads: when you
hear someone say the words "we want to invest in you" or "we want
to acquire you," I want the following phrase to appear automatically
in your head: don't get your hopes up.  Just continue running
your company as if this deal didn't exist.  Nothing is more likely
to make it close.The way to succeed in a startup is to focus on the goal of getting
lots of users, and keep walking swiftly toward it while investors
and acquirers scurry alongside trying to wave money in your face.
Speed, not MoneyThe way I've described it, starting a startup sounds pretty stressful.
It is.  When I talk to the founders of the companies we've funded,
they all say the same thing: I knew it would be hard, but I didn't
realize it would be this hard.So why do it?  It would be worth enduring a lot of pain and stress
to do something grand or heroic, but just to make money?  Is making
money really that important?No, not really.  It seems ridiculous to me when people take business
too seriously.  I regard making money as a boring errand to be got
out of the way as soon as possible.  There is nothing grand or
heroic about starting a startup per se.So why do I spend so much time thinking about startups?  I'll tell
you why.  Economically, a startup is best seen not as a way to get
rich, but as a way to work faster.  You have to make a living, and
a startup is a way to get that done quickly, instead of letting it
drag on through your whole life.
[9]We take it for granted most of the time, but human life is fairly
miraculous.  It is also palpably short.  You're given this marvellous
thing, and then poof, it's taken away.  You can see why people
invent gods to explain it.  But even to people who don't believe
in gods, life commands respect.  There are times in most of our
lives when the days go by in a blur, and almost everyone has a
sense, when this happens, of wasting something precious.  As Ben
Franklin said, if you love life, don't waste time, because time is
what life is made of.So no, there's nothing particularly grand about making money.  That's
not what makes startups worth the trouble.  What's important about
startups is the speed.  By compressing the dull but necessary task
of making a living into the smallest possible time, you show respect
for life, and there is something grand about that.Notes[1]
Startups can die from releasing something full of bugs, and not
fixing them fast enough, but I don't know of any that died from
releasing something stable but minimal very early, then promptly
improving it.[2]
I know this is why I haven't released Arc.  The moment I do,
I'll have people nagging me for features.[3]
A web site is different from a book or movie or desktop application
in this respect.  Users judge a site not as a single snapshot, but
as an animation with multiple frames.  Of the two, I'd say the rate of
improvement is more important to users than where you currently
are.[4]
It should not always tell this to users, however.  For example,
MySpace is basically a replacement mall for mallrats.  But it was
wiser for them, initially, to pretend that the site was about bands.[5]
Similarly, don't make users register to try your site.  Maybe
what you have is so valuable that visitors should gladly register
to get at it.  But they've been trained to expect the opposite.
Most of the things they've tried on the web have sucked-- and
probably especially those that made them register.[6]
VCs have rational reasons for behaving this way. They don't
make their money (if they make money) off their median investments.
In a typical fund, half the companies fail, most of the rest generate
mediocre returns, and one or two "make the fund" by succeeding
spectacularly.  So if they miss just a few of the most promising
opportunities, it could hose the whole fund.[7]
The attitude of a running back doesn't translate to soccer.
Though it looks great when a forward dribbles past multiple defenders,
a player who persists in trying such things will do worse in the
long term than one who passes.[8]
The reason Y Combinator never negotiates valuations
is that we're not professional negotiators, and don't want to turn
into them.[9]
There are two ways to do 
work you love: (a) to make money, then work
on what you love, or (b) to get a job where you get paid to work on
stuff you love.  In practice the first phases of both
consist mostly of unedifying schleps, and in (b) the second phase is less
secure.Thanks to Sam Altman, Trevor Blackwell, Beau Hartshorne, Jessica 
Livingston, and Robert Morris for reading drafts of this.