1021,Improper Restriction of Rendered UI Layers or Frames,"The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.",103;181;222;504;506;587;654,441;610;451,Implementation,";;This defense-in-depth technique can be used to prevent the improper usage of frames in web applications. It prioritizes the valid sources of data to be loaded into the application through the usage of declarative policies. Based on which implementation of Content Security Policy is in use, the developer should use the ""frame-ancestors"" directive or the ""frame-src"" directive to mitigate this weakness. Both directives allow for the placement of restrictions when it comes to allowing embedded content."
113,Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting'),"The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.",105;31;34;85,93;20;436,Implementation,"Construct HTTP headers very carefully, avoiding the use of non-validated input data.;;Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
116,Improper Encoding or Escaping of Output,"The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",104;73;81;85,707,Implementation;Operation,";;Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.;In some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict allowlist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input.;Use input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20).;Fully specify which encodings are required by components that will be communicating with each other.;When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so."
1188,Initialization of a Resource with an Insecure Default,"The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.",665,1419;665,,
119,Improper Restriction of Operations within the Bounds of a Memory Buffer,"The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.",10;100;123;14;24;42;44;45;46;47;8;9,118;20,Implementation,";;;;;;Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available."
120,Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'),"The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.",10;100;14;24;42;44;45;46;47;67;8;9;92,119;119;119;119;20,Implementation,";;;;;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;;Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.;Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.;When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;"
121,Stack-based Buffer Overflow,"A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",,788;787,Implementation,";Use an abstraction library to abstract away risky APIs. Not a complete solution.;Implement and perform bounds checking on input.;Do not use dangerous functions such as gets. Use safer, equivalent functions which check for boundary errors.;"
122,Heap-based Buffer Overflow,"A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().",92,788;787,Implementation,"Pre-design: Use a language or compiler that performs automatic bounds checking.;Use an abstraction library to abstract away risky APIs. Not a complete solution.;;;Implement and perform bounds checking on input.;Do not use dangerous functions such as gets. Look for their safe equivalent, which checks for the boundary.;Use OS-level preventative functionality. This is not a complete solution, but it provides some defense in depth."
1236,Improper Neutralization of Formula Elements in a CSV File,"The product saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by a spreadsheet product.",,74;74,Implementation,"When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV.  Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).;If a field starts with a formula character, prepend it with a ' (single apostrophe), which prevents Excel from executing the formula.;Certain implementations of spreadsheet software might disallow formulas from executing if the file is untrusted, or if the file is not authored by the current user."
125,Out-of-bounds Read,"The product reads data past the end, or before the beginning, of the intended buffer.",540,119;119;119;119,Implementation,;Use a language that provides appropriate memory abstractions.
1284,Improper Validation of Specified Quantity in Input,"The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",,20;20,Implementation,
129,Improper Validation of Array Index,"The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.",100,1285;20,Implementation,"Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).;;;;;;Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;"
131,Incorrect Calculation of Buffer Size,"The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.",100;47,682;682;682;682,Implementation,"When allocating a buffer for the purpose of transforming, converting, or encoding an input, allocate enough memory to handle the largest possible encoding. For example, in a routine that converts ""&"" characters to ""&amp;"" for HTML entity encoding, the output buffer needs to be at least 5 times as large as the input buffer.;;Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;When processing structured incoming data containing a size field followed by raw data, identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130).;When allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel in your calculation of the total amount of memory that must be allocated.;Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.;Use sizeof() on the appropriate data type to avoid CWE-467.;Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity. This will simplify validation and will reduce surprises related to unexpected casting.;;;;;Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;"
1321,Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'),"The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.",1;180;77,915;913,Architecture and Design;Implementation,"By freezing the object prototype first (for example, Object.freeze(Object.prototype)), modification of the prototype becomes impossible.;By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.;When handling untrusted objects, validating using a schema can be used.;By using an object without prototypes (via Object.create(null) ), adding object prototype attributes by accessing the prototype via the special attributes becomes impossible, mitigating this weakness.;Map can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it."
1333,Inefficient Regular Expression Complexity,"The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",492,407;407,Implementation,"Use regular expressions that do not support backtracking, e.g. by removing nested quantifiers.;Set backtracking limits in the configuration of the regular expression implementation, such as PHP's pcre.backtrack_limit. Also consider limits on execution time for the process.;Do not use regular expressions with untrusted input. If regular expressions must be used, avoid using backtracking in the expression.;Limit the length of the input that the regular expression will process."
134,Use of Externally-Controlled Format String,"The product uses a function that accepts a format string as an argument, but the format string originates from an external source.",135;67,668;668;20,Implementation;Implementation,"Choose a language that is not subject to this flaw.;Ensure that all format string functions are passed a static string which cannot be controlled by the user, and that the proper number of arguments are always sent to that function as well. If at all possible, use functions that do not support the %n operator in format strings. [REF-116] [REF-117];Run compilers and linkers with high warning levels, since they may detect incorrect usage."
190,Integer Overflow or Wraparound,"The product performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.",92,682;682;20,Implementation,"Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.;;;;;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system."
191,Integer Underflow (Wrap or Wraparound),"The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.",,682;682,Implementation,
193,Off-by-one Error,"A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.",,682;682,Implementation,"When copying character arrays or using character manipulation methods, the correct size parameter must be used to account for the null terminator that needs to be added at the end of the array. Some examples of functions susceptible to this weakness in C include strcpy(), strncpy(), strcat(), strncat(), printf(), sprintf(), scanf() and sscanf()."
20,Improper Input Validation,"The product receives input or data, but it does
        not validate or incorrectly validates that the input has the
        properties that are required to process the data safely and
        correctly.",10;101;104;108;109;110;120;13;135;136;14;153;182;209;22;23;230;231;24;250;261;267;28;3;31;42;43;45;46;47;473;52;53;588;63;64;664;67;7;71;72;73;78;79;8;80;81;83;85;88;9,707,Architecture and Design;Implementation,"Consider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build ""recognizers"" for that language.  This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111];Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).;Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.;;;When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.;Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.;Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.;;When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so."
200,Exposure of Sensitive Information to an Unauthorized Actor,The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.,116;13;169;22;224;285;287;290;291;292;293;294;295;296;297;298;299;300;301;302;303;304;305;306;307;308;309;310;312;313;317;318;319;320;321;322;323;324;325;326;327;328;329;330;472;497;508;573;574;575;576;577;59;60;616;643;646;651;79,668,Architecture and Design;Implementation,
203,Observable Discrepancy,"The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.",189,200;200,Architecture and Design;Implementation,;
209,Generation of Error Message Containing Sensitive Information,"The product generates an error message that includes sensitive information about its environment, users, or associated data.",215;463;54;7,200;200;755,Architecture and Design;Implementation;System Configuration;Operation,";Handle exceptions internally and do not display errors containing potentially sensitive information to a user.;Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.;Debugging information should not make its way into a production release.;Debugging information should not make its way into a production release.;Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.;Create default error pages or messages that do not leak any information."
212,Improper Removal of Sensitive Information Before Storage or Transfer,"The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.",168,669;669,Architecture and Design;Implementation;Operation,"Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties.;;Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.;Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state."
22,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),"The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",126;64;76;78;79,706;706;668,Implementation,";For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.;Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;;;;;When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."
24,Path Traversal: '../filedir',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""../"" sequences that can resolve to a location that is outside of that directory.",,23,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
252,Unchecked Return Value,"The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.",,754;754,Implementation,"Check the results of all functions that return a value and verify that the value is expected.;Ensure that you account for all possible return values from the function.;When designing a function, make sure you return a value or throw an exception in case of an error."
259,Use of Hard-coded Password,"The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.",,798;798;798,Implementation;Architecture and Design,"For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.;For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a ""first login"" mode that requires the user to enter a unique strong password.;Perform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection.;;"
266,Incorrect Privilege Assignment,"A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.",,269,Implementation,"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."
269,Improper Privilege Management,"The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.",122;233;58,284,Architecture and Design;Implementation;Operation,"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.;Follow the principle of least privilege when assigning access rights to entities in a software system.;Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource."
276,Incorrect Default Permissions,"During installation, installed file permissions are set to allow anyone to modify those files.",1;127;81,732;732,Architecture and Design;Implementation;Installation;Operation,The architecture needs to access and modification attributes for files to only those users who actually require those actions.;
281,Improper Preservation of Permissions,"The product does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.",,732;732,Implementation;Operation,
284,Improper Access Control,The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.,19;441;478;479;502;503;536;546;550;551;552;556;558;562;563;564;578,,Architecture and Design;Implementation;Operation,"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.;"
285,Improper Authorization,The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.,1;104;127;13;17;39;402;45;5;51;59;60;647;668;76;77;87,284;284,Implementation;Architecture and Design;Operation,";Ensure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor.;;;Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a ""default deny"" policy when defining these ACLs."
287,Improper Authentication,"When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",114;115;151;194;22;57;593;633;650;94,284;284,Architecture and Design;Implementation,Use an authentication framework or library such as the OWASP ESAPI Authentication feature.
29,Path Traversal: '\..\filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\..\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",,23,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
290,Authentication Bypass by Spoofing,This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.,21;22;459;461;473;476;59;60;667;94,1390;287,Implementation,
294,Authentication Bypass by Capture-replay,A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).,102;509;555;561;60;644;645;652;701;94,1390;287,Architecture and Design,"Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.;Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content."
295,Improper Certificate Validation,"The product does not validate, or incorrectly validates, a certificate.",459;475,287;287,Architecture and Design;Implementation;Implementation,"Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.;If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname."
305,Authentication Bypass by Primary Weakness,"The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.",,1390,Implementation,
306,Missing Authentication for Critical Function,The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.,12;166;216;36;62,287;287,Architecture and Design,";For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;;When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302]."
307,Improper Restriction of Excessive Authentication Attempts,"The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.",16;49;560;565;600;652;653,1390;287;799,Architecture and Design,;
311,Missing Encryption of Sensitive Data,The product does not encrypt sensitive or critical information before storage or transmission.,157;158;204;31;37;383;384;385;386;387;388;477;609;65,693,Architecture and Design;Operation,"Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.;;;;When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.;Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible."
312,Cleartext Storage of Sensitive Information,The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.,37,311;311;922,Architecture and Design,"When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to encrypt the data at rest. [REF-1297] [REF-1299] [REF-1301]"
319,Cleartext Transmission of Sensitive Information,The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.,102;117;383;477;65,311;311,Architecture and Design;Architecture and Design;Operation;System Configuration,"Before transmitting, encrypt the data using reliable, confidentiality-protecting cryptographic protocols.;When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.;When designing hardware platforms, ensure that approved encryption algorithms (such as those recommended by NIST) protect paths from security critical data to trusted user applications.;Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.;Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols."
321,Use of Hard-coded Cryptographic Key,The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.,,798;798;798,Architecture and Design,Prevention schemes mirror that of hard-coded password storage.
326,Inadequate Encryption Strength,"The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.",112;192;20,693,Architecture and Design,Use an encryption scheme that is currently considered to be strong by experts in the field.
327,Use of a Broken or Risky Cryptographic Algorithm,The product uses a broken or risky cryptographic algorithm or protocol.,20;459;473;475;608;614;97,693,Architecture and Design;Implementation,";Ensure that the design allows one cryptographic algorithm to be replaced with another in the next generation or version. Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. With hardware, design the product at the Intellectual Property (IP) level so that one cryptographic algorithm can be replaced with another in the next generation of the hardware product.;Carefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.;;When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."
330,Use of Insufficiently Random Values,The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.,112;485;59,693,Architecture and Design;Implementation,";Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.;Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.;Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (""Approved Random Number Generators"").;Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."
331,Insufficient Entropy,"The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.",59,330;330,Architecture and Design;Implementation,Determine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds.
335,Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG),The product uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds.,,330;330,Implementation,
338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG),"The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.",,330;330,Architecture and Design;Implementation,"Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux."
345,Insufficient Verification of Data Authenticity,"The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.",111;141;142;148;218;384;385;386;387;388;665;701,693,Architecture and Design;Implementation,
346,Origin Validation Error,The product does not properly verify that the source of data or communication is valid.,111;141;142;160;21;384;385;386;387;388;510;59;60;75;76;89,345;345;284,Architecture and Design;Implementation,
347,Improper Verification of Cryptographic Signature,"The product does not verify, or incorrectly verifies, the cryptographic signature for data.",463;475,345;345,Architecture and Design;Implementation,
352,Cross-Site Request Forgery (CSRF),"The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",111;462;467;62,345;345,Architecture and Design,";Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.;Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). [REF-332];Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.;;Do not use the GET method for any request that triggers a state change.;Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons."
354,Improper Validation of Integrity Check Value,"The product does not validate or incorrectly validates the integrity check values or ""checksums"" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.",145;463;75,345;345;754,Architecture and Design;Implementation,Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.
362,Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'),"The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",26;29,691,Architecture and Design;Implementation,"In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.;Use thread-safe capabilities such as the data access abstraction in Spring.;;When using multithreading and operating on shared variables, only use thread-safe functions.;Use atomic operations on shared variables. Be wary of innocent-looking constructs such as ""x++"". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write.;Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412.;Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization.;Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.;Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."
367,Time-of-check Time-of-use (TOCTOU) Race Condition,"The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.",27;29,362;362,Implementation,"The most basic advice for TOCTOU vulnerabilities is to not perform a check before the use. This does not resolve the underlying issue of the execution of a function on a resource whose state and identity cannot be assured, but it does help to limit the false sense of security given by the check.;When the file being altered is owned by the current user and group, set the effective gid and uid to that of the current user and group when executing this statement.;Limit the interleaving of operations on files from multiple processes.;If you cannot perform operations atomically and you must share access to the resource between multiple processes or threads, then try to limit the amount of time (CPU cycles) between the check and use of the resource. This will not fix the problem, but it could make it more difficult for an attack to succeed.;Recheck the resource after the use call to verify that the action was taken appropriately.;Ensure that some environmental locking mechanism can be used to protect resources effectively.;Ensure that locking occurs before the check, as opposed to afterwards, such that the resource, as checked, is the same as it is when in use."
369,Divide By Zero,The product divides a value by zero.,,682;682;682;682,Implementation,
384,Session Fixation,"Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.",196;21;31;39;59;60;61,610;610,Architecture and Design;Implementation,"Invalidate any existing session identifiers prior to authorizing a new user session.;For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again."
400,Uncontrolled Resource Consumption,"The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",147;227;492,664,Operation;Architecture and Design;Implementation,"Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.;;Ensure that protocols have specific limits of scale placed on them.;Ensure that all failures in resource allocation place the system into a safe posture."
401,Missing Release of Memory after Effective Lifetime,"The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",,772;404;404,Implementation,;Use an abstraction library to abstract away risky APIs. Not a complete solution.;The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.
404,Improper Resource Shutdown or Release,The product does not release or incorrectly releases a resource before it is made available for re-use.,125;130;131;494;495;496;666,664,Implementation,";It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free memory in a function. If you allocate memory that you intend to free upon completion of the function, you must be sure to free the memory at all exit points for that function including error conditions.;Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[].;When releasing a complex object or structure, ensure that you properly dispose of all of its member components, not just the object itself."
407,Inefficient Algorithmic Complexity,"An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.",,405,Architecture and Design;Implementation,
415,Double Free,"The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",,825;1341;672;672;672;666,Implementation,"Choose a language that provides automatic memory management.;Ensure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.;Use a static analysis tool to find double free instances."
416,Use After Free,"Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",,825;672;672;672,Implementation,"Choose a language that provides automatic memory management.;When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy."
425,Direct Request ('Forced Browsing'),"The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",127;143;144;668;87,862;862;288;424,Implementation;Operation,"Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.;Consider using MVC based frameworks such as Struts."
426,Untrusted Search Path,The product searches for critical resources using an externally-supplied search path that can point to resources that are not under the product's direct control.,38,642;668;673,Implementation,"Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.;When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.;Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.;Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.;Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path."
427,Uncontrolled Search Path Element,"The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.",38;471,668;668,Implementation,"Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.;When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.;Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.;Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory. Since this is a denylist approach, it might not be a complete solution.;Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path."
428,Unquoted Search Path or Element,"The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path.",,668;668,Implementation,Properly quote the full search path before executing a program on the system.;;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
434,Unrestricted Upload of File with Dangerous Type,The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.,1,669;669,Implementation;Architecture and Design,"Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423];When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.;Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423];;Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.;Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that ""filename.php.gif"" is fed to the PHP interpreter.[REF-422] [REF-423];When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.;Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;"
436,Interpretation Conflict,"Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.",105;273;34,435,Architecture and Design;Implementation,
444,Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling'),"The product acts as an intermediary HTTP agent
         (such as a proxy or firewall) in the data flow between two
         entities such as a client and server, but it does not
         interpret malformed HTTP requests or responses in ways that
         are consistent with how the messages will be processed by
         those entities that are at the ultimate destination.",273;33,436;436,Implementation,"Use a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433].;Use only SSL communication.;Terminate the client session after each request.;Turn all pages to non-cacheable."
457,Use of Uninitialized Variable,"The code uses a variable that has not been initialized, leading to unpredictable or unintended results.",,908;665;665,Implementation,"Assign all variables to an initial value.;Most compilers will complain about the use of uninitialized variables if warnings are turned on.;When using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.;The choice could be made to use a language that is not susceptible to these issues.;Mitigating technologies such as safe string libraries and container abstractions could be introduced."
459,Incomplete Cleanup,"The product does not properly ""clean up"" and remove temporary or supporting resources after they have been used.",,404;404,Implementation,Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.
476,NULL Pointer Dereference,"A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",,710;754;754,Implementation,"If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.;The choice could be made to use a language that is not susceptible to these issues.;Check the results of all functions that return a value and verify that the value is non-null before acting upon it.;Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.;Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.;Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."
494,Download of Code Without Integrity Check,The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.,184;185;186;187;533;538;657;662;691;692;693;695,345;669;669,Architecture and Design;Implementation,"Perform proper forward and reverse DNS lookups to detect DNS spoofing.;;;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;"
502,Deserialization of Untrusted Data,The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.,586,913;913,Architecture and Design;Implementation,"If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.;When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.;Explicitly define a final object() to prevent deserialization.;;Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Add only acceptable classes to an allowlist. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation."
521,Weak Password Requirements,"The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.",112;16;49;509;55;555;561;565;70,1391;287,Architecture and Design;Implementation,";Consider a second
                 authentication factor beyond the password, which prevents the
                 password from being a single point of failure. See CWE-308 for
                 further information.;Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes."
522,Insufficiently Protected Credentials,"The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.",102;474;50;509;551;555;560;561;600;644;645;652;653,1390;287;668,Architecture and Design;Implementation,"Use an appropriate security mechanism to protect the credentials.;Make appropriate use of cryptography to protect the credentials.;Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.)."
532,Insertion of Sensitive Information into Log File,Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.,215,538;200,Architecture and Design;Implementation;Operation,Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.;Remove debug log files before deploying the application into production.;Protect log files against unauthorized read/write.;Adjust configurations appropriately when software is transitioned from a debug state to production.
552,Files or Directories Accessible to External Parties,"The product makes files or directories accessible to unauthorized actors, even though they should not be.",150;639,668;668;285,Architecture and Design;Implementation;Operation,"When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access."
565,Reliance on Cookies without Validation and Integrity Checking,"The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.",226;31;39,642;669;602,Architecture and Design;Implementation,"Avoid using cookie data for a security-related decision.;Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.;Add integrity checks to detect tampering.;Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client."
59,Improper Link Resolution Before File Access ('Link Following'),"The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.",132;17;35;76,706;706,Implementation,
601,URL Redirection to Untrusted Site ('Open Redirect'),"A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",178,610;610,Architecture and Design;Implementation,";Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.;;Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).;;Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth."
610,Externally Controlled Reference to a Resource in Another Sphere,The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.,219,664,Architecture and Design,
611,Improper Restriction of XML External Entity Reference,"The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.",221,610;610,Implementation,Many XML parsers and validators can be configured to disable external entity expansion.
613,Insufficient Session Expiration,"According to WASC, ""Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.""",,672;672,Architecture and Design;Implementation,Set sessions/credentials expiration date.
617,Reachable Assertion,"The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.",,670;670,Implementation,Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources);Perform input validation on user data.
639,Authorization Bypass Through User-Controlled Key,The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.,,863;863;284,Architecture and Design,"For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.;Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected.;Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering."
640,Weak Password Recovery Mechanism for Forgotten Password,"The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.",50,1390;287,Architecture and Design;Implementation,Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.;Do not use standard weak security questions and use several security questions.;Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses.;Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record.;Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.;Assign a new temporary password rather than revealing the original password.
662,Improper Synchronization,"The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.",25;26;27;29,664;691,Architecture and Design;Implementation,Use industry standard APIs to synchronize your code.
665,Improper Initialization,"The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.",26;29,664,Implementation;Operation,";Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.;Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.;Pay close attention to complex conditionals that affect initialization, since some conditions might not perform the initialization.;Avoid race conditions (CWE-362) during initialization routines.;Run or compile your product with settings that generate warnings about uninitialized variables or data.;Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."
667,Improper Locking,"The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.",25;26;27,662;662;662;662,Architecture and Design;Implementation,Use industry standard APIs to implement locking mechanism.
668,Exposure of Resource to Wrong Sphere,"The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.",,664,Architecture and Design;Implementation;Operation,
670,Always-Incorrect Control Flow Implementation,"The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.",,691,Implementation,
672,Operation on a Resource after Expiration or Release,"The product uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked.",,666,Implementation;Operation,
674,Uncontrolled Recursion,"The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.",230;231,834,Implementation,Ensure an end condition will be reached under all logic conditions.  The end condition may include testing against the depth of recursion and exiting with an error if the recursion goes too deep. The complexity of the end condition contributes to the effectiveness of this action.;Increase the stack size.
681,Incorrect Conversion between Numeric Types,"When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.",,704;704,Implementation,Avoid making conversion between numeric types. Always check for the allowed ranges.
682,Incorrect Calculation,The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.,128;129,,Implementation,"Understand your programming language's underlying representation and how it interacts with numeric calculation. Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, ""not-a-number"" calculations, and how your language handles numbers that are too large or too small for its underlying representation.;Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.;Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity.;;;Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.;Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.;Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results."
693,Protection Mechanism Failure,The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.,1;107;127;17;20;22;237;36;477;480;51;57;59;65;668;74;87,,Architecture and Design;Implementation;Operation,
697,Incorrect Comparison,"The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.",10;120;14;15;182;24;267;3;41;43;44;45;46;47;52;53;6;64;67;7;71;73;78;79;8;80;88;9;92,,Implementation,
704,Incorrect Type Conversion or Cast,"The product does not correctly convert an object, resource, or structure from one type to a different type.",,664,Implementation,
706,Use of Incorrectly-Resolved Name or Reference,"The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.",159;177;48;641,664,Architecture and Design;Implementation,
73,External Control of File Name or Path,The product allows user input to control or influence paths or file names that are used in filesystem operations.,13;267;64;72;76;78;79;80,642;610;20,Architecture and Design;Implementation,"When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to ""inbox.txt"" and ID 2 could map to ""profile.txt"". Features such as the ESAPI AccessReferenceMap provide this capability.;;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes "".."" sequences and symbolic links (CWE-23, CWE-59).;Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.;If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.;Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."
732,Incorrect Permission Assignment for Critical Resource,The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.,1;122;127;17;180;206;234;60;61;62;642,285;668,Architecture and Design;Implementation;Installation;Operation,"When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user) [REF-62], and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party.;Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207];;During program startup, explicitly set the default permissions or umask to the most restrictive setting possible. Also set the appropriate permissions during program installation. This will prevent you from inheriting insecure permissions from any user who installs or runs the program.;For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.;Do not suggest insecure configuration changes in documentation, especially if those configurations can extend to resources and other programs that are outside the scope of the application.;Do not assume that a system administrator will manually change the configuration to the settings that are recommended in the software's manual.;Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.;When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access."
74,Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'),"The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",10;101;105;108;120;13;135;14;24;250;267;273;28;3;34;42;43;45;46;47;51;52;53;6;64;67;7;71;72;76;78;79;8;80;83;84;9,707,Implementation,Programming languages and supporting technologies might be chosen which are not subject to these issues.;Utilize an appropriate mix of allowlist and denylist parsing to filter control-plane syntax from all input.
754,Improper Check for Unusual or Exceptional Conditions,The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.,,703,Implementation,";Check the results of all functions that return a value and verify that the value is expected.;If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).;;;If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.;Use system limits, which should help to prevent resource exhaustion. However, the product should still handle low resource conditions since they may still occur."
755,Improper Handling of Exceptional Conditions,The product does not handle or incorrectly handles an exceptional condition.,,703,Implementation,
763,Release of Invalid Pointer or Reference,"The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly.",,404;404;404,Implementation,"Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().;When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.;;Use a language that provides abstractions for memory allocation and deallocation.;Use a tool that dynamically detects memory management problems, such as valgrind."
77,Improper Neutralization of Special Elements used in a Command ('Command Injection'),"The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",136;15;183;248;40;43;75;76,74;74,Implementation,"If at all possible, use library calls rather than external processes to recreate the desired functionality.;If possible, ensure that all external commands called from the program are statically created.;;Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.;Assign permissions that prevent the user from accessing/opening privileged files."
770,Allocation of Resources Without Limits or Throttling,"The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",125;130;147;197;229;230;231;469;482;486;487;488;489;490;491;493;494;495;496;528,400;665;400,Architecture and Design;Implementation;Operation;System Configuration,"Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.;Limit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoid CWE-410.;Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.;;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;Ensure that protocols have specific limits of scale placed on them.;;"
772,Missing Release of Resource after Effective Lifetime,"The product does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.",469,404;404;404;404,Implementation,";It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.;"
776,Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion'),"The product uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.",197,674;674;405,Implementation;Operation,"If possible, prohibit the use of DTDs or use an XML parser that limits the expansion of recursive DTD entities.;Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content."
78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),"The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",108;15;43;6;88,77;74;77;77,Implementation,"If at all possible, use library calls rather than external processes to recreate the desired functionality.;;For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.;;;When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.;Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's ""-T"" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).;Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's ""-T"" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).;;Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.;Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."
787,Out-of-bounds Write,"The product writes data past the end, or before the beginning, of the intended buffer.",,119;119;119;119,Implementation,";;;;;;Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available."
79,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.,209;588;591;592;63;85,74;74,Implementation,";;Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.;;With Struts, write all data from form beans with the bean's filter attribute set to true.;To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.;;When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.;Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.;When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."
798,Use of Hard-coded Credentials,"The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.",191;70,1391;287;344;671,Architecture and Design,";For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a ""first login"" mode that requires the user to enter a unique strong password or key.;If the product must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.;;"
823,Use of Out-of-range Pointer Offset,"The product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.",129,119;119;119,,
824,Access of Uninitialized Pointer,The product accesses or uses a pointer that has not been initialized.,,119;119;119;119,,
829,Inclusion of Functionality from Untrusted Control Sphere,"The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.",175;201;228;251;252;253;263;538;549;640;660;695;698,669;669,Implementation,"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.;;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;;;;Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth."
834,Excessive Iteration,The product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.,,691,,
835,Loop with Unreachable Exit Condition ('Infinite Loop'),"The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",,834;834,,
843,Access of Resource Using Incompatible Type ('Type Confusion'),"The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.",,704;704,Implementation,
862,Missing Authorization,The product does not perform an authorization check when an actor attempts to access a resource or perform an action.,665,285;284,Architecture and Design;Implementation;Operation,";Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].;;;Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a ""default deny"" policy when defining these ACLs."
863,Incorrect Authorization,"The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",,285;284,Architecture and Design;Implementation;Operation,";Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].;;;Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a ""default deny"" policy when defining these ACLs."
88,Improper Neutralization of Argument Delimiters in a Command ('Argument Injection'),"The product constructs a string for a command to be executed by a separate component
in another control sphere, but it does not properly delimit the
intended arguments, options, or switches within that command string.",137;174;41;460;88,77;74;77;77,Implementation,"Where possible, avoid building a single string that contains the command and its arguments.  Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command.  For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments.  In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.;Understand all the potential areas where untrusted inputs can enter your product: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.;;Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.;;When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.;When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.;Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.;Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results."
89,Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),"The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.",108;109;110;470;66;7,943;74,Implementation;Implementation,";;;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;;When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.;;Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.;When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."
908,Use of Uninitialized Resource,The product uses or accesses a resource that has not been initialized.,,665;665,Implementation,"Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps.;Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.;Avoid race conditions (CWE-362) during initialization routines.;Run or compile the product with settings that generate warnings about uninitialized variables or data."
909,Missing Initialization of Resource,The product does not initialize a critical resource.,,665;665,Implementation,"Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all specified steps.;Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.;Avoid race conditions (CWE-362) during initialization routines.;Run or compile your product with settings that generate warnings about uninitialized variables or data."
91,XML Injection (aka Blind XPath Injection),"The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.",250;83,74;74,Implementation,
913,Improper Control of Dynamically-Managed Code Resources,"The product does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements.",,664,Architecture and Design;Implementation,"For any externally-influenced input, check the input against an allowlist of acceptable values.;Refactor the code so that it does not need to be dynamically managed."
916,Use of Password Hash With Insufficient Computational Effort,"The product generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.",55,328;327,Architecture and Design,";When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."
917,Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection'),"The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.",,77;74;77;77,Architecture and Design;Implementation,"Avoid adding user-controlled data into an expression interpreter when possible.;;The framework or tooling might allow the developer to disable or deactivate the processing of EL expressions, such as setting the isELIgnored attribute for a JSP page to ""true""."
918,Server-Side Request Forgery (SSRF),"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",664,441;610,Architecture and Design;Implementation,
922,Insecure Storage of Sensitive Information,The product stores sensitive information without properly limiting read or write access by unauthorized actors.,,664,Architecture and Design;Implementation;System Configuration,
93,Improper Neutralization of CRLF Sequences ('CRLF Injection'),"The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.",15;81,74,Implementation,Avoid using CRLF as a special sequence.;Appropriately filter or quote CRLF sequences in user-controlled input.
94,Improper Control of Generation of Code ('Code Injection'),"The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",242;35;77,74;74;913,Implementation,"Refactor your program so that you do not have to dynamically generate code.;;;Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.;Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.;Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's ""-T"" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).;Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's ""-T"" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).;"
