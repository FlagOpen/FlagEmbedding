ID,Name,Description,Related_Attack_Pattern_IDs,ChildOf_IDs,Modes_of_Introduction_Phase,Potential_Mitigations
1004,Sensitive Cookie Without 'HttpOnly' Flag,"The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.",,732,Implementation,Leverage the HttpOnly flag when setting a sensitive cookie in a response.
1007,Insufficient Visual Distinction of Homoglyphs Presented to User,"The product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.",632,451,Architecture and Design;Implementation,;
102,Struts: Duplicate Validation Forms,"The product uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.",,694;1173;20,Implementation,"The DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files."
1021,Improper Restriction of Rendered UI Layers or Frames,"The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.",103;181;222;504;506;587;654,441;610;451,Implementation,";;This defense-in-depth technique can be used to prevent the improper usage of frames in web applications. It prioritizes the valid sources of data to be loaded into the application through the usage of declarative policies. Based on which implementation of Content Security Policy is in use, the developer should use the ""frame-ancestors"" directive or the ""frame-src"" directive to mitigate this weakness. Both directives allow for the placement of restrictions when it comes to allowing embedded content."
1022,Use of Web Link to Untrusted Target with window.opener Access,"The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying  security-critical properties of the window.opener object, such as the location property.",,266,Architecture and Design;Implementation,Specify in the design that any linked external document must not be granted access to the location object of the calling page.;;
1023,Incomplete Comparison with Missing Factors,"The product performs a comparison between entities that must consider multiple factors or characteristics of each entity, but the comparison does not include one or more of these factors.",,697,Implementation,Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.
1024,Comparison of Incompatible Types,"The product performs a comparison between two entities, but the entities are of different, incompatible types that cannot be guaranteed to provide correct results when they are directly compared.",,697,Implementation,Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.
1025,Comparison Using Wrong Factors,"The code performs a comparison between two entities, but the comparison examines the wrong factors or characteristics of the entities, which can lead to incorrect results and resultant weaknesses.",,697,Implementation,Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.
103,Struts: Incomplete validate() Method Definition,"The product has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().",,573;20,Implementation,Implement the validate() method and call super.validate() within that method.
1037,Processor Optimization Removal or Modification of Security-critical Code,"The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.",663,1038,Architecture and Design,
1038,Insecure Automated Optimizations,"The product uses a mechanism that automatically optimizes code, e.g. to improve a characteristic such as performance, but the optimizations can have an unintended side effect that might violate an intended security assumption.",,435;758,Architecture and Design,
1039,Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations,"The product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept.",,693;697,Architecture and Design,
104,Struts: Form Bean Does Not Extend Validation Class,"If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.",,573;20,Implementation,Ensure that all forms extend one of the Validation Classes.
1041,Use of Redundant Code,"The product has multiple functions, methods, procedures, macros, etc. that
					contain the same code.",,710,,Merge common functionality into a single function and then call that function from across the entire code base.
1042,Static Member Data Element outside of a Singleton Class Element,"The code contains a member element that is declared as static (but not final), in which
					its parent class element 
					is not a singleton class - that is, a class element that can be used only once in
					the 'to' association of a Create action.",,1176,,
1043,Data Element Aggregating an Excessively Large Number of Non-Primitive Elements,"The product uses a data element that has an excessively large
					number of sub-elements with non-primitive data types such as structures or aggregated objects.",,1093,,
1044,Architecture with Number of Horizontal Layers Outside of Expected Range,"The product's architecture contains too many - or too few -
					horizontal layers.",,710,Architecture and Design,
1045,Parent Class with a Virtual Destructor and a Child Class without a Virtual Destructor,"A parent class has a virtual destructor method, but the parent has a child class that does not have a virtual destructor.",,1076,,
1046,Creation of Immutable Text Using String Concatenation,The product creates an immutable text string using string concatenation operations.,,1176,,
1047,Modules with Circular Dependencies,"The product contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.",,1120,,
1048,Invokable Control Element with Large Number of Outward Calls,"The code contains callable control elements that
         contain an excessively large number of references to other
         application objects external to the context of the callable,
         i.e. a Fan-Out value that is excessively large.",,710,,
1049,Excessive Data Query Operations in a Large Data Table,"The product performs a data query with a large number of joins
					and sub-queries on a large data table.",,1176,,
105,Struts: Form Field Without Validator,"The product has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.",,1173;20,Implementation,"Validate all form fields. If a field is unused, it is still important to constrain it so that it is empty or undefined."
1050,Excessive Platform Resource Consumption within a Loop,"The product has a loop body or loop condition that contains a control element that directly or
					indirectly consumes platform resources, e.g. messaging, sessions, locks, or file
					descriptors.",,405,,
1051,Initialization with Hard-Coded Network Resource Configuration Data,The product initializes data using hard-coded values that act as network resource identifiers.,,1419,,
1052,Excessive Use of Hard-Coded Literals in Initialization,"The product initializes a data element using a hard-coded
					literal that is not a simple integer or static constant element.",,1419,,
1053,Missing Documentation for Design,The product does not have documentation that represents how it is designed.,,1059,,
1054,Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer,"The code at one architectural layer invokes code that resides
					at a deeper layer than the adjacent layer, i.e., the invocation skips at least one
					layer, and the invoked code is not part of a vertical utility layer that can be referenced from any horizontal layer.",,1061,,
1055,Multiple Inheritance from Concrete Classes,"The product contains a class with inheritance from more than
					one concrete class.",,1093,,
1056,Invokable Control Element with Variadic Parameters,"A named-callable or method control element has a signature that
					supports a variable (variadic) number of parameters or arguments.",,1120,,
1057,Data Access Operations Outside of Expected Data Manager Component,"The product uses a dedicated, central data manager component as required by design, but it contains code that performs data-access operations that do not use this data manager.",,1061,,
1058,Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element,"The code contains a function or method that
		 operates in a multi-threaded environment but owns an unsafe non-final
		                     static storable or member data element.",,662;662;662,,
1059,Insufficient Technical Documentation,"The product does not contain sufficient
         technical or engineering documentation (whether on paper or
         in electronic form) that contains descriptions of all the
         relevant software/hardware elements of the product, such as
         its usage, structure, architectural components, interfaces, design, implementation,
         configuration, operation, etc.",,710,Architecture and Design;Documentation,Ensure that design documentation is detailed enough to allow for post-manufacturing verification.
106,Struts: Plug-in Framework not in Use,"When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.",,1173;20,Implementation,Use an input validation framework such as Struts.;Use an input validation framework such as Struts.;;
1060,Excessive Number of Inefficient Server-Side Data Accesses,The product performs too many data queries without using efficient data processing functionality such as stored procedures.,,1120,,
1061,Insufficient Encapsulation,"The product does not sufficiently hide the internal representation and implementation details of data or methods, which might allow external components or modules to modify data unexpectedly, invoke unexpected functionality, or introduce dependencies that the programmer did not intend.",,710,,
1062,Parent Class with References to Child Class,"The code has a parent class that contains references to a child class, its methods, or its members.",,1061,,
1063,Creation of Class Instance within a Static Code Block,A static code block creates an instance of a class.,,1176,,
1064,Invokable Control Element with Signature Containing an Excessive Number of Parameters,"The product contains a function, subroutine, or method whose signature has an unnecessarily large number of
					parameters/arguments.",,1120,,
1065,Runtime Resource Management Control Element in a Component Built to Run on Application Servers,"The product uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.",,710,,
1066,Missing Serialization Control Element,"The product contains a serializable data element that does not
					have an associated serialization method.",,710,,
1067,Excessive Execution of Sequential Searches of Data Resource,"The product contains a data query against an SQL table or view
					that is configured in a way that does not utilize an index and may cause
					sequential searches to be performed.",,1176,,
1068,Inconsistency Between Implementation and Documented Design,"The implementation of the product is not consistent with the
					design as described within the relevant documentation.",,710,Implementation,
1069,Empty Exception Block,"An invokable code block contains an exception handling block that does not contain any code, i.e. is empty.",,1071,,For every exception block add code that handles the specific exception in the way intended by the application.
107,Struts: Unused Validation Form,An unused validation form indicates that validation logic is not up-to-date.,,1164;20,Implementation;Operation,Remove the unused Validation Form from the validation.xml file.
1070,Serializable Data Element Containing non-Serializable Item Elements,"The product contains a serializable, storable data element such as a field or member,
					but the data element contains member elements that are not
					serializable.",,1076,,
1071,Empty Code Block,"The source code contains a block that does not contain any code, i.e., the block is empty.",,1164,,
1072,Data Resource Access without Use of Connection Pooling,"The product accesses a data resource through a database without using a
					connection pooling capability.",,405,,
1073,Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses,"The product contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.",,405,,
1074,Class with Excessively Deep Inheritance,"A class has an inheritance level that is too high, i.e., it
					has a large number of parent classes.",,1093,,
1075,Unconditional Control Flow Transfer outside of Switch Block,"The product performs unconditional control transfer (such as a
					""goto"") in code outside of a branching structure such as a switch
					block.",,1120,,
1076,Insufficient Adherence to Expected Conventions,"The product's architecture, source code, design, documentation,
					or other artifact does not follow required conventions.",,710,,
1077,Floating Point Comparison with Incorrect Operator,"The code performs a comparison such as an
        equality test between two float (floating point) values, but
        it uses comparison operators that do not account for the
        possibility of loss of precision.",,697,,
1078,Inappropriate Source Code Style or Formatting,"The source code does not follow
				desired style or formatting for indentation, white
				space, comments, etc.",,1076,,
1079,Parent Class without Virtual Destructor Method,"A parent class contains one or more child classes, but the parent class does not have a virtual destructor method.",,1076,,
108,Struts: Unvalidated Action Form,Every Action Form must have a corresponding validation form.,,1173;20,Implementation,
1080,Source Code File with Excessive Number of Lines of Code,"A source code file has too many lines of
					code.",,1120,,
1082,Class Instance Self Destruction Control Element,The code contains a class instance that calls the method or function to delete or destroy itself.,,1076,,
1083,Data Access from Outside Expected Data Manager Component,"The product is intended to manage data access through a particular data manager component such as a relational or non-SQL database, but it contains code that performs data access operations without using that component.",,1061,,
1084,Invokable Control Element with Excessive File or Data Access Operations,"A function or method contains too many
					operations that utilize a data manager or file resource.",,405,,
1085,Invokable Control Element with Excessive Volume of Commented-out Code,"A function, method, procedure, etc. contains an excessive amount of code that has been
					commented out within its body.",,1078,,
1086,Class with Excessive Number of Child Classes,"A class contains an unnecessarily large number of
					children.",,1093,,
1087,Class with Virtual Method without a Virtual Destructor,"A class contains a virtual method, but the method does not have an associated virtual destructor.",,1076,,
1088,Synchronous Access of Remote Resource without Timeout,"The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite.",,821,,
1089,Large Data Table with Excessive Number of Indices,"The product uses a large data table that contains an excessively large number of
					indices.",,405,,
109,Struts: Validator Turned Off,"Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.",,1173;20,Implementation,Ensure that an action form mapping enables validation. Set the validate field to true.
1090,Method Containing Access of a Member Element from Another Class,"A method for a class performs an operation that directly
					accesses a member element from another class.",,1061,,
1091,Use of Object without Invoking Destructor Method,"The product contains a method that accesses an object but does not later invoke
					the element's associated finalize/destructor method.",,772;1076,,
1092,Use of Same Invokable Control Element in Multiple Architectural Layers,"The product uses the same control element across multiple
					architectural layers.",,710,,
1093,Excessively Complex Data Representation,The product uses an unnecessarily complex internal representation for its data structures or interrelationships between those structures.,,710,,
1094,Excessive Index Range Scan for a Data Resource,"The product contains an index range scan for a large data table,
					but the scan can cover a large number of rows.",,405,,
1095,Loop Condition Value Update within the Loop,"The product uses a loop with a control flow condition based on
					a value that is updated within the body of the loop.",,1120,,
1096,Singleton Class Instance Creation without Proper Locking or Synchronization,The product implements a Singleton design pattern but does not use appropriate locking or other synchronization mechanism to ensure that the singleton class is only instantiated once.,,820;662;662,,
1097,Persistent Storable Data Element without Associated Comparison Control Element,"The product uses a storable data element that does not have
					all of the associated functions or methods that are necessary to support
					comparison.",,1076;595,,
1098,Data Element containing Pointer Item without Proper Copy Control Element,The code contains a data element with a pointer that does not have an associated copy or constructor method.,,1076,,
1099,Inconsistent Naming Conventions for Identifiers,"The product's code, documentation, or other artifacts do not
					consistently use the same naming conventions for variables, callables, groups of
					related callables, I/O capabilities, data types, file names, or similar types of
					elements.",,1078,,
11,ASP.NET Misconfiguration: Creating Debug Binary,Debugging messages help attackers learn about the system and plan a form of attack.,,489,Implementation;Build and Compilation,Avoid releasing debug binaries into the production environment. Change the debug mode to false when the application is deployed into production.
110,Struts: Validator Without Form Field,Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.,,1164;20,Implementation;Operation,
1100,Insufficient Isolation of System-Dependent Functions,"The product or code does not isolate system-dependent
					functionality into separate standalone modules.",,1061,,
1101,Reliance on Runtime Component in Generated Code,"The product uses automatically-generated code that cannot be
					executed without a specific runtime support component.",,710,,
1102,Reliance on Machine-Dependent Data Representation,"The code uses a data representation that relies on low-level
					data representation or constructs that may vary across different processors,
					physical machines, OSes, or other physical components.",,758,,
1103,Use of Platform-Dependent Third Party Components,"The product relies on third-party components that do
					not provide equivalent functionality across all desirable
					platforms.",,758,,
1104,Use of Unmaintained Third Party Components,"The product relies on third-party components that are not
					actively supported or maintained by the original developer or a trusted proxy
					for the original developer.",,1357,,
1105,Insufficient Encapsulation of Machine-Dependent Functionality,"The product or code uses machine-dependent functionality, but
					it does not sufficiently encapsulate or isolate this functionality from
					the rest of the code.",,758;1061,,
1106,Insufficient Use of Symbolic Constants,"The source code uses literal constants that may need to change
					or evolve over time, instead of using symbolic constants.",,1078,,
1107,Insufficient Isolation of Symbolic Constant Definitions,"The source code uses symbolic constants, but it does not
					sufficiently place the definitions of these constants into a more centralized or
					isolated location.",,1078,,
1108,Excessive Reliance on Global Variables,"The code is structured in a way that relies too much on using
					or setting global variables throughout various points in the code, instead of
					preserving the associated information in a narrower, more local
					context.",,1076,,
1109,Use of Same Variable for Multiple Purposes,"The code contains a callable, block, or other code element in
					which the same variable is used to control more than one unique task or store
					more than one instance of data.",,1078,,
111,Direct Use of Unsafe JNI,"When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.",,695;20,Implementation,Implement error handling around the JNI call.;Do not use JNI calls if you don't trust the native library.;Be reluctant to use JNI calls. A Java API equivalent may exist.
1110,Incomplete Design Documentation,"The product's design documentation does not adequately describe
					control flow, data flow, system initialization, relationships between tasks,
					components, rationales, or other important aspects of the
					design.",,1059,,
1111,Incomplete I/O Documentation,"The product's documentation does not adequately define inputs,
					outputs, or system/software interfaces.",,1059,,
1112,Incomplete Documentation of Program Execution,"The document does not fully define all mechanisms that are used
					to control or influence how product-specific programs are
					executed.",,1059,,
1113,Inappropriate Comment Style,"The source code uses comment styles or formats that are
					inconsistent or do not follow expected standards for the
					product.",,1078,,
1114,Inappropriate Whitespace Style,"The source code contains whitespace that is inconsistent across
					the code or does not follow expected standards for the
					product.",,1078,,
1115,Source Code Element without Standard Prologue,"The source code contains elements such as source files 
					that do not consistently provide a prologue or header that has been
					standardized for the project.",,1078,,
1116,Inaccurate Comments,"The source code contains comments that do not accurately
					describe or explain aspects of the portion of the code with which the comment is
					associated.",,1078,,Verify that each comment accurately reflects what is intended to happen during execution of the code.
1117,Callable with Insufficient Behavioral Summary,"The code contains a function or method whose signature and/or associated
					inline documentation does not sufficiently describe the callable's inputs, outputs,
					side effects, assumptions, or return codes.",,1078,,
1118,Insufficient Documentation of Error Handling Techniques,"The documentation does not sufficiently describe the techniques
					that are used for error handling, exception processing, or similar
					mechanisms.",,1059,,
1119,Excessive Use of Unconditional Branching,"The code uses too many unconditional branches (such as
					""goto"").",,1120,,
112,Missing XML Validation,The product accepts XML from an untrusted source but does not validate the XML against the proper schema.,230;231,1286;20,Implementation,
1120,Excessive Code Complexity,"The code is too complex, as calculated using a well-defined,
					quantitative measure.",,710,,
1121,Excessive McCabe Cyclomatic Complexity,"The code contains McCabe cyclomatic complexity that exceeds a
	desirable maximum.",,1120,,
1122,Excessive Halstead Complexity,"The code is structured in a way that a Halstead complexity
					measure exceeds a desirable maximum.",,1120,,
1123,Excessive Use of Self-Modifying Code,"The product uses too much self-modifying
					code.",,1120,,
1124,Excessively Deep Nesting,"The code contains a callable or other code grouping in which
					the nesting / branching is too deep.",,1120,,
1125,Excessive Attack Surface,"The product has an attack surface whose quantitative
					measurement exceeds a desirable maximum.",,1120,,
1126,Declaration of Variable with Unnecessarily Wide Scope,"The source code declares a variable in one scope, but the
					variable is only used within a narrower scope.",,710,,
1127,Compilation with Insufficient Warnings or Errors,"The code is compiled without sufficient warnings enabled, which
					may prevent the detection of subtle bugs or quality
					issues.",,710,Build and Compilation,
113,Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting'),"The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.",105;31;34;85,93;20;436,Implementation,"Construct HTTP headers very carefully, avoiding the use of non-validated input data.;;Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
114,Process Control,Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.,108;640,73;20,Implementation,"Libraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it."
115,Misinterpretation of Input,"The product misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.",,436,Architecture and Design;Implementation,
116,Improper Encoding or Escaping of Output,"The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",104;73;81;85,707,Implementation;Operation,";;Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.;In some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict allowlist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input.;Use input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20).;Fully specify which encodings are required by components that will be communicating with each other.;When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so."
1164,Irrelevant Code,"The product contains code that is not essential for execution,
	     i.e. makes no state changes and has no side effects that alter
	     data or control flow, such that removal of the code would have no impact
	     to functionality or correctness.",,710,,
117,Improper Output Neutralization for Logs,The product does not neutralize or incorrectly neutralizes output that is written to logs.,268;81;93,116;20,Implementation,";Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
1173,Improper Use of Validation Framework,"The product does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.",,20,Architecture and Design;Implementation,Properly use provided input validation frameworks.
1174,ASP.NET Misconfiguration: Improper Model Validation,"The ASP.NET application does not use, or incorrectly uses, the model validation framework.",,1173,Architecture and Design;Implementation,
1176,Inefficient CPU Computation,"The product performs CPU computations using
         algorithms that are not as efficient as they could be for the
         needs of the developer, i.e., the computations can be
         optimized further.",,405,Architecture and Design;Implementation,
1177,Use of Prohibited Code,"The product uses a function, library, or third party component
	     that has been explicitly prohibited, whether by the developer or
	     the customer.",,710,Implementation,
118,Incorrect Access of Indexable Resource ('Range Error'),"The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.",10;14;24;45;46;47;8;9,664,Implementation,
1187,DEPRECATED: Use of Uninitialized Resource,This entry has been deprecated because it was a duplicate of CWE-908. All content has been transferred to CWE-908.,,,,
1188,Initialization of a Resource with an Insecure Default,"The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.",665,1419;665,,
1189,Improper Isolation of Shared Resources on System-on-a-Chip (SoC),The System-On-a-Chip (SoC) does not properly isolate shared resources between trusted and untrusted agents.,124,653;668,Architecture and Design;Implementation,
119,Improper Restriction of Operations within the Bounds of a Memory Buffer,"The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.",10;100;123;14;24;42;44;45;46;47;8;9,118;20,Implementation,";;;;;;Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available."
1190,DMA Device Enabled Too Early in Boot Phase,"The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.",180,696,Architecture and Design,"Utilize an IOMMU to orchestrate IO access from
                 the start of the boot process."
1191,On-Chip Debug and Test Interface With Improper Access Control,The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.,1;180,284,Architecture and Design;Implementation,"If feasible, the manufacturer should disable the JTAG interface or implement authentication and authorization for the JTAG interface. If authentication logic is added, it should be resistant to timing attacks. Security-sensitive data stored in registers, such as keys, etc. should be cleared when entering debug mode."
1192,Improper Identifier for IP Block used in System-On-Chip (SOC),"The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.",113,657,Architecture and Design;Implementation;Operation,
1193,Power-On of Untrusted Execution Core Before Enabling Fabric Access Control,The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.,1;180,696,,
12,ASP.NET Misconfiguration: Missing Custom Error Page,An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in responses.,,756,Implementation;Operation,Handle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.;Do not attempt to process an error or attempt to mask it.;Verify return values are correct and do not supply sensitive information about the system.
120,Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'),"The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.",10;100;14;24;42;44;45;46;47;67;8;9;92,119;119;119;119;20,Implementation,";;;;;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;;Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.;Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.;When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;"
1204,Generation of Weak Initialization Vector (IV),"The product uses a cryptographic primitive that uses an Initialization
			Vector (IV), but the product does not generate IVs that are
			sufficiently unpredictable or unique according to the expected
			cryptographic requirements for that primitive.
			",20;97,330,Implementation,
1209,Failure to Disable Reserved Bits,"The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design.   However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.",121,710,Architecture and Design;Implementation;Documentation,;
121,Stack-based Buffer Overflow,"A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",,788;787,Implementation,";Use an abstraction library to abstract away risky APIs. Not a complete solution.;Implement and perform bounds checking on input.;Do not use dangerous functions such as gets. Use safer, equivalent functions which check for boundary errors.;"
122,Heap-based Buffer Overflow,"A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().",92,788;787,Implementation,"Pre-design: Use a language or compiler that performs automatic bounds checking.;Use an abstraction library to abstract away risky APIs. Not a complete solution.;;;Implement and perform bounds checking on input.;Do not use dangerous functions such as gets. Look for their safe equivalent, which checks for the boundary.;Use OS-level preventative functionality. This is not a complete solution, but it provides some defense in depth."
1220,Insufficient Granularity of Access Control,"The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.",1;180,284,Architecture and Design;Implementation,
1221,Incorrect Register Defaults or Module Parameters,Hardware description language code incorrectly defines register defaults or hardware Intellectual Property (IP) parameters to insecure values.,166,1419,Implementation,"During hardware design, all the system parameters and register defaults must be reviewed to identify security sensitive settings.;The default values of these security sensitive settings need to be defined as part of the design review phase.;Testing phase should use automated tools to test that values are configured per design specifications."
1222,Insufficient Granularity of Address Regions Protected by Register Locks,The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.,679,1220,Architecture and Design,
1223,Race Condition for Write-Once Attributes,"A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.",26,362,Architecture and Design,During hardware design all register write-once or sticky fields must be evaluated for proper configuration.;The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.
1224,Improper Restriction of Write-Once Bit Fields,"The hardware design control register ""sticky bits"" or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.",680,284,Architecture and Design;Implementation,During hardware design all register write-once or sticky fields must be evaluated for proper configuration.;The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.
1229,Creation of Emergent Resource,"The product manages resources or behaves in a way that indirectly creates a new, distinct resource that can be used by attackers in violation of the intended policy.",,664,,
123,Write-what-where Condition,"Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow.",,787;119;119,Implementation,Use a language that provides appropriate memory abstractions.;Use OS-level preventative functionality integrated after the fact. Not a complete solution.
1230,Exposure of Sensitive Information Through Metadata,"The product prevents direct access to a resource containing sensitive information, but it does not sufficiently limit access to metadata that is derived from the original, sensitive information.",,285,Architecture and Design,
1231,Improper Prevention of Lock Bit Modification,"The product uses a trusted lock bit for restricting access to registers, address regions, or other resources, but the product does not prevent the value of the lock bit from being modified after it has been set.",680,284,Architecture and Design;Implementation,
1232,Improper Lock Behavior After Power State Transition,"Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable.",166,667,Architecture and Design;Implementation,
1233,Security-Sensitive Hardware Controls with Missing Lock Bit Protection,"The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.",176;680,284;667,Architecture and Design;Implementation,
1234,Hardware Internal or Debug Modes Allow Override of Locks,System configuration protection may be bypassed during debug mode.,176,667,Architecture and Design;Implementation,
1235,Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations,"The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations.",,400,Implementation,Use of boxed primitives should be limited to certain situations such as when calling methods with typed parameters.  Examine the use of boxed primitives prior to use. Use SparseArrays or ArrayMap instead of HashMap to avoid performance overhead.
1236,Improper Neutralization of Formula Elements in a CSV File,"The product saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by a spreadsheet product.",,74;74,Implementation,"When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV.  Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).;If a field starts with a formula character, prepend it with a ' (single apostrophe), which prevents Excel from executing the formula.;Certain implementations of spreadsheet software might disallow formulas from executing if the file is untrusted, or if the file is not authored by the current user."
1239,Improper Zeroization of Hardware Register,The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.,150;204;37;545,226;226,Architecture and Design;Implementation;Operation,"Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time."
124,Buffer Underwrite ('Buffer Underflow'),The product writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.,,786;787,Implementation,Choose a language that is not susceptible to these issues.;All calculated values that are used as index or for pointer arithmetic should be validated to ensure that they are within an expected range.
1240,Use of a Cryptographic Primitive with a Risky Implementation,"To fulfill the need for a cryptographic primitive, the product implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant cryptographic implementation.",97,327,Architecture and Design;Implementation,"Require compliance with the strongest-available recommendations from trusted parties, and require that compliance must be kept up-to-date, since recommendations evolve over time. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].;Ensure that the architecture/design uses the strongest-available primitives and algorithms from trusted parties. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].;Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. As with all cryptographic mechanisms, the source code should be available for analysis. If the algorithm may be compromised when attackers find out how it works, then it is especially weak.;Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you ""know"" it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.;Ensure that the design can replace one cryptographic primitive or algorithm with another in the next generation (""cryptographic agility""). Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. This is especially important for hardware, which can be more difficult to upgrade quickly than software; design the hardware at a replaceable block level.;Do not use outdated or non-compliant cryptography algorithms. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong [REF-267].;Do not use a linear-feedback shift register (LFSR) or other legacy methods as a substitute for an accepted and standard Random Number Generator.;Do not use a checksum as a substitute for a cryptographically generated hash.;Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.;When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for the prevention of common attacks.;Do not store keys in areas accessible to untrusted agents. Carefully manage and protect the cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography algorithm is irrelevant."
1241,Use of Predictable Algorithm in Random Number Generator,The device uses an algorithm that is predictable and generates a pseudo-random number.,97,330,Architecture and Design;Implementation,A true random number generator should be specified for cryptographic algorithms.;A true random number generator should be implemented for cryptographic algorithms.
1242,Inclusion of Undocumented Features or Chicken Bits,The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.,212;36,284,Architecture and Design;Implementation;Documentation,
1243,Sensitive Non-Volatile Information Not Protected During Debug,Access to security-sensitive information stored in fuses is not limited during debug.,116;545,1263,Architecture and Design;Implementation,
1244,Internal Asset Exposed to Unsafe Debug Access Level or State,"The product uses physical debug or test
        interfaces with support for multiple access levels, but it
        assigns the wrong debug access level to an internal asset,
        providing unintended access to the asset from untrusted debug
        agents.",114,863,Architecture and Design;Implementation,";Apply blinding [REF-1219] or masking techniques in strategic areas.;Add shielding or tamper-resistant protections to the device, which increases the difficulty and cost for accessing debug/test interfaces."
1245,Improper Finite State Machines (FSMs) in Hardware Logic,"Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.",74,684,Architecture and Design;Implementation,Define all possible states and handle all unused states through default statements. Ensure that system defaults to a secure state.
1246,Improper Write Handling in Limited-write Non-Volatile Memories,The product does not implement or incorrectly implements wear leveling operations in limited-write non-volatile memories.,212,400,Architecture and Design;Implementation,Include secure wear leveling algorithms and ensure they may not be bypassed.
1247,Improper Protection Against Voltage and Clock Glitches,The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.,624;625,1384,Operation,
1248,Semiconductor Defects in Hardware Logic with Security-Sensitive Implications,The security-sensitive hardware module contains semiconductor defects.,624;625,693,Manufacturing;Operation,;
1249,Application-Level Admin Tool with Inconsistent View of Underlying Operating System,"The product provides an application for administrators to manage parts of the underlying operating system, but the application does not accurately identify all of the relevant entities or resources that exist in the OS; that is, the application's model of the OS's state is inconsistent with the OS's actual state.",,1250,Architecture and Design;Implementation,
125,Out-of-bounds Read,"The product reads data past the end, or before the beginning, of the intended buffer.",540,119;119;119;119,Implementation,;Use a language that provides appropriate memory abstractions.
1250,Improper Preservation of Consistency Between Independent Representations of Shared State,The product has or supports multiple distributed components or sub-systems that are each required to keep their own local copy of shared data - such as state or cache - but the product does not ensure that all local copies remain consistent with each other.,,664,,
1251,Mirrored Regions with Different Values,The product's architecture mirrors regions without ensuring that their contents always stay in sync.,,1250,,
1252,CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations,The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.,679,284,Architecture and Design,;
1253,Incorrect Selection of Fuse Values,The logic level used to set a system to a secure state relies on a fuse being unblown. An attacker can set the system to an insecure state merely by blowing the fuse.,74,693,Architecture and Design;Implementation,Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.
1254,Incorrect Comparison Logic Granularity,"The product's comparison logic is performed over a series of steps rather than across the entire string in one operation. If there is a comparison logic failure on one of these steps, the operation may be vulnerable to a timing attack that can result in the interception of the process for nefarious purposes.",26,208;697,Architecture and Design;Implementation,
1255,Comparison Logic is Vulnerable to Power Side-Channel Attacks,A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token.,189,1300,Architecture and Design;Implementation,"The design phase must consider each check of a security token against a standard and the amount of power consumed during the check of a good token versus a bad token. The alternative is an all at once check where a retry counter is incremented PRIOR to the check.;Another potential mitigation is to parallelize shifting of secret data (see example 2 below). Note that the wider the bus the more effective the result.;An additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator.;If the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements.;During integration, avoid use of a single secret for an extended period (e.g. frequent key updates). This limits the amount of data compromised but at the cost of complexity of use."
1256,Improper Restriction of Software Interfaces to Hardware Features,"The product provides software-controllable
			device functionality for capabilities such as power and
			clock management, but it does not properly limit
			functionality that can lead to modification of
			hardware memory or register bits, or the ability to
			observe physical side channels.",624;625,285,Architecture and Design;Implementation,
1257,Improper Access Control Applied to Mirrored or Aliased Memory Regions,"Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.
			",456;679,284,Architecture and Design;Implementation,"The checks should be applied for consistency access rights between primary memory regions and any mirrored or aliased memory regions. If different memory protection units (MPU) are protecting the aliased regions, their protected range definitions and policies should be synchronized.;The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components."
1258,Exposure of Sensitive System Information Due to Uncleared Debug Information,"The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.",150;204;37;545,212;200,Architecture and Design;Implementation,
1259,Improper Restriction of Security Token Assignment,"The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.",121;681,284;1294,Architecture and Design;Implementation,
126,Buffer Over-read,The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.,,125;788,Implementation,
1260,Improper Handling of Overlap Between Protected Memory Ranges,"The product allows address regions to overlap, which can result in the bypassing of intended memory protection.",456;679,284,Architecture and Design;Implementation,;
1261,Improper Handling of Single Event Upsets,The hardware logic does not effectively handle when single-event upsets (SEUs) occur.,,1384,Architecture and Design;Implementation,;
1262,Improper Access Control for Register Interface,"The product uses memory-mapped I/O registers that act as an interface to hardware functionality from software, but there is improper access control to those registers.",680,284,Architecture and Design;Implementation,Design proper policies for hardware register access from software.;Ensure that access control policies for register access are implemented in accordance with the specified design.
1263,Improper Physical Access Control,"The product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.",401,284,Architecture and Design;Manufacturing,Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with.;The testing phase of the lifecycle should establish a method for determining whether the protection mechanism is sufficient to prevent unauthorized access.;Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.
1264,Hardware Logic with Insecure De-Synchronization between Control and Data Channels,The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete.,233;663,821,Architecture and Design;Implementation,
1265,Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls,"During execution of non-reentrant code, the product performs a call that unintentionally produces a nested invocation of the non-reentrant code.",74,691,,"When architecting a system that will execute untrusted code in response to events, consider executing the untrusted event handlers asynchronously (asynchronous message passing) as opposed to executing them synchronously at the time each event fires. The untrusted code should execute at the start of the next iteration of the thread's message loop. In this way, calls into non-reentrant code are strictly serialized, so that each operation completes fully before the next operation begins. Special attention must be paid to all places where type coercion may result in script execution. Performing all needed coercions at the very beginning of an operation can help reduce the chance of operations executing at unexpected junctures.;Make sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code."
1266,Improper Scrubbing of Sensitive Data from Decommissioned Device,"The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned.  A scrubbing capability could be missing, insufficient, or incorrect.",150;37;545;546;675,404,Architecture and Design;Policy;Implementation,;;
1267,Policy Uses Obsolete Encoding,The product uses an obsolete encoding mechanism to implement access controls.,121;681,284,Architecture and Design;Implementation,
1268,Policy Privileges are not Assigned Consistently Between Control and Data Agents,"The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies.
			   ",180,284,Architecture and Design;Implementation,Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.
1269,Product Released in Non-Release Configuration,The product released to market is released in pre-production or manufacturing configuration.,439,693,Implementation;Integration;Manufacturing,"Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).;Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).;Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown)."
127,Buffer Under-read,The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer.,,125;786,Implementation,
1270,Generation of Incorrect Security Tokens,"The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.",121;633;681,284;1294,Architecture and Design;Implementation,
1271,Uninitialized Value on Reset for Registers Holding Security Settings,Security-critical logic is not set to a known value on reset.,74,909,Implementation,Design checks should be performed to identify any uninitialized flip-flops used for security-critical functions.;All registers holding security-critical information should be set to a specific value on reset.
1272,Sensitive Information Uncleared Before Debug/Power State Transition,"The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.",150;37;545;546,226,Architecture and Design,"During state transitions, information not needed in the next state should be removed before the transition to the next state."
1273,Device Unlock Credential Sharing,The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information.,560,200,Integration;Manufacturing,"Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific.;Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific."
1274,Improper Access Control for Volatile Memory Containing Boot Code,"The product conducts a secure-boot process that transfers bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not have sufficient access control or other protections for the Volatile Memory.",456;679,284,Architecture and Design,Ensure that the design of volatile-memory protections is enough to prevent modification from an adversary or untrusted code.;Test the volatile-memory protections to ensure they are safe from modification or untrusted code.
1275,Sensitive Cookie with Improper SameSite Attribute,"The SameSite attribute for sensitive cookies is not set, or an insecure value is used.",62,923,Implementation,"Set the SameSite attribute of a sensitive cookie to 'Lax' or 'Strict'. This instructs the browser to apply this cookie only to same-domain requests, which provides a good Defense in Depth against CSRF attacks. When the 'Lax' value is in use, cookies are also sent for top-level cross-domain navigation via HTTP GET, HEAD, OPTIONS, and TRACE methods, but not for other HTTP methods that are more like to cause side-effects of state mutation."
1276,Hardware Child Block Incorrectly Connected to Parent System,Signals between a hardware IP and the parent system design are incorrectly connected causing security risks.,,284,Implementation,System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks.
1277,Firmware Not Updateable,"The product does not provide its
			users with the ability to update or patch its
			firmware to address any vulnerabilities or
			weaknesses that may be present.",682,1329,Requirements;Architecture and Design;Implementation,Specify requirements to include the ability to update the firmware. Include integrity checks and authentication to ensure that untrusted firmware cannot be installed.;Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.;Implement the necessary functionality to allow the firmware to be updated.
1278,Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques,Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.,188;37;545,693,Architecture and Design,"The cost of secret extraction via IC reverse engineering should outweigh the potential value of the secrets being extracted. Threat model and value of secrets should be used to choose the technology used to safeguard those secrets. Examples include IC camouflaging and obfuscation, tamper-proof packaging, active shielding, and physical tampering detection information erasure."
1279,Cryptographic Operations are run Before Supporting Units are Ready,Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result.,97,691;665,Architecture and Design;Implementation,Best practices should be used to design cryptographic systems.;Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.
128,Wrap-around Error,"Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore ""wraps around"" to a very small, negative, or undefined value.",92,682,Implementation,Requirements specification: The choice could be made to use a language that is not susceptible to these issues.;Provide clear upper and lower bounds on the scale of any protocols designed.;Perform validation on all incremented variables to ensure that they remain within reasonable bounds.
1280,Access Control Check Implemented After Asset is Accessed,A product's hardware-based access control check occurs after the asset has been accessed.,180,696;284,Implementation,Implement the access control check first. Access should only be given to asset if agent is authorized.
1281,Sequence of Processor Instructions Leads to Unexpected Behavior,Specific combinations of processor instructions lead to undesirable behavior such as locking the processor until a hard reset performed.,212,691,Architecture and Design;Implementation,Implement a rigorous testing strategy that incorporates randomization to explore instruction sequences that are unlikely to appear in normal workloads in order to identify halt and catch fire instruction sequences.;Patch operating system to avoid running Halt and Catch Fire type sequences or to mitigate the damage caused by unexpected behavior.  See [REF-1108].
1282,Assumed-Immutable Data is Stored in Writable Memory,"Immutable data, such as a first-stage bootloader, device identifiers, and ""write-once"" configuration settings are stored in writable memory that can be re-programmed or updated in the field.",458;679,668,Implementation,All immutable code or data should be programmed into ROM or write-once memory.
1283,Mutable Attestation or Measurement Reporting Data,The register contents used for attestation or measurement reporting data to verify boot flow are modifiable by an adversary.,680,284,Architecture and Design;Implementation,
1284,Improper Validation of Specified Quantity in Input,"The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",,20;20,Implementation,
1285,"Improper Validation of Specified Index, Position, or Offset in Input","The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.",,20,Implementation,
1286,Improper Validation of Syntactic Correctness of Input,"The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.",66;676,20,Implementation,
1287,Improper Validation of Specified Type of Input,"The product receives input that is expected to be of a certain type, but it does not validate or incorrectly validates that the input is actually of the expected type.",,20,Implementation,
1288,Improper Validation of Consistency within Input,"The product receives a complex input with multiple elements or fields that must be consistent with each other, but it does not validate or incorrectly validates that the input is actually consistent.",,20,Implementation,
1289,Improper Validation of Unsafe Equivalence in Input,"The product receives an input value that is used as a resource identifier or other type of reference, but it does not validate or incorrectly validates that the input is equivalent to a potentially-unsafe value.",,20,Implementation,
129,Improper Validation of Array Index,"The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.",100,1285;20,Implementation,"Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).;;;;;;Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;"
1290,Incorrect Decoding of Security Identifiers ,"The product implements a decoding mechanism to decode certain bus-transaction signals to security identifiers. If the decoding is implemented incorrectly, then untrusted agents can now gain unauthorized access to the asset.",,284;1294,Implementation;Architecture and Design,Security identifier decoders must be reviewed for design consistency and common weaknesses.;Access and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness.
1291,Public Key Re-Use for Signing both Debug and Production Code,The same public key is used for signing both debug and production code.,,693,Implementation,Use different keys for Production and Debug
1292,Incorrect Conversion of Security Identifiers,"The product implements a conversion mechanism to map certain bus-transaction signals to security identifiers. However, if the conversion is incorrectly implemented, untrusted agents can gain unauthorized access to the asset.",,284;1294,Architecture and Design;Implementation,Security identifier decoders must be reviewed for design inconsistency and common weaknesses.;Access and programming flows must be tested in pre-silicon and post-silicon testing.
1293,Missing Source Correlation of Multiple Independent Data,"The product relies on one source of data, preventing the ability to detect if an adversary has compromised a data source.",,345,Architecture and Design;Implementation;Operation,"Design system to use a Practical Byzantine fault method, to request information from multiple sources to verify the data and report on potentially compromised information sources.;Failure to use a Practical Byzantine fault method when requesting data. Lack of place to report potentially compromised information sources. Relying on non-independent information sources for integrity checking. Failure to report information sources that respond in the minority to incident response procedures."
1294,Insecure Security Identifier Mechanism,"The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented.",121;681,284,Architecture and Design;Implementation,Security Identifier Decoders must be reviewed for design inconsistency and common weaknesses.;Access and programming flows must be tested in pre-silicon and post-silicon testing.
1295,Debug Messages Revealing Unnecessary Information,The product fails to adequately prevent the revealing of unnecessary and potentially sensitive system information within debugging messages.,121,200,Implementation,Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response.
1296,Incorrect Chaining or Granularity of Debug Components,The product's debug components contain incorrect chaining or granularity of debug components.,121;702,284,Implementation,Ensure that debug components are properly chained and their granularity is maintained at different authentication levels.
1297,Unprotected Confidential Information on Device is Accessible by OSAT Vendors,The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors.,1;180,285,Implementation,
1298,Hardware Logic Contains Race Conditions,A race condition in the hardware logic results in undermining security guarantees of the system.,26,362,Architecture and Design;Implementation,"Adopting design practices that encourage designers to recognize and eliminate race conditions, such as Karnaugh maps, could result in the decrease in occurrences of race conditions.;Logic redundancy can be implemented along security critical paths to prevent race conditions. To avoid metastability, it is a good practice in general to default to a secure state in which access is not given to untrusted agents."
1299,Missing Protection Mechanism for Alternate Hardware Interface,"The lack of protections on alternate paths to access
                control-protected assets (such as unprotected shadow registers
                and other external facing unguarded interfaces) allows an
                attacker to bypass existing protections to the asset that are
		only performed against the primary path.",457;554,420;288,Architecture and Design;Implementation,Protect assets from accesses against all potential interfaces and alternate paths.;Protect assets from accesses against all potential interfaces and alternate paths.;Protect assets from accesses against all potential interfaces and alternate paths.
13,ASP.NET Misconfiguration: Password in Configuration File,Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.,,260,Architecture and Design;Implementation,"Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files."
130,Improper Handling of Length Parameter Inconsistency,"The product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.",47,240;119;119,Implementation,"When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.;Do not let the user control the size of the buffer.;Validate that the length of the user-supplied data is consistent with the buffer size."
1300,Improper Protection of Physical Side Channels,"The device does not contain sufficient protection
	mechanisms to prevent physical side channels from exposing
	sensitive information due to patterns in physically observable
	phenomena such as variations in power consumption,
	electromagnetic emissions (EME), or acoustic emissions.",189;699,203;203,Implementation,Apply blinding or masking techniques to implementations of cryptographic algorithms.;Add shielding or tamper-resistant protections to the device to increase the difficulty of obtaining measurements of the side-channel.
1301,Insufficient or Incomplete Data Removal within Hardware Component,The product's data removal process does not completely delete all data and potentially sensitive information within hardware components.,37,226,Implementation,"Apply blinding or masking techniques to implementations of cryptographic algorithms.;Alter the method of erasure, add protection of media, or destroy the media to protect the data."
1302,Missing Source Identifier in Entity Transactions on a System-On-Chip (SOC),The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier.,121;681,1294,Architecture and Design;Implementation,Transaction details must be reviewed for design inconsistency and common weaknesses.;Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing.
1303,Non-Transparent Sharing of Microarchitectural Resources,"Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts.",663,1189;203,Architecture and Design;Implementation,"Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.;Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers."
1304,Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation,"The product performs a power save/restore
            operation, but it does not ensure that the integrity of
            the configuration state is maintained and/or verified between
	    the beginning and ending of the operation.",176,284,Architecture and Design;Integration,"Inside the IP, incorporate integrity checking
                        on the configuration state via a cryptographic
                        hash. The hash can be protected inside the IP such as
                        by storing it in internal registers which never lose
                        power. Before powering down, the IP performs a hash of
                        the configuration and saves it in these persistent
                        registers. Upon restore, the IP performs a hash of the
                        saved configuration and compares it with the
                        saved hash. If they do not match, then the IP should
                        not trust the configuration.;Outside the IP, incorporate integrity checking
                        of the configuration state via a trusted agent. Before
                        powering down, the trusted agent performs a hash of the
                        configuration and saves the hash in persistent storage.
                        Upon restore, the IP requests the trusted agent
                        validate its current configuration. If the
                        configuration hash is invalid, then the IP should not
                        trust the configuration.;Outside the IP, incorporate a protected
                        environment that prevents undetected modification of
                        the configuration state by untrusted agents. Before
                        powering down, a trusted agent saves the IP's
                        configuration state in this protected location that
                        only it is privileged to. Upon restore, the trusted
                        agent loads the saved state into the IP."
131,Incorrect Calculation of Buffer Size,"The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.",100;47,682;682;682;682,Implementation,"When allocating a buffer for the purpose of transforming, converting, or encoding an input, allocate enough memory to handle the largest possible encoding. For example, in a routine that converts ""&"" characters to ""&amp;"" for HTML entity encoding, the output buffer needs to be at least 5 times as large as the input buffer.;;Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;When processing structured incoming data containing a size field followed by raw data, identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130).;When allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel in your calculation of the total amount of memory that must be allocated.;Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.;Use sizeof() on the appropriate data type to avoid CWE-467.;Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity. This will simplify validation and will reduce surprises related to unexpected casting.;;;;;Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;"
1310,Missing Ability to Patch ROM Code,Missing an ability to patch ROM code may leave a System or System-on-Chip (SoC) in a vulnerable state.,682,1329,Architecture and Design;Implementation;Integration;Manufacturing,"Secure patch support to allow ROM code to be patched on the next boot.;Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM."
1311,Improper Translation of Security Attributes by Fabric Bridge,The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.,1;180;233,284,Architecture and Design;Implementation,The translation must map signals in such a way that untrusted agents cannot map to trusted agents or vice-versa.;Ensure that the translation maps signals in such a way that untrusted agents cannot map to trusted agents or vice-versa.
1312,Missing Protection for Mirrored Regions in On-Chip Fabric Firewall,"The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions.",456;679,284,Architecture and Design;Implementation,The fabric firewall should apply the same protections as the original region to the mirrored regions.;The fabric firewall should apply the same protections as the original region to the mirrored regions.
1313,Hardware Allows Activation of Test or Debug Logic at Runtime,"During runtime, the hardware allows for test or debug logic (feature) to be activated, which allows for changing the state of the hardware. This feature can alter the intended behavior of the system and allow for alteration and leakage of sensitive data by an adversary.",121,284,Architecture and Design;Implementation;Integration,"Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.;Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.;Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations."
1314,Missing Write Protection for Parametric Data Values,"The device does not write-protect the parametric data values for sensors that scale the sensor value, allowing untrusted software to manipulate the apparent result and potentially damage hardware or cause operational failure.",1,862,Architecture and Design;Implementation,Access controls for sensor blocks should ensure that only trusted software is allowed to change threshold limits and sensor parametric data.
1315,Improper Setting of Bus Controlling Capability in Fabric End-point,The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric.,1;180,284,Architecture and Design;Implementation;System Configuration,"For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.;For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.;For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability."
1316,Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges,"The address map of the on-chip fabric has protected and unprotected regions overlapping, allowing an attacker to bypass access control to the overlapping portion of the protected region.",456;679,284,Architecture and Design;Implementation,"When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap.;Ranges configured by firmware should not overlap. If overlaps are mandatory because of constraints such as a limited number of registers, then ensure that no assets are present in the overlapped portion.;Validate mitigation actions with robust testing."
1317,Improper Access Control in Fabric Bridge,"The product uses a fabric bridge for transactions between two Intellectual Property (IP) blocks, but the bridge does not properly perform the expected privilege, identity, or other access control checks between those IP blocks.",122,284,Architecture and Design;Implementation,Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.;Implement access-control checks in the bridge for both upstream and downstream transactions.
1318,Missing Support for Security Features in On-chip Fabrics or Buses," On-chip fabrics or buses either do not support or are not configured to support privilege separation or other security features, such as access control. ",1;180,693,Architecture and Design;Implementation,"If fabric does not support security features, implement security checks in a bridge or any component that is between the master and the fabric.  Alternatively, connect all fabric slaves that do not have any security assets under one such fabric and connect peripherals with security assets to a different fabric that supports security features."
1319,Improper Protection against Electromagnetic Fault Injection (EM-FI),"The device is susceptible to electromagnetic fault injection attacks, causing device internal information to be compromised or security mechanisms to be bypassed.",624;625,693,Architecture and Design;Implementation,
132,DEPRECATED: Miscalculated Null Termination,This entry has been deprecated because it was a duplicate of CWE-170. All content has been transferred to CWE-170.,,,,
1320,Improper Protection for Outbound Error Messages and Alert Signals,"Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts.
			",1;180,284,Architecture and Design;Implementation,Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.
1321,Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'),"The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.",1;180;77,915;913,Architecture and Design;Implementation,"By freezing the object prototype first (for example, Object.freeze(Object.prototype)), modification of the prototype becomes impossible.;By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.;When handling untrusted objects, validating using a schema can be used.;By using an object without prototypes (via Object.create(null) ), adding object prototype attributes by accessing the prototype via the special attributes becomes impossible, mitigating this weakness.;Map can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it."
1322,"Use of Blocking Code in Single-threaded, Non-blocking Context","The product uses a non-blocking model that relies on a single threaded process
			for features such as scalability, but it contains code that can block when it is invoked.",25,834,Implementation,"Generally speaking, blocking calls should be
					replaced with non-blocking alternatives that can be used asynchronously.
					Expensive computations should be passed off to worker threads, although
					the correct approach depends on the framework being used.;For expensive computations, consider breaking them up into
					multiple smaller computations. Refer to the documentation of the
					framework being used for guidance."
1323,Improper Management of Sensitive Trace Data,"Trace data collected from several sources on the
                System-on-Chip (SoC) is stored in unprotected locations or
                transported to untrusted agents.",150;167;545,284,Architecture and Design;Implementation,"Tag traces to indicate owner and debugging privilege level (designer, OEM, or end user) needed to access that trace."
1324,DEPRECATED: Sensitive Information Accessible by Physical Probing of JTAG Interface,This entry has been deprecated because it was at a lower level of abstraction than supported by CWE. All relevant content has been integrated into CWE-319.,,,,
1325,Improperly Controlled Sequential Memory Allocation,"The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.",130,770,Implementation,"Ensure multiple allocations of the same kind of object are properly tracked - possibly across multiple sessions, requests, or messages. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary.;Run the program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized."
1326,Missing Immutable Root of Trust in Hardware,A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code.,679;68,693,Architecture and Design;Implementation,"When architecting the system, the RoT should be designated for storage in a memory that does not allow further programming/writes.;During implementation and test, the RoT memory location should be demonstrated to not allow further programming/writes."
1327,Binding to an Unrestricted IP Address,"The product assigns the address 0.0.0.0 for a database server, a cloud service/instance, or any computing resource that communicates remotely.",1,668,System Configuration,Assign IP addresses that are not 0.0.0.0.;Unwanted connections to the configured server may be denied through a firewall or other packet filtering measures.
1328,Security Version Number Mutable to Older Versions,"Security-version number in hardware is mutable, resulting in the ability to downgrade (roll-back) the boot firmware to vulnerable code versions.",176,285,Architecture and Design;Implementation,"When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.;During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated."
1329,Reliance on Component That is Not Updateable,The product contains a component that cannot be updated or patched in order to remove vulnerabilities or significant bugs.,,1357;664,Requirements;Architecture and Design;Architecture and Design;Implementation,"Specify requirements that each component should be updateable, including ROM, firmware, etc.;Design the product to allow for updating of its components. Include the external infrastructure that might be necessary to support updates, such as distribution servers.;With hardware, support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.;Implement the necessary functionality to allow each component to be updated."
1330,Remanent Data Readable after Memory Erase,Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.,150;37;545,1301;1301,Architecture and Design;Implementation,
1331,Improper Isolation of Shared Resources in Network On Chip (NoC),"The Network On Chip (NoC) does not isolate or incorrectly isolates its on-chip-fabric and internal resources such that they are shared between trusted and untrusted agents, creating timing channels.",124,653;668,Architecture and Design;Implementation,Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.
1332,Improper Handling of Faults that Lead to Instruction Skips,The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.,624;625,1384,Architecture and Design;Implementation,"Design strategies for ensuring safe failure if
                        inputs, such as Vcc, are modified out of acceptable
                        ranges.;Design strategies for ensuring safe behavior if
                        instructions attempt to be skipped.;Identify mission critical secrets that should
                          be wiped if faulting is detected, and design a
                          mechanism to do the deletion.;Add redundancy by performing an operation
                          multiple times, either in space or time, and perform
                          majority voting. Additionally, make conditional
                          instruction timing unpredictable.;Use redundant operations or canaries to
                          detect and respond to faults.;Ensure that fault mitigations are strong enough
                        in practice. For example, a low power detection
                        mechanism that takes 50 clock cycles to trigger at lower
                        voltages may be an insufficient security mechanism if
                        the instruction counter has already progressed with no
                        other CPU activity occurring."
1333,Inefficient Regular Expression Complexity,"The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",492,407;407,Implementation,"Use regular expressions that do not support backtracking, e.g. by removing nested quantifiers.;Set backtracking limits in the configuration of the regular expression implementation, such as PHP's pcre.backtrack_limit. Also consider limits on execution time for the process.;Do not use regular expressions with untrusted input. If regular expressions must be used, avoid using backtracking in the expression.;Limit the length of the input that the regular expression will process."
1334,Unauthorized Error Injection Can Degrade Hardware Redundancy,An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode.,624;625,284,Architecture and Design;Implementation;Integration,Ensure the design does not allow error injection in modes intended for normal run-time operation. Provide access controls on interfaces for injecting errors.;Disallow error injection in modes which are expected to be used for normal run-time operation. Provide access controls on interfaces for injecting errors.;Add an access control layer atop any unprotected interfaces for injecting errors.
1335,Incorrect Bitwise Shift of Integer,An integer value is specified to be shifted by a negative amount or an amount greater than or equal to the number of bits contained in the value causing an unexpected or indeterminate result.,,682,Implementation,Implicitly or explicitly add checks and mitigation for negative or over-shift values.
1336,Improper Neutralization of Special Elements Used in a Template Engine,"The product uses a template engine to insert or process externally-influenced input, but it does not neutralize or incorrectly neutralizes special elements or syntax that can be interpreted as template expressions or other code directives when processed by the engine.",,94,Architecture and Design;Implementation,"Choose a template engine that offers a sandbox or restricted mode, or at least limits the power of any available expressions, function calls, or commands.;Use the template engine's sandbox or restricted mode, if available."
1338,Improper Protections Against Hardware Overheating,A hardware device is missing or has inadequate protection features to prevent overheating.,624;625,693,Architecture and Design;Implementation,Temperature maximum and minimum limits should be enforced using thermal sensors both in silicon and at the platform level.;The platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature.
1339,Insufficient Precision or Accuracy of a Real Number,"The product processes a real number with an implementation in which the number's representation does not preserve required accuracy and precision in its fractional part, causing an incorrect result.",,682,Implementation,"The developer or maintainer can move to a more accurate representation of real numbers.  In extreme cases, the programmer can move to representations such as ratios of BigInts which can represent real numbers to extremely fine precision. The programmer can also use the concept of an Unum real. The memory and CPU tradeoffs of this change must be examined. Since floating point reals are used in many products and many locations, they are implemented in hardware and most format changes will cause the calculations to be moved into software resulting in slower products."
134,Use of Externally-Controlled Format String,"The product uses a function that accepts a format string as an argument, but the format string originates from an external source.",135;67,668;668;20,Implementation;Implementation,"Choose a language that is not subject to this flaw.;Ensure that all format string functions are passed a static string which cannot be controlled by the user, and that the proper number of arguments are always sent to that function as well. If at all possible, use functions that do not support the %n operator in format strings. [REF-116] [REF-117];Run compilers and linkers with high warning levels, since they may detect incorrect usage."
1341,Multiple Releases of Same Resource or Handle,"The product attempts to close or release a resource or handle more than once, without any successful open between the close operations.",,675,Implementation,"Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.;It can be effective to implement a flag that is (1) set when the resource is opened, (2) cleared when it is closed, and (3) checked before closing. This approach can be useful when there are disparate cases in which closes must be performed. However, flag-tracking can increase code complexity and requires diligent compliance by the programmer.;When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data."
1342,Information Exposure through Microarchitectural State after Transient Execution,"The processor does not properly clear microarchitectural state after incorrect microcode assists or speculative execution, resulting in transient execution.",696,226;226,Architecture and Design;Requirements,"Hardware ensures that no illegal data flows from faulting micro-ops exists at the microarchitectural level.;Include instructions that explicitly remove traces of unneeded computations from software interactions with microarchitectural elements e.g. lfence, sfence, mfence, clflush."
135,Incorrect Calculation of Multi-Byte String Length,The product does not correctly calculate the length of strings that can contain wide or multi-byte characters.,,682,Implementation,"Always verify the length of the string unit character.;Use length computing functions (e.g. strlen, wcslen, etc.) appropriately with their equivalent type (e.g.: byte, wchar_t, etc.)"
1351,Improper Handling of Hardware Behavior in Exceptionally Cold Environments,"A hardware device, or the firmware running on it, is
                missing or has incorrect protection features to maintain
                goals of security primitives when the device is cooled below
                standard operating temperatures.",624;625,1384,Architecture and Design;Implementation,The system should account for security primitive behavior when cooled outside standard temperatures.
1357,Reliance on Insufficiently Trustworthy Component,"The product is built from multiple separate components, but it uses a component that is not sufficiently trusted to meet expectations for security, reliability, updateability, and maintainability.",,710,Requirements;Architecture and Design,"For each component, ensure that its supply chain is well-controlled with sub-tier suppliers using best practices. For third-party software components such as libraries, ensure that they are developed and actively maintained by reputable vendors.;Maintain a Bill of Materials for all components and sub-components of the product. For software, maintain a Software Bill of Materials (SBOM). According to [REF-1247], ""An SBOM is a formal, machine-readable inventory of software components and dependencies, information about those components, and their hierarchical relationships."";Continue to monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, supplier practices that affect trustworthiness, etc."
138,Improper Neutralization of Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",105;15;34,707,Implementation,"Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their product. One defense is to create an allowlist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the allowlist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating.;;Use and specify an appropriate output encoding to ensure that the special elements are well-defined. A normal byte sequence in one encoding could be a special element in another.;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88)."
1384,Improper Handling of Physical or Environmental Conditions,The product does not properly handle unexpected physical or environmental conditions that occur naturally or are artificially induced.,,703,Architecture and Design;Manufacturing,"In requirements, be specific about expectations for how the product will perform when it exceeds physical and environmental boundary conditions, e.g., by shutting down.;Where possible, include independent components that can detect excess environmental conditions and have the capability to shut down the product.;Where possible, use shielding or other materials that can increase the adversary's workload and reduce the likelihood of being able to successfully trigger a security-related failure."
1385,Missing Origin Validation in WebSockets,"The product uses a WebSocket, but it does not properly verify that the source of data or communication is valid.",,346,Architecture and Design;Implementation,"Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake.;Use a randomized CSRF token to verify requests.;Use TLS to securely communicate using 'wss' (WebSocket Secure) instead of 'ws'.;Require user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function.;Leverage rate limiting to prevent against DoS. Use of the leaky bucket algorithm can help with this.;Use a library that provides restriction of the payload size. For example, WS library for Node includes 'maxPayloadoption' that can be set.;Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc."
1386,Insecure Operation on Windows Junction / Mount Point,"The product opens a file or directory, but it does not properly prevent the name from being associated with a junction or mount point to a destination that is outside of the intended control sphere.",,59,Implementation,"When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points.  One way to do this in Windows is to use the functionality embedded in the following command: ""dir /al /s /b"" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced."
1389,Incorrect Parsing of Numbers with Different Radices,"The product parses numeric input assuming base 10 (decimal) values, but it does not account for inputs that use a different base number (radix).",,704,Implementation;Implementation,"If only decimal-based values are expected in the application, conditional checks should be created in a way that prevent octal or hexadecimal strings from being checked. This can be achieved by converting any numerical string to an explicit base-10 integer prior to the conditional check, to prevent octal or hex values from ever being checked against the condition.;If various numerical bases do need to be supported, check for leading values indicating the non-decimal base you wish to support (such as 0x for hex) and convert the numeric strings to integers of the respective base. Reject any other alternative-base string that is not intentionally supported by the application.;If regular expressions are used to validate IP addresses, ensure that they are bounded using ^ and $ to prevent base-prepended IP addresses from being matched."
1390,Weak Authentication,"The product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct.",,287,Architecture and Design;Implementation,
1391,Use of Weak Credentials,"The product uses weak credentials (such as a default key or hard-coded password) that can be calculated, derived, reused, or guessed by an attacker.",,1390,Requirements;Architecture and Design;Installation;Operation,
1392,Use of Default Credentials,The product uses default credentials (such as passwords or cryptographic keys) for potentially critical functionality.,,1391,Architecture and Design,"Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.;Force the administrator to change the credential upon installation.;The product administrator could change the defaults upon installation or during operation."
1393,Use of Default Password,The product uses default passwords for potentially critical functionality.,,1392,Architecture and Design,"Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.;Ensure that product documentation clearly emphasizes the presence of default passwords and provides steps for the administrator to change them.;Force the administrator to change the credential upon installation.;The product administrator could change the defaults upon installation or during operation."
1394,Use of Default Cryptographic Key,The product uses a default cryptographic key for potentially critical functionality.,,1392,Architecture and Design,"Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.;Force the administrator to change the credential upon installation.;The product administrator could change the defaults upon installation or during operation."
1395,Dependency on Vulnerable Third-Party Component,The product has a dependency on a third-party component that contains one or more known vulnerabilities.,,657,Architecture and Design;Implementation;Patching and Maintenance,"In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.;Require a Bill of Materials for all components and sub-components of the product. For software, require a Software Bill of Materials (SBOM) [REF-1247] [REF-1311].;Maintain a Bill of Materials for all components and sub-components of the product. For software, maintain a Software Bill of Materials (SBOM). According to [REF-1247], ""An SBOM is a formal, machine-readable inventory of software components and dependencies, information about those components, and their hierarchical relationships."";Actively monitor when a third-party component vendor announces vulnerability patches; fix the third-party component as soon as possible; and make it easy for operators/customers to obtain and apply the patch.;Continuously monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, etc."
14,Compiler Removal of Code to Clear Buffers,"Sensitive memory is cleared according to the source code, but compiler optimizations leave the memory untouched when it is not read from again, aka ""dead store removal.""",,733,Implementation;Build and Compilation,"Store the sensitive data in a ""volatile"" memory location if available.;If possible, configure your compiler so that it does not remove dead stores.;Where possible, encrypt sensitive data that are used by a software system."
140,Improper Neutralization of Delimiters,The product does not neutralize or incorrectly neutralizes delimiters.,15,138,Implementation,"Developers should anticipate that delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
141,Improper Neutralization of Parameter/Argument Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component.",,140,Implementation,"Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
1419,Incorrect Initialization of Resource,"The product attempts to initialize a resource but does not correctly do so, which might leave the resource in an unexpected, incorrect, or insecure state when it is accessed.",,665,Implementation;Manufacturing;Installation;System Configuration;Operation,"Choose the safest-possible initialization for security-related resources.;Ensure that each resource (whether variable, memory buffer, register, etc.) is fully initialized.;Pay close attention to complex conditionals or reset sources   that affect initialization, since some paths might not perform the initialization.;Ensure that the design and architecture clearly identify what the initialization should be, and that the initialization does not have security implications."
142,Improper Neutralization of Value Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component.",,140,Implementation,"Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
1420,Exposure of Sensitive Information during Transient Execution,"A processor event or prediction may allow incorrect operations (or correct operations with incorrect data) to execute transiently, potentially exposing data over a covert channel.",,669,Architecture and Design;Implementation,The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.
1421,Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution,"
			A processor event may allow transient operations to access
			architecturally restricted data (for example, in another address
			space) in a shared microarchitectural structure (for example, a CPU
			cache), potentially exposing the data over a covert channel.
		  ",,1420;1420,Architecture and Design;Implementation;System Configuration;Architecture and Design,
1422,Exposure of Sensitive Information caused by Incorrect Data Forwarding during Transient Execution,"A processor event or prediction may allow incorrect or stale data to
		  be forwarded to transient operations, potentially exposing data over a
		  covert channel.",,1420;1420,Architecture and Design,
1423,Exposure of Sensitive Information caused by Shared Microarchitectural Predictor State that Influences Transient Execution,"Shared microarchitectural predictor state may allow code to influence
				transient execution across a hardware boundary, potentially exposing
				data that is accessible beyond the boundary over a covert channel.
			",,1420;1420,Architecture and Design;Implementation;System Configuration,
143,Improper Neutralization of Record Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as record delimiters when they are sent to a downstream component.",,140,Implementation,"Developers should anticipate that record delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
144,Improper Neutralization of Line Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component.",,140,Implementation,"Developers should anticipate that line delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
145,Improper Neutralization of Section Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component.",,140,Implementation,"Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
146,Improper Neutralization of Expression/Command Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.",15;6,140,Implementation,"Developers should anticipate that inter-expression and inter-command delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
147,Improper Neutralization of Input Terminators,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component.",460,138,Implementation,"Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
148,Improper Neutralization of Input Leaders,"The product does not properly handle when a leading character or sequence (""leader"") is missing or malformed, or if multiple leaders are used when only one should be allowed.",,138,Implementation,"Developers should anticipate that leading characters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
149,Improper Neutralization of Quoting Syntax,"Quotes injected into a product can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.",468,138,Implementation,"Developers should anticipate that quotes will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
15,External Control of System or Configuration Setting,One or more system settings or configuration elements can be externally controlled by a user.,13;146;176;203;270;271;579;69;76;77,642;610;20,Implementation;Implementation,";Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.;In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker."
150,"Improper Neutralization of Escape, Meta, or Control Sequences","The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.",134;41;81;93,138,Implementation,"Developers should anticipate that escape, meta and control characters/sequences will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
151,Improper Neutralization of Comment Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as comment delimiters when they are sent to a downstream component.",,138,Implementation,"Developers should anticipate that comments will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
152,Improper Neutralization of Macro Symbols,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component.",,138,Implementation,"Developers should anticipate that macro symbols will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
153,Improper Neutralization of Substitution Characters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component.",,138,Implementation,"Developers should anticipate that substitution characters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
154,Improper Neutralization of Variable Name Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component.",15,138,Implementation,"Developers should anticipate that variable name delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
155,Improper Neutralization of Wildcards or Matching Symbols,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component.",,138,Implementation,"Developers should anticipate that wildcard or matching elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
156,Improper Neutralization of Whitespace,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component.",,138,Implementation,"Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
157,Failure to Sanitize Paired Delimiters,"The product does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces.",15,138,Implementation,"Developers should anticipate that grouping elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
158,Improper Neutralization of Null Byte or NUL Character,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.",52;53,138,Implementation,"Developers should anticipate that null characters or null bytes will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
159,Improper Handling of Invalid Use of Special Elements,"The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity.",,138,Implementation,"Developers should anticipate that special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
160,Improper Neutralization of Leading Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",,138,Implementation,"Developers should anticipate that leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
161,Improper Neutralization of Multiple Leading Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",,160,Implementation,"Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
162,Improper Neutralization of Trailing Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",635,138,Implementation,"Developers should anticipate that trailing special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
163,Improper Neutralization of Multiple Trailing Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",,162,Implementation,"Developers should anticipate that multiple trailing special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
164,Improper Neutralization of Internal Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",,138,Implementation,"Developers should anticipate that internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
165,Improper Neutralization of Multiple Internal Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",,164,Implementation,"Developers should anticipate that multiple internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
166,Improper Handling of Missing Special Element,"The product receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.",,159;228,Implementation,"Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
167,Improper Handling of Additional Special Element,"The product receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided.",,159;228,Implementation,"Developers should anticipate that extra special elements will be injected in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
168,Improper Handling of Inconsistent Special Elements,The product does not properly handle input in which an inconsistency exists between two or more special characters or reserved words.,,159;228,Implementation,"Developers should anticipate that inconsistent special elements will be injected/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.;;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
170,Improper Null Termination,The product does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator.,,707;20,Implementation,"Use a language that is not susceptible to these issues. However, be careful of null byte interaction errors (CWE-626) with lower-level constructs that may be written in a language that is susceptible.;Ensure that all string functions used are understood fully as to how they append null characters. Also, be wary of off-by-one errors when appending nulls to the end of strings.;If performance constraints permit, special code can be added that validates null-termination of string buffers, this is a rather naive and error-prone solution.;Switch to bounded string manipulation functions. Inspect buffer lengths involved in the buffer overrun trace reported with the defect.;Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer)."
172,Encoding Error,"The product does not properly encode or decode the data, resulting in unexpected values.",120;267;3;52;53;64;71;72;78;80,707,Implementation,";While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
173,Improper Handling of Alternate Encoding,The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.,120;267;3;4;52;53;64;71;72;78;79;80,172,Implementation,"Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.;;Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
174,Double Decoding of the Same Data,"The product decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations.",,172;675,Implementation,"Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.;;Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
175,Improper Handling of Mixed Encoding,The product does not properly handle when the same input uses several different (mixed) encodings.,,172,Implementation,"Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.;;Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
176,Improper Handling of Unicode Encoding,The product does not properly handle when an input contains Unicode encoding.,71,172,Implementation,Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.;;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
177,Improper Handling of URL Encoding (Hex Encoding),The product does not properly handle when all or part of an input has been URL encoded.,120;468;64;72,172,Implementation,Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.;;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
178,Improper Handling of Case Sensitivity,"The product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.",,706;706,Implementation,Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.;;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
179,Incorrect Behavior Order: Early Validation,"The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.",3;43;71,20;696,Implementation,Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
180,Incorrect Behavior Order: Validate Before Canonicalize,"The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.",267;3;71;78;79;80,179,Implementation,Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
181,Incorrect Behavior Order: Validate Before Filter,"The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.",120;267;3;43;78;79;80,179,Implementation,Inputs should be decoded and canonicalized to the application's current internal representation before being filtered.
182,Collapse of Data into Unsafe Value,"The product filters data in a way that causes it to be reduced or ""collapsed"" into an unsafe value that violates an expected security property.",,693,Implementation,Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.;;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.;Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).
183,Permissive List of Allowed Inputs,"The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.",120;3;43;71,697,Implementation,
184,Incomplete List of Disallowed Inputs,"The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.",120;15;182;3;43;6;71;73;85,693;1023,Implementation;Architecture and Design,"Do not rely exclusively on detecting disallowed inputs.  There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants.  Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify ""good"" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs."
185,Incorrect Regular Expression,The product specifies a regular expression in a way that causes data to be improperly matched or compared.,15;6;79,697,Implementation,"Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject the regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor the regular expression."
186,Overly Restrictive Regular Expression,"A regular expression is overly restrictive, which prevents dangerous values from being detected.",,185,Implementation,"Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject your regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor your regular expression."
187,Partial String Comparison,"The product performs a comparison that only examines a portion of a factor before determining whether there is a match, such as a substring, leading to resultant weaknesses.",,1023,Implementation,Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.
188,Reliance on Data/Memory Layout,"The product makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior.",,1105;435,Implementation,"In flat address space situations, never allow computing memory addresses as offsets from another memory address.;Fully specify protocol layout unambiguously, providing a structured grammar (e.g., a compilable yacc grammar).;Testing: Test that the implementation properly handles each case in the protocol grammar."
190,Integer Overflow or Wraparound,"The product performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.",92,682;682;20,Implementation,"Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.;;;;;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system."
191,Integer Underflow (Wrap or Wraparound),"The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.",,682;682,Implementation,
192,Integer Coercion Error,"Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types.",,681,Implementation,A language which throws exceptions on ambiguous data casts might be chosen.;Design objects and program flow such that multiple or complex casts are unnecessary;Ensure that any data type casting that you must used is entirely understood in order to reduce the plausibility of error in use.
193,Off-by-one Error,"A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.",,682;682,Implementation,"When copying character arrays or using character manipulation methods, the correct size parameter must be used to account for the null terminator that needs to be added at the end of the array. Some examples of functions susceptible to this weakness in C include strcpy(), strncpy(), strcat(), strncat(), printf(), sprintf(), scanf() and sscanf()."
194,Unexpected Sign Extension,"The product performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses.",,681;681;681,Implementation,"Avoid using signed variables if you don't need to represent negative values. When negative values are needed, perform validation after you save those values to larger data types, or before passing them to functions that are expecting unsigned values."
195,Signed to Unsigned Conversion Error,"The product uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive.",,681;681;681,Implementation,
196,Unsigned to Signed Conversion Error,"The product uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.",92,681;681;681,Implementation,"Choose a language which is not subject to these casting flaws.;Design object accessor functions to implicitly check values for valid sizes. Ensure that all functions which will be used as a size are checked previous to use as a size. If the language permits, throw exceptions rather than using in-band errors.;Error check the return values of all functions. Be aware of implicit casts made, and use unsigned variables for sizes if at all possible."
197,Numeric Truncation Error,Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.,,681;681;681,Implementation,"Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive."
198,Use of Incorrect Byte Ordering,"The product receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used.",,188,Implementation,
20,Improper Input Validation,"The product receives input or data, but it does
        not validate or incorrectly validates that the input has the
        properties that are required to process the data safely and
        correctly.",10;101;104;108;109;110;120;13;135;136;14;153;182;209;22;23;230;231;24;250;261;267;28;3;31;42;43;45;46;47;473;52;53;588;63;64;664;67;7;71;72;73;78;79;8;80;81;83;85;88;9,707,Architecture and Design;Implementation,"Consider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build ""recognizers"" for that language.  This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111];Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).;Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.;;;When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.;Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.;Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.;;When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so."
200,Exposure of Sensitive Information to an Unauthorized Actor,The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.,116;13;169;22;224;285;287;290;291;292;293;294;295;296;297;298;299;300;301;302;303;304;305;306;307;308;309;310;312;313;317;318;319;320;321;322;323;324;325;326;327;328;329;330;472;497;508;573;574;575;576;577;59;60;616;643;646;651;79,668,Architecture and Design;Implementation,
201,Insertion of Sensitive Information Into Sent Data,"The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.",12;217;612;613;618;619;621;622;623,200,Architecture and Design;Implementation,Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.;Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.;Setup default error messages so that unexpected errors do not disclose sensitive information.;
202,Exposure of Sensitive Information Through Data Queries,"When trying to keep information confidential, an attacker can often infer some of the information by using statistics.",,1230,Architecture and Design;Implementation,This is a complex topic. See the book Translucent Databases for a good discussion of best practices.
203,Observable Discrepancy,"The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.",189,200;200,Architecture and Design;Implementation,;
204,Observable Response Discrepancy,The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.,331;332;541;580,203,Architecture and Design;Implementation,;
205,Observable Behavioral Discrepancy,"The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.",541;580,203,Architecture and Design;Implementation,
206,Observable Internal Behavioral Discrepancy,"The product performs multiple behaviors that are combined to produce a single result, but the individual behaviors are observable separately in a way that allows attackers to reveal internal state or internal decision points.",,205,Architecture and Design;Implementation,"Setup generic response pages for error conditions. The error page should not disclose information about the success or failure of a sensitive operation. For instance, the login page should not confirm that the login is correct and the password incorrect. The attacker who tries random account name may be able to guess some of them. Confirming that the account exists would make the login page more susceptible to brute force attack."
207,Observable Behavioral Discrepancy With Equivalent Products,"The product operates in an environment in which its existence or specific identity should not be known, but it behaves differently than other products with equivalent functionality, in a way that is observable to an attacker.",,205,Architecture and Design;Implementation,
208,Observable Timing Discrepancy,"Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.",462;541;580,203,Architecture and Design;Implementation;Operation,
209,Generation of Error Message Containing Sensitive Information,"The product generates an error message that includes sensitive information about its environment, users, or associated data.",215;463;54;7,200;200;755,Architecture and Design;Implementation;System Configuration;Operation,";Handle exceptions internally and do not display errors containing potentially sensitive information to a user.;Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.;Debugging information should not make its way into a production release.;Debugging information should not make its way into a production release.;Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.;Create default error pages or messages that do not leak any information."
210,Self-generated Error Message Containing Sensitive Information,The product identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.,,209,Architecture and Design;Implementation,Debugging information should not make its way into a production release.;Debugging information should not make its way into a production release.
211,Externally-Generated Error Message Containing Sensitive Information,"The product performs an operation that triggers an external diagnostic or error message that is not directly generated or controlled by the product, such as an error generated by the programming language interpreter that a software application uses. The error can contain sensitive system information.",,209,Architecture and Design;Implementation;Operation,"Configure the application's environment in a way that prevents errors from being generated. For example, in PHP, disable display_errors.;Debugging information should not make its way into a production release.;Debugging information should not make its way into a production release.;Handle exceptions internally and do not display errors containing potentially sensitive information to a user. Create default error pages if necessary.;The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions."
212,Improper Removal of Sensitive Information Before Storage or Transfer,"The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.",168,669;669,Architecture and Design;Implementation;Operation,"Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties.;;Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.;Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state."
213,Exposure of Sensitive Information Due to Incompatible Policies,"The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed.",,200,Policy;Requirements;Architecture and Design;Implementation,
214,Invocation of Process Using Visible Sensitive Information,"A process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.",,497,Architecture and Design;Implementation;Operation,
215,Insertion of Sensitive Information Into Debugging Code,"The product inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production.",,200,Implementation,Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.;
216,DEPRECATED: Containment Errors (Container Errors),"This entry has been deprecated, as it was not effective as a weakness and was structured more like a category. In addition, the name is inappropriate, since the ""container"" term is widely understood by developers in different ways than originally intended by PLOVER, the original source for this entry.",,,,
217,DEPRECATED: Failure to Protect Stored Data from Modification,This entry has been deprecated because it incorporated and confused multiple weaknesses. The issues formerly covered in this entry can be found at CWE-766 and CWE-767.,,,,
218,DEPRECATED: Failure to provide confidentiality for stored data,This weakness has been deprecated because it was a duplicate of CWE-493. All content has been transferred to CWE-493.,,,,
219,Storage of File with Sensitive Data Under Web Root,"The product stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.",,552,Operation;Implementation,Avoid storing information under the web root directory.;Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the web directory.
22,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),"The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",126;64;76;78;79,706;706;668,Implementation,";For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.;Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;;;;;When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."
220,Storage of File With Sensitive Data Under FTP Root,"The product stores sensitive data under the FTP server root with insufficient access control, which might make it accessible to untrusted parties.",,552,Operation;Architecture and Design,Avoid storing information under the FTP root directory.;Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory.
221,Information Loss or Omission,"The product does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis.",81,664,Architecture and Design;Implementation;Operation,
222,Truncation of Security-relevant Information,"The product truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack.",,221,Implementation;Operation,
223,Omission of Security-relevant Information,"The product does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.",,221,Architecture and Design;Implementation;Operation,
224,Obscured Security-relevant Information by Alternate Name,"The product records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.",,221,Implementation;Operation,
225,DEPRECATED: General Information Management Problems,This weakness can be found at CWE-199.,,,,
226,Sensitive Information in Resource Not Removed Before Reuse,"The product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or ""zeroize"" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.",37,459;212,Implementation,"During critical state transitions, information not needed in the next state should be removed or overwritten with fixed patterns (such as all 0's) or random data, before the transition to the next state.;When releasing, de-allocating, or deleting a resource, overwrite its data and relevant metadata with fixed patterns or random data. Be cautious about complex resource types whose underlying representation might be non-contiguous or change at a low level, such as how a file might be split into different chunks on a file system, even though ""logical"" file positions are contiguous at the application layer. Such resource types might require invocation of special modes or APIs to tell the underlying operating system to perform the necessary clearing, such as SDelete (Secure Delete) on Windows, although the appropriate functionality might not be available at the application layer."
228,Improper Handling of Syntactically Invalid Structure,The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification.,,703;707,Implementation,
229,Improper Handling of Values,"The product does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.",,228,Implementation,
23,Relative Path Traversal,"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as "".."" that can resolve to a location that is outside of that directory.",139;76,22;22;22,Implementation,;
230,Improper Handling of Missing Values,"The product does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null.",,229,Implementation,
231,Improper Handling of Extra Values,The product does not handle or incorrectly handles when more values are provided than expected.,,229,Implementation,
232,Improper Handling of Undefined Values,"The product does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name.",,229,Implementation,
233,Improper Handling of Parameters,"The product does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.",39,228,Implementation,
234,Failure to Handle Missing Parameter,"If too few arguments are sent to a function, the function will still pop the expected number of arguments from the stack. Potentially, a variable number of arguments could be exhausted in a function as well.",,233,Implementation,This issue can be simply combated with the use of proper build process.;Forward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function.
235,Improper Handling of Extra Parameters,"The product does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.",460,233,Implementation,
236,Improper Handling of Undefined Parameters,"The product does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product.",,233,Implementation,
237,Improper Handling of Structural Elements,The product does not handle or incorrectly handles inputs that are related to complex structures.,,228,,
238,Improper Handling of Incomplete Structural Elements,The product does not handle or incorrectly handles when a particular structural element is not completely specified.,,237,Implementation,
239,Failure to Handle Incomplete Element,The product does not properly handle when a particular element is not completely specified.,,237,Implementation,
24,Path Traversal: '../filedir',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""../"" sequences that can resolve to a location that is outside of that directory.",,23,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
240,Improper Handling of Inconsistent Structural Elements,"The product does not handle or incorrectly handles when two or more structural elements should be consistent, but are not.",,237;707,Implementation,
241,Improper Handling of Unexpected Data Type,"The product does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).",48,228,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
242,Use of Inherently Dangerous Function,The product calls a function that can never be guaranteed to work safely.,,1177,Implementation,Ban the use of dangerous functions. Use their safe equivalent.;Use grep or static analysis tools to spot usage of dangerous functions.
243,Creation of chroot Jail Without Changing Working Directory,"The product uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.",,573;669,Implementation,
244,Improper Clearing of Heap Memory Before Release ('Heap Inspection'),"Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory.",,226,Implementation,
245,J2EE Bad Practices: Direct Management of Connections,"The J2EE application directly manages connections, instead of using the container's connection management facilities.",,695,Implementation,
246,J2EE Bad Practices: Direct Use of Sockets,The J2EE application directly uses sockets instead of using framework method calls.,,695,Implementation,Use framework method calls instead of using sockets directly.
247,DEPRECATED: Reliance on DNS Lookups in a Security Decision,This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.,,,,
248,Uncaught Exception,"An exception is thrown from a function, but it is not caught.",,705;755;703;703,Implementation,
249,DEPRECATED: Often Misused: Path Manipulation,"This entry has been deprecated because of name
	confusion and an accidental combination of multiple
	weaknesses. Most of its content has been transferred to
	CWE-785.",,,,
25,Path Traversal: '/../filedir',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""/../"" sequences that can resolve to a location that is outside of that directory.",,23,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
250,Execution with Unnecessary Privileges,"The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.",104;470;69,269;657,Implementation;Installation;Architecture and Design;Operation,"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.;Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.;Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.;When dropping privileges, ensure that they have been dropped successfully to avoid CWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may fail even if it seems like they would always succeed.;If circumstances force you to run with extra privileges, then determine the minimum access level necessary. First identify the different permissions that the software and its users will need to perform their actions, such as file read and write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else [REF-76]. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. This mitigation is much more prone to error than dropping the privileges in the first place.;Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software."
252,Unchecked Return Value,"The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.",,754;754,Implementation,"Check the results of all functions that return a value and verify that the value is expected.;Ensure that you account for all possible return values from the function.;When designing a function, make sure you return a value or throw an exception in case of an error."
253,Incorrect Check of Function Return Value,"The product incorrectly checks a return value from a function, which prevents it from detecting errors or exceptional conditions.",,573;754,Implementation,Use a language or compiler that uses exceptions and requires the catching of those exceptions.;Properly check all functions which return a value.;When designing any function make sure you return a value or throw an exception in case of an error.
256,Plaintext Storage of a Password,Storing a password in plaintext may result in a system compromise.,,522,Architecture and Design;Architecture and Design,"Avoid storing passwords in easily accessible locations.;Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.;A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily."
257,Storing Passwords in a Recoverable Format,"The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.",49,522,Architecture and Design,"Use strong, non-reversible encryption to protect stored passwords."
258,Empty Password in Configuration File,Using an empty string as a password is insecure.,,260;521,Architecture and Design;Implementation;Operation,"Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use ""similar-looking"" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password."
259,Use of Hard-coded Password,"The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.",,798;798;798,Implementation;Architecture and Design,"For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.;For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a ""first login"" mode that requires the user to enter a unique strong password.;Perform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection.;;"
26,Path Traversal: '/dir/../filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""/dir/../filename"" sequences that can resolve to a location that is outside of that directory.",,23,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
260,Password in Configuration File,The product stores a password in a configuration file that might be accessible to actors who do not know the password.,,522,Architecture and Design;Implementation,Avoid storing passwords in easily accessible locations.;Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.
261,Weak Encoding for Password,Obscuring a password with a trivial encoding does not protect the password.,55,522,Architecture and Design,Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.
262,Not Using Password Aging,The product does not have a mechanism in place for managing password aging.,16;49;509;55;555;560;561;565;600;652;653;70,1390,Architecture and Design,"As part of a product's design, require users to change their passwords regularly and avoid reusing previous passwords.;Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294]."
263,Password Aging with Long Expiration,"The product supports password aging, but the expiration period is too long.",16;49;509;55;555;560;561;565;600;652;653;70,1390,Architecture and Design,"Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.;Ensure that the user is notified several times leading up to the password expiration.;Create mechanisms to prevent users from reusing passwords or creating similar passwords.;Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294]."
266,Incorrect Privilege Assignment,"A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.",,269,Implementation,"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."
267,Privilege Defined With Unsafe Actions,"A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.",58;634;637;643;648,269,Architecture and Design;Implementation;Operation,"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."
268,Privilege Chaining,"Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.",,269,Architecture and Design;Implementation;Operation,"Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.;Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."
269,Improper Privilege Management,"The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.",122;233;58,284,Architecture and Design;Implementation;Operation,"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.;Follow the principle of least privilege when assigning access rights to entities in a software system.;Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource."
27,Path Traversal: 'dir/../../filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize multiple internal ""../"" sequences that can resolve to a location that is outside of that directory.",,23,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
270,Privilege Context Switching Error,The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.,17;30;35,269,Architecture and Design;Implementation;Operation,"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource."
271,Privilege Dropping / Lowering Errors,The product does not drop privileges before passing control of a resource to an actor that does not have those privileges.,,269,Architecture and Design;Implementation;Operation,";Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.;Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource."
272,Least Privilege Violation,The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.,17;35;76,271,Implementation;Operation,"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.;Follow the principle of least privilege when assigning access rights to entities in a software system.;"
273,Improper Check for Dropped Privileges,The product attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded.,,754;754;271,Implementation,";Check the results of all functions that return a value and verify that the value is expected.;In Windows, make sure that the process token has the SeImpersonatePrivilege(Microsoft Server 2003). Code that relies on impersonation for security must ensure that the impersonation succeeded, i.e., that a proper privilege demotion happened."
274,Improper Handling of Insufficient Privileges,"The product does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.",,755;269,Implementation;Operation,
276,Incorrect Default Permissions,"During installation, installed file permissions are set to allow anyone to modify those files.",1;127;81,732;732,Architecture and Design;Implementation;Installation;Operation,The architecture needs to access and modification attributes for files to only those users who actually require those actions.;
277,Insecure Inherited Permissions,A product defines a set of insecure permissions that are inherited by objects that are created by the program.,,732,Architecture and Design;Implementation;Operation,"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.;"
278,Insecure Preserved Inherited Permissions,"A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement.",,732,Architecture and Design;Operation,"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.;"
279,Incorrect Execution-Assigned Permissions,"While it is executing, the product sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.",81,732,Implementation;Architecture and Design;Operation,"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.;"
28,Path Traversal: '..\filedir',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""..\"" sequences that can resolve to a location that is outside of that directory.",,23,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
280,Improper Handling of Insufficient Permissions or Privileges ,The product does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the product in an invalid state.,,755,Implementation,";Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures."
281,Improper Preservation of Permissions,"The product does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.",,732;732,Implementation;Operation,
282,Improper Ownership Management,"The product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.",17;35,284,Architecture and Design,"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."
283,Unverified Ownership,The product does not properly verify that a critical resource is owned by the proper entity.,,282,Architecture and Design,"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.;Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource."
284,Improper Access Control,The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.,19;441;478;479;502;503;536;546;550;551;552;556;558;562;563;564;578,,Architecture and Design;Implementation;Operation,"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.;"
285,Improper Authorization,The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.,1;104;127;13;17;39;402;45;5;51;59;60;647;668;76;77;87,284;284,Implementation;Architecture and Design;Operation,";Ensure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor.;;;Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a ""default deny"" policy when defining these ACLs."
286,Incorrect User Management,The product does not properly manage a user within its environment.,,284,Architecture and Design;Implementation;Operation,
287,Improper Authentication,"When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",114;115;151;194;22;57;593;633;650;94,284;284,Architecture and Design;Implementation,Use an authentication framework or library such as the OWASP ESAPI Authentication feature.
288,Authentication Bypass Using an Alternate Path or Channel,"A product requires authentication, but the product has an alternate path or channel that does not require authentication.",127;665,306;284,Architecture and Design;Architecture and Design,"Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource."
289,Authentication Bypass by Alternate Name,"The product performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor.",,1390,Architecture and Design;Implementation,Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.;;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
29,Path Traversal: '\..\filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\..\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",,23,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
290,Authentication Bypass by Spoofing,This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.,21;22;459;461;473;476;59;60;667;94,1390;287,Implementation,
291,Reliance on IP Address for Authentication,The product uses an IP address for authentication.,4,290;923;471,Architecture and Design,Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.
292,DEPRECATED: Trusting Self-reported DNS Name,This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.,,,,
293,Using Referer Field for Authentication,"The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking.",,290,Architecture and Design,"In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate."
294,Authentication Bypass by Capture-replay,A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).,102;509;555;561;60;644;645;652;701;94,1390;287,Architecture and Design,"Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.;Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content."
295,Improper Certificate Validation,"The product does not validate, or incorrectly validates, a certificate.",459;475,287;287,Architecture and Design;Implementation;Implementation,"Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.;If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname."
296,Improper Following of a Certificate's Chain of Trust,"The product does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.",,295;573,Implementation;Implementation,"Ensure that proper certificate checking is included in the system design.;Understand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity.;If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust."
297,Improper Validation of Certificate with Host Mismatch,"The product communicates with a host that provides a certificate, but the product does not properly ensure that the certificate is actually associated with that host.",,923;295,Implementation;Implementation,"Fully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed.;If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname."
298,Improper Validation of Certificate Expiration,"A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age.",,295;672,Implementation;Implementation,"Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.;If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration."
299,Improper Check for Certificate Revocation,"The product does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised.",,295;404,Implementation;Implementation,"Ensure that certificates are checked for revoked status.;If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the revoked status."
30,Path Traversal: '\dir\..\filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\dir\..\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",,23,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
300,Channel Accessible by Non-Endpoint,"The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",466;57;589;590;612;613;615;662;94,923,Architecture and Design,"Always fully authenticate both ends of any communications channel.;Adhere to the principle of complete mediation.;A certificate binds an identity to a cryptographic key to authenticate a communicating party. Often, the certificate takes the encrypted form of the hash of the identity of the subject, the public key, and information such as time of issue or expiration using the issuer's private key. The certificate can be validated by deciphering the certificate with the issuer's public key. See also X.509 certificate signature chains and the PGP certification structure."
301,Reflection Attack in an Authentication Protocol,Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.,90,1390,Architecture and Design,Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder.;Let the initiator prove its identity before proceeding.
302,Authentication Bypass by Assumed-Immutable Data,"The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.",10;13;21;274;31;39;45;77,1390;807,Architecture and Design;Implementation,"Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)"
303,Incorrect Implementation of Authentication Algorithm,"The requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.",90,1390,Implementation,
304,Missing Critical Step in Authentication,"The product implements an authentication technique, but it skips a step that weakens the technique.",,303;573,Implementation,
305,Authentication Bypass by Primary Weakness,"The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.",,1390,Implementation,
306,Missing Authentication for Critical Function,The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.,12;166;216;36;62,287;287,Architecture and Design,";For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;;When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302]."
307,Improper Restriction of Excessive Authentication Attempts,"The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.",16;49;560;565;600;652;653,1390;287;799,Architecture and Design,;
308,Use of Single-factor Authentication,The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.,16;49;509;55;555;560;561;565;600;644;645;652;653;70,1390;654,Architecture and Design,"Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise."
309,Use of Password System for Primary Authentication,"The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.",16;49;509;55;555;560;561;565;600;652;653;70,1390;654,Architecture and Design,";Use a zero-knowledge password protocol, such as SRP.;Ensure that passwords are stored safely and are not reversible.;Implement password aging functionality that requires passwords be changed after a certain point.;Use a mechanism for determining the strength of a password and notify the user of weak password use.;Inform the user of why password protections are in place, how they work to protect data integrity, and why it is important to heed their warnings."
31,Path Traversal: 'dir\..\..\filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir\..\..\filename' (multiple internal backslash dot dot) sequences that can resolve to a location that is outside of that directory.",,23,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
311,Missing Encryption of Sensitive Data,The product does not encrypt sensitive or critical information before storage or transmission.,157;158;204;31;37;383;384;385;386;387;388;477;609;65,693,Architecture and Design;Operation,"Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.;;;;When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.;Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible."
312,Cleartext Storage of Sensitive Information,The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.,37,311;311;922,Architecture and Design,"When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to encrypt the data at rest. [REF-1297] [REF-1299] [REF-1301]"
313,Cleartext Storage in a File or on Disk,"The product stores sensitive information in cleartext in a file, or on disk.",,312,Architecture and Design,
314,Cleartext Storage in the Registry,The product stores sensitive information in cleartext in the registry.,37,312,Architecture and Design,
315,Cleartext Storage of Sensitive Information in a Cookie,The product stores sensitive information in cleartext in a cookie.,31;37;39;74,312,Architecture and Design,
316,Cleartext Storage of Sensitive Information in Memory,The product stores sensitive information in cleartext in memory.,,312,Architecture and Design,
317,Cleartext Storage of Sensitive Information in GUI,The product stores sensitive information in cleartext within the GUI.,,312,Architecture and Design,
318,Cleartext Storage of Sensitive Information in Executable,The product stores sensitive information in cleartext in an executable.,37;65,312,Implementation,
319,Cleartext Transmission of Sensitive Information,The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.,102;117;383;477;65,311;311,Architecture and Design;Architecture and Design;Operation;System Configuration,"Before transmitting, encrypt the data using reliable, confidentiality-protecting cryptographic protocols.;When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.;When designing hardware platforms, ensure that approved encryption algorithms (such as those recommended by NIST) protect paths from security critical data to trusted user applications.;Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.;Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols."
32,Path Traversal: '...' (Triple Dot),"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '...' (triple dot) sequences that can resolve to a location that is outside of that directory.",,23,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
321,Use of Hard-coded Cryptographic Key,The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.,,798;798;798,Architecture and Design,Prevention schemes mirror that of hard-coded password storage.
322,Key Exchange without Entity Authentication,The product performs a key exchange with an actor without verifying the identity of that actor.,,306,Architecture and Design,Ensure that proper authentication is included in the system design.;Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.
323,"Reusing a Nonce, Key Pair in Encryption",Nonces should be used for the present occasion and only once.,,344,Architecture and Design,"Refuse to reuse nonce values.;Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces."
324,Use of a Key Past its Expiration Date,"The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.",,672,Architecture and Design,"Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible."
325,Missing Cryptographic Step,"The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.",68,573,Implementation;Requirements,
326,Inadequate Encryption Strength,"The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.",112;192;20,693,Architecture and Design,Use an encryption scheme that is currently considered to be strong by experts in the field.
327,Use of a Broken or Risky Cryptographic Algorithm,The product uses a broken or risky cryptographic algorithm or protocol.,20;459;473;475;608;614;97,693,Architecture and Design;Implementation,";Ensure that the design allows one cryptographic algorithm to be replaced with another in the next generation or version. Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. With hardware, design the product at the Intellectual Property (IP) level so that one cryptographic algorithm can be replaced with another in the next generation of the hardware product.;Carefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.;;When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."
328,Use of Weak Hash,"The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).",461;68,326;327,Architecture and Design,
329,Generation of Predictable IV with CBC Mode,"The product generates and uses a predictable initialization Vector (IV) with Cipher Block Chaining (CBC) Mode, which causes algorithms to be susceptible to dictionary attacks when they are encrypted under the same key.",,1204;573,Implementation,"NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation."
33,Path Traversal: '....' (Multiple Dot),"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....' (multiple dot) sequences that can resolve to a location that is outside of that directory.",,23,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
330,Use of Insufficiently Random Values,The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.,112;485;59,693,Architecture and Design;Implementation,";Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.;Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.;Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (""Approved Random Number Generators"").;Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."
331,Insufficient Entropy,"The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.",59,330;330,Architecture and Design;Implementation,Determine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds.
332,Insufficient Entropy in PRNG,"The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat.",,331,Architecture and Design;Implementation,"Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (""Approved Random Number Generators"").;Consider a PRNG that re-seeds itself as needed from high-quality pseudo-random output, such as hardware devices.;When deciding which PRNG to use, look at its sources of entropy. Depending on what your security needs are, you may need to use a random number generator that always uses strong random data -- i.e., a random number generator that attempts to be strong but will fail in a weak way or will always provide some middle ground of protection through techniques like re-seeding. Generally, something that always provides a predictable amount of strength is preferable."
333,Improper Handling of Insufficient Entropy in TRNG,True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block.,,331;755,Architecture and Design;Implementation,"Rather than failing on a lack of random numbers, it is often preferable to wait for more numbers to be created."
334,Small Space of Random Values,"The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks.",,330,Architecture and Design;Implementation,"Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (""Approved Random Number Generators"")."
335,Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG),The product uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds.,,330;330,Implementation,
336,Same Seed in Pseudo-Random Number Generator (PRNG),A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.,,335,Implementation,"Do not reuse PRNG seeds. Consider a PRNG that periodically re-seeds itself as needed from a high quality pseudo-random output, such as hardware devices.;Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible."
337,Predictable Seed in Pseudo-Random Number Generator (PRNG),"A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.",,335,Implementation,"Use non-predictable inputs for seed generation.;Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.;Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block."
338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG),"The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.",,330;330,Architecture and Design;Implementation,"Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux."
339,Small Seed Space in PRNG,"A Pseudo-Random Number Generator (PRNG) uses a relatively small seed space, which makes it more susceptible to brute force attacks.",,335,Implementation,"Use well vetted pseudo-random number generating algorithms with adequate length seeds. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a ""random enough"" number.;Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible."
34,Path Traversal: '....//',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....//' (doubled dot dot slash) sequences that can resolve to a location that is outside of that directory.",,23,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
340,Generation of Predictable Numbers or Identifiers,The product uses a scheme that generates numbers or identifiers that are more predictable than required.,,330,Architecture and Design;Implementation,
341,Predictable from Observable State,"A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.",,340,Architecture and Design;Implementation,"Increase the entropy used to seed a PRNG.;Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (""Approved Random Number Generators"").;Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block."
342,Predictable Exact Value from Previous Values,An exact value or random number can be precisely predicted by observing previous values.,,340,Architecture and Design;Implementation,"Increase the entropy used to seed a PRNG.;Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (""Approved Random Number Generators"").;Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block."
343,Predictable Value Range from Previous Values,"The product's random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated.",,340,Architecture and Design;Implementation,"Increase the entropy used to seed a PRNG.;Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (""Approved Random Number Generators"").;Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block."
344,Use of Invariant Value in Dynamically Changing Context,"The product uses a constant value, name, or reference, but this value can (or should) vary across different environments.",,330,Architecture and Design;Implementation,
345,Insufficient Verification of Data Authenticity,"The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.",111;141;142;148;218;384;385;386;387;388;665;701,693,Architecture and Design;Implementation,
346,Origin Validation Error,The product does not properly verify that the source of data or communication is valid.,111;141;142;160;21;384;385;386;387;388;510;59;60;75;76;89,345;345;284,Architecture and Design;Implementation,
347,Improper Verification of Cryptographic Signature,"The product does not verify, or incorrectly verifies, the cryptographic signature for data.",463;475,345;345,Architecture and Design;Implementation,
348,Use of Less Trusted Source,"The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.",141;142;73;76;85,345,Architecture and Design;Implementation,
349,Acceptance of Extraneous Untrusted Data With Trusted Data,"The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.",141;142;75,345,Implementation,
35,Path Traversal: '.../...//',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '.../...//' (doubled triple dot slash) sequences that can resolve to a location that is outside of that directory.",,23,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
350,Reliance on Reverse DNS Resolution for a Security-Critical Action,"The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.",142;275;73;89,290;807,Architecture and Design,Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.;Perform proper forward and reverse DNS lookups to detect DNS spoofing.
351,Insufficient Type Distinction,The product does not properly distinguish between different types of elements in a way that leads to insecure behavior.,,345,Implementation,
352,Cross-Site Request Forgery (CSRF),"The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",111;462;467;62,345;345,Architecture and Design,";Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.;Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). [REF-332];Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.;;Do not use the GET method for any request that triggers a state change.;Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons."
353,Missing Support for Integrity Check,"The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.",13;14;389;39;665;74;75,345,Architecture and Design;Implementation,"Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.;Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent."
354,Improper Validation of Integrity Check Value,"The product does not validate or incorrectly validates the integrity check values or ""checksums"" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.",145;463;75,345;345;754,Architecture and Design;Implementation,Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.
356,Product UI does not Warn User of Unsafe Actions,The product's user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system.,,221,Architecture and Design;Implementation,
357,Insufficient UI Warning of Dangerous Operations,"The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention.",,693,Architecture and Design;Implementation,
358,Improperly Implemented Security Check for Standard,"The product does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique.",,573;693,Architecture and Design;Implementation,
359,Exposure of Private Personal Information to an Unauthorized Actor,"The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.",464;467;498;508,200,Architecture and Design;Implementation;Operation,;
36,Absolute Path Traversal,"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as ""/abs/path"" that can resolve to a location that is outside of that directory.",597,22;22;22,Implementation,
360,Trust of System Event Data,Security based on event locations are insecure and can be spoofed.,,345,Architecture and Design;Implementation,Never trust or rely any of the information in an Event for security.
362,Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'),"The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",26;29,691,Architecture and Design;Implementation,"In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.;Use thread-safe capabilities such as the data access abstraction in Spring.;;When using multithreading and operating on shared variables, only use thread-safe functions.;Use atomic operations on shared variables. Be wary of innocent-looking constructs such as ""x++"". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write.;Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412.;Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization.;Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.;Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."
363,Race Condition Enabling Link Following,"The product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.",26,367,Architecture and Design;Implementation,
364,Signal Handler Race Condition,The product uses a signal handler that introduces a race condition.,,362,Implementation,"Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.;Design signal handlers to only set flags, rather than perform complex functionality. These flags can then be checked and acted upon within the main program loop.;Only use reentrant functions within signal handlers. Also, use validation to ensure that state is consistent while performing asynchronous actions that affect the state of execution."
365,DEPRECATED: Race Condition in Switch,This entry has been deprecated. There are no documented cases in which a switch's control expression is evaluated more than once.,,,,
366,Race Condition within a Thread,"If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.",26;29,362;662;662,Implementation,"Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.;Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution."
367,Time-of-check Time-of-use (TOCTOU) Race Condition,"The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.",27;29,362;362,Implementation,"The most basic advice for TOCTOU vulnerabilities is to not perform a check before the use. This does not resolve the underlying issue of the execution of a function on a resource whose state and identity cannot be assured, but it does help to limit the false sense of security given by the check.;When the file being altered is owned by the current user and group, set the effective gid and uid to that of the current user and group when executing this statement.;Limit the interleaving of operations on files from multiple processes.;If you cannot perform operations atomically and you must share access to the resource between multiple processes or threads, then try to limit the amount of time (CPU cycles) between the check and use of the resource. This will not fix the problem, but it could make it more difficult for an attack to succeed.;Recheck the resource after the use call to verify that the action was taken appropriately.;Ensure that some environmental locking mechanism can be used to protect resources effectively.;Ensure that locking occurs before the check, as opposed to afterwards, such that the resource, as checked, is the same as it is when in use."
368,Context Switching Race Condition,"A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.",26;29,362,Architecture and Design;Implementation,
369,Divide By Zero,The product divides a value by zero.,,682;682;682;682,Implementation,
37,Path Traversal: '/absolute/pathname/here',"The product accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,36;160,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
370,Missing Check for Certificate Revocation after Initial Check,"The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.",26;29,299,Implementation,"Ensure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue."
372,Incomplete Internal State Distinction,"The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.",140;74,664,Implementation,
373,DEPRECATED: State Synchronization Error,This entry was deprecated because it overlapped the same concepts as race condition (CWE-362) and Improper Synchronization (CWE-662).,,,,
374,Passing Mutable Objects to an Untrusted Method,The product sends non-cloned mutable data as an argument to a method or function.,,668,Implementation,"Pass in data which should not be altered as constant or immutable.;Clone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class."
375,Returning a Mutable Object to an Untrusted Caller,Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.,,668,Implementation,"Declare returned data which should not be altered as constant or immutable.;Clone all mutable data before returning references to it. This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class."
377,Insecure Temporary File,Creating and using insecure temporary files can leave application and system data vulnerable to attack.,149;155,668,Implementation,
378,Creation of Temporary File With Insecure Permissions,"Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.",,377,Implementation,Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.;Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.;Randomize temporary file names. This can also be achieved by using a safe temp-file function. This will ensure that temporary files will not be created in predictable places.
379,Creation of Temporary File in Directory with Insecure Permissions,The product creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file.,,377,Implementation,"Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.;Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.;Avoid using vulnerable temp file functions."
38,Path Traversal: '\absolute\pathname\here',"The product accepts input in the form of a backslash absolute path ('\absolute\pathname\here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,36,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
382,J2EE Bad Practices: Use of System.exit(),"A J2EE application uses System.exit(), which also shuts down its container.",,705,Implementation,"The shutdown function should be a privileged function available only to a properly authorized administrative user;Web applications should not call methods that cause the virtual machine to exit, such as System.exit();Web applications should also not throw any Throwables to the application server as this may adversely affect the container.;Non-web applications may have a main() method that contains a System.exit(), but generally should not call System.exit() from other locations in the code"
383,J2EE Bad Practices: Direct Use of Threads,Thread management in a Web application is forbidden in some circumstances and is always highly error prone.,,695,Implementation,"For EJB, use framework approaches for parallel execution, instead of using threads."
384,Session Fixation,"Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.",196;21;31;39;59;60;61,610;610,Architecture and Design;Implementation,"Invalidate any existing session identifiers prior to authorizing a new user session.;For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again."
385,Covert Timing Channel,"Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.",462,514,Architecture and Design;Implementation,"Whenever possible, specify implementation strategies that do not introduce time variances in operations.;Often one can artificially manipulate the time which operations take or -- when operations occur -- can remove information from the attacker.;It is reasonable to add artificial or random delays so that the amount of CPU time consumed is independent of the action being taken by the application."
386,Symbolic Name not Mapping to Correct Object,"A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time.",,706,Architecture and Design;Implementation,
39,Path Traversal: 'C:dirname',The product accepts input that contains a drive letter or Windows volume letter ('C:dirname') that potentially redirects access to an unintended location or arbitrary file.,,36,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
390,Detection of Error Condition Without Action,"The product detects a specific error, but takes no actions to handle the error.",,755,Implementation,"Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.;If a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program.;Subject the product to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing."
391,Unchecked Error Condition,"[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES AND CONSIDER CWE-252, CWE-248, OR CWE-1069.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.",,754;703;703,Implementation,"The choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions suffer from the up call version of the weak base class problem.;A language can be used which requires, at compile time, to catch all serious exceptions. However, one must make sure to use the most current version of the API as new exceptions could be added.;Catch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment."
392,Missing Report of Error Condition,The product encounters an error but does not provide a status code or return value to indicate that an error has occurred.,,755;684;703;703,Implementation,
393,Return of Wrong Status Code,"A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result.",,684;703,Implementation,
394,Unexpected Status Code or Return Value,"The product does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the product.",,754,Implementation,
395,Use of NullPointerException Catch to Detect NULL Pointer Dereference,Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.,,705;755,Implementation,Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.
396,Declaration of Catch for Generic Exception,Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.,,705;755;221,Implementation,
397,Declaration of Throws for Generic Exception,Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.,,705;221;703,Implementation,
40,Path Traversal: '\\UNC\share\name\' (Windows UNC Share),The product accepts input that identifies a Windows UNC share ('\\UNC\share\name') that potentially redirects access to an unintended location or arbitrary file.,,36,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
400,Uncontrolled Resource Consumption,"The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",147;227;492,664,Operation;Architecture and Design;Implementation,"Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.;;Ensure that protocols have specific limits of scale placed on them.;Ensure that all failures in resource allocation place the system into a safe posture."
401,Missing Release of Memory after Effective Lifetime,"The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",,772;404;404,Implementation,;Use an abstraction library to abstract away risky APIs. Not a complete solution.;The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.
402,Transmission of Private Resources into a New Sphere ('Resource Leak'),The product makes resources available to untrusted parties when those resources are only intended to be accessed by the product.,,668,Architecture and Design;Implementation,
403,Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak'),"A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors.",,402,Implementation,
404,Improper Resource Shutdown or Release,The product does not release or incorrectly releases a resource before it is made available for re-use.,125;130;131;494;495;496;666,664,Implementation,";It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free memory in a function. If you allocate memory that you intend to free upon completion of the function, you must be sure to free the memory at all exit points for that function including error conditions.;Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[].;When releasing a complex object or structure, ensure that you properly dispose of all of its member components, not just the object itself."
405,Asymmetric Resource Consumption (Amplification),"The product does not properly control situations in which an adversary can cause the product to consume or produce excessive resources without requiring the adversary to invest equivalent work or otherwise prove authorization, i.e., the adversary's influence is ""asymmetric.""",,400,Architecture and Design;Implementation;Operation,"An application must make resources available to a client commensurate with the client's access level.;An application must, at all times, keep track of allocated resources and meter their usage appropriately.;Consider disabling resource-intensive algorithms on the server side, such as Diffie-Hellman key exchange."
406,Insufficient Control of Network Message Volume (Network Amplification),"The product does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the product to transmit more traffic than should be allowed for that actor.",,405,Operation;Architecture and Design;Implementation,"An application must make network resources available to a client commensurate with the client's access level.;Define a clear policy for network resource allocation and consumption.;An application must, at all times, keep track of network resources and meter their usage appropriately."
407,Inefficient Algorithmic Complexity,"An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.",,405,Architecture and Design;Implementation,
408,Incorrect Behavior Order: Early Amplification,The product allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.,,405;696,Architecture and Design;Implementation,
409,Improper Handling of Highly Compressed Data (Data Amplification),The product does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.,,405,Architecture and Design;Implementation,
41,Improper Resolution of Path Equivalence,The product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.,3,706,Implementation,";Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
410,Insufficient Resource Pool,"The product's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources.",,664,Architecture and Design;Implementation;Operation,Do not perform resource-intensive transactions for unauthenticated users and/or invalid requests.;Consider implementing a velocity check mechanism which would detect abusive behavior.;Consider load balancing as an option to handle heavy loads.;Make sure that resource handles are properly closed when no longer needed.;Identify the system's resource intensive operations and consider protecting them from abuse (e.g. malicious automated script which runs the resources out).
412,Unrestricted Externally Accessible Lock,"The product properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.",25,667,Architecture and Design;Implementation,Use any access control that is offered by the functionality that is offering the lock.;Use unpredictable names or identifiers for the locks. This might not always be possible or feasible.;Consider modifying your code to use non-blocking synchronization methods.
413,Improper Resource Locking,The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.,,667,Architecture and Design;Implementation,Use a non-conflicting privilege scheme.;Use synchronization when locking a resource.
414,Missing Lock Check,A product does not check to see if a lock is present before performing sensitive operations on a resource.,,667,Architecture and Design;Implementation,Implement a reliable lock mechanism.
415,Double Free,"The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",,825;1341;672;672;672;666,Implementation,"Choose a language that provides automatic memory management.;Ensure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.;Use a static analysis tool to find double free instances."
416,Use After Free,"Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",,825;672;672;672,Implementation,"Choose a language that provides automatic memory management.;When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy."
419,Unprotected Primary Channel,"The product uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.",383,923,Architecture and Design;Implementation,Do not expose administrative functionnality on the user UI.;Protect the administrative/restricted functionality with a strong authentication mechanism.
42,Path Equivalence: 'filename.' (Trailing Dot),"The product accepts path input in the form of trailing dot ('filedir.') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,41;162,Implementation,
420,Unprotected Alternate Channel,"The product protects a primary channel, but it does not use the same level of protection for an alternate channel.",,923,Architecture and Design;Implementation;Operation,Identify all alternate channels and use the same protection mechanisms that are used for the primary channels.
421,Race Condition During Access to Alternate Channel,"The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors.",,420;362,Architecture and Design,
422,Unprotected Windows Messaging Channel ('Shatter'),"The product does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product.",,420;360,Architecture and Design,Always verify and authenticate the source of the message.
423,DEPRECATED: Proxied Trusted Channel,This entry has been deprecated because it was a duplicate of CWE-441. All content has been transferred to CWE-441.,,,,
424,Improper Protection of Alternate Path,The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.,127;554,693;638,Architecture and Design,Deploy different layers of protection to implement security in depth.
425,Direct Request ('Forced Browsing'),"The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",127;143;144;668;87,862;862;288;424,Implementation;Operation,"Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.;Consider using MVC based frameworks such as Struts."
426,Untrusted Search Path,The product searches for critical resources using an externally-supplied search path that can point to resources that are not under the product's direct control.,38,642;668;673,Implementation,"Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.;When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.;Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.;Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.;Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path."
427,Uncontrolled Search Path Element,"The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.",38;471,668;668,Implementation,"Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.;When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.;Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.;Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory. Since this is a denylist approach, it might not be a complete solution.;Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path."
428,Unquoted Search Path or Element,"The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path.",,668;668,Implementation,Properly quote the full search path before executing a program on the system.;;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
43,Path Equivalence: 'filename....' (Multiple Trailing Dot),"The product accepts path input in the form of multiple trailing dot ('filedir....') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,42;163,Implementation,
430,Deployment of Wrong Handler,"The wrong ""handler"" is assigned to process an object.",11,691,Implementation,"Perform a type check before interpreting an object.;Reject any inconsistent types, such as a file with a .GIF extension that appears to consist of PHP code."
431,Missing Handler,A handler is not available or implemented.,,691,Implementation,"Handle all possible situations (e.g. error condition).;If an operation can throw an Exception, implement a handler for that specific exception."
432,Dangerous Signal Handler not Disabled During Sensitive Operations,"The product uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.",,364,Implementation,Turn off dangerous handlers when performing sensitive operations.
433,Unparsed Raw Web Content Delivery,The product stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server.,,219,Implementation;Operation,Perform a type check before interpreting files.;Do not store sensitive information in files which may be misinterpreted.
434,Unrestricted Upload of File with Dangerous Type,The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.,1,669;669,Implementation;Architecture and Design,"Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423];When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.;Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423];;Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.;Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that ""filename.php.gif"" is fed to the PHP interpreter.[REF-422] [REF-423];When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.;Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;"
435,Improper Interaction Between Multiple Correctly-Behaving Entities,"An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses.",,,Architecture and Design;Implementation;Operation,
436,Interpretation Conflict,"Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.",105;273;34,435,Architecture and Design;Implementation,
437,Incomplete Model of Endpoint Features,"A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.",,436,Architecture and Design;Implementation,
439,Behavioral Change in New Version or Environment,"A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B.",,435,Architecture and Design;Implementation,
44,Path Equivalence: 'file.name' (Internal Dot),"The product accepts path input in the form of internal dot ('file.ordir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,41,Implementation,
440,Expected Behavior Violation,"A feature, API, or function does not perform according to its specification.",,684,Architecture and Design;Implementation;Operation,
441,Unintended Proxy or Intermediary ('Confused Deputy'),"The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.",219;465,610,Architecture and Design,"Enforce the use of strong mutual authentication mechanism between the two parties.;Whenever a product is an intermediary or proxy for
                   transactions between two other components, the proxy core
                   should not drop the identity of the initiator of the
                   transaction. The immutability of the identity of the
                   initiator must be maintained and should be forwarded all the
                   way to the target."
443,DEPRECATED: HTTP response splitting,This weakness can be found at CWE-113.,,,,
444,Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling'),"The product acts as an intermediary HTTP agent
         (such as a proxy or firewall) in the data flow between two
         entities such as a client and server, but it does not
         interpret malformed HTTP requests or responses in ways that
         are consistent with how the messages will be processed by
         those entities that are at the ultimate destination.",273;33,436;436,Implementation,"Use a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433].;Use only SSL communication.;Terminate the client session after each request.;Turn all pages to non-cacheable."
446,UI Discrepancy for Security Feature,"The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state.",,684,Architecture and Design;Implementation,
447,Unimplemented or Unsupported Feature in UI,"A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.",,446;671,Implementation,Perform functionality testing before deploying the application.
448,Obsolete Feature in UI,A UI function is obsolete and the product does not warn the user.,,446,Implementation,Remove the obsolete feature from the UI. Warn the user that the feature is no longer supported.
449,The UI Performs the Wrong Action,The UI performs the wrong action with respect to the user's request.,,446,Implementation,Perform extensive functionality testing of the UI. The UI should behave as specified.
45,Path Equivalence: 'file...name' (Multiple Internal Dot),"The product accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,44;165,Implementation,
450,Multiple Interpretations of UI Input,The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.,,357,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
451,User Interface (UI) Misrepresentation of Critical Information,"The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.",154;163;164;173;98,684;221,Architecture and Design;Implementation,"Perform data validation (e.g. syntax, length, etc.) before interpreting the data.;Create a strategy for presenting information, and plan for how to display unusual characters."
453,Insecure Default Variable Initialization,"The product, by default, initializes an internal variable with an insecure or less secure value than is possible.",,1188,Implementation,"Disable or change default settings when they can be used to abuse the system. Since those default settings are shipped with the product they are likely to be known by a potential attacker who is familiar with the product. For instance, default credentials should be changed or the associated accounts should be disabled."
454,External Initialization of Trusted Variables or Data Stores,The product initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.,,1419,Architecture and Design;Implementation,"A product system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking (e.g. input validation) is performed when relying on input from outside a trust boundary.;Avoid any external control of variables. If necessary, restrict the variables that can be modified using an allowlist, and use a different namespace or naming convention if possible."
455,Non-exit on Failed Initialization,"The product does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error or a hardware security module (HSM) cannot be activated, which can cause the product to execute in a less secure fashion than intended by the administrator.",,665;705;636,Implementation,Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.
456,Missing Initialization of a Variable,"The product does not initialize critical variables, which causes the execution environment to use unexpected values.",,909;665;665,Implementation,Check that critical variables are initialized.;Use a static analysis tool to spot non-initialized variables.
457,Use of Uninitialized Variable,"The code uses a variable that has not been initialized, leading to unpredictable or unintended results.",,908;665;665,Implementation,"Assign all variables to an initial value.;Most compilers will complain about the use of uninitialized variables if warnings are turned on.;When using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.;The choice could be made to use a language that is not susceptible to these issues.;Mitigating technologies such as safe string libraries and container abstractions could be introduced."
458,DEPRECATED: Incorrect Initialization,"This weakness has been deprecated because its name and description did not match. The description duplicated CWE-454, while the name suggested a more abstract initialization problem. Please refer to CWE-665 for the more abstract problem.",,,,
459,Incomplete Cleanup,"The product does not properly ""clean up"" and remove temporary or supporting resources after they have been used.",,404;404,Implementation,Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.
46,Path Equivalence: 'filename ' (Trailing Space),"The product accepts path input in the form of trailing space ('filedir ') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",649,41;162,Implementation,
460,Improper Cleanup on Thrown Exception,"The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.",,459;755,Implementation,"If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely."
462,Duplicate Key in Associative List (Alist),Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.,,694,Implementation,Use a hash table instead of an alist.;Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.
463,Deletion of Data Structure Sentinel,The accidental deletion of a data-structure sentinel can cause serious programming logic problems.,,707,Implementation,Use an abstraction library to abstract away risky APIs. Not a complete solution.;;Use OS-level preventative functionality. Not a complete solution.
464,Addition of Data Structure Sentinel,The accidental addition of a data-structure sentinel can cause serious programming logic problems.,,138,Implementation,"Encapsulate the user from interacting with data sentinels. Validate user input to verify that sentinels are not present.;Proper error checking can reduce the risk of inadvertently introducing sentinel values into data. For example, if a parsing function fails or encounters an error, it might return a value that is the same as the sentinel.;Use an abstraction library to abstract away risky APIs. This is not a complete solution.;Use OS-level preventative functionality. This is not a complete solution."
466,Return of Pointer Value Outside of Expected Range,A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.,,119;20,Implementation,
467,Use of sizeof() on a Pointer Type,"The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.",,131,Implementation,"Use expressions such as ""sizeof(*pointer)"" instead of ""sizeof(pointer)"", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack."
468,Incorrect Pointer Scaling,"In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.",,682,Implementation,Use a platform with high-level memory abstractions.;Always use array indexing instead of direct pointer manipulation.;Use technologies for preventing buffer overflows.
469,Use of Pointer Subtraction to Determine Size,"The product subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.",,682,Implementation,"Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to ""walk"" from one pointer to the other and calculate the difference. Always validate this number."
47,Path Equivalence: ' filename' (Leading Space),"The product accepts path input in the form of leading space (' filedir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,41,Implementation,
470,Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection'),"The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.",138,913;913;610;20,Architecture and Design;Implementation,Refactor your code to avoid using reflection.;Do not use user-controlled inputs to select and load classes or code.;Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.
471,Modification of Assumed-Immutable Data (MAID),The product does not properly protect an assumed-immutable element from being modified by an attacker.,384;385;386;387;388,664,Implementation;Architecture and Design,"When the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence."
472,External Control of Assumed-Immutable Web Parameter,"The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.",146;226;31;39,642;471,Implementation,;Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
473,PHP External Variable Modification,"A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.",77,471,Implementation,"Carefully identify which variables can be controlled or influenced by an external user, and consider adopting a naming convention to emphasize when externally modifiable variables are being used. An application should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Do not allow your application to run with register_globals enabled. If you implement a register_globals emulator, be extremely careful of variable extraction, dynamic evaluation, and similar issues, since weaknesses in your emulation could allow external variable modification to take place even without register_globals."
474,Use of Function with Inconsistent Implementations,The code uses a function that has inconsistent implementations across operating systems and versions.,,758,Implementation,Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.
475,Undefined Behavior for Input to API,The behavior of this function is undefined unless its control parameter is set to a specific value.,,573,Architecture and Design;Implementation,
476,NULL Pointer Dereference,"A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",,710;754;754,Implementation,"If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.;The choice could be made to use a language that is not susceptible to these issues.;Check the results of all functions that return a value and verify that the value is non-null before acting upon it.;Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.;Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.;Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."
477,Use of Obsolete Function,"The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.",,710,Implementation,Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.;Consider seriously the security implications of using an obsolete function. Consider using alternate functions.
478,Missing Default Case in Multiple Condition Expression,"The code does not have a default case in an expression with multiple conditions, such as a switch statement.",,1023,Implementation,"Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely."
479,Signal Handler Use of a Non-reentrant Function,The product defines a signal handler that calls a non-reentrant function.,,828;663,Implementation,"Require languages or libraries that provide reentrant functionality, or otherwise make it easier to avoid this weakness.;Design signal handlers to only set flags rather than perform complex functionality.;Ensure that non-reentrant functions are not found in signal handlers.;Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally."
48,Path Equivalence: 'file name' (Internal Whitespace),"The product accepts path input in the form of internal space ('file(SPACE)name') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,41,Implementation,
480,Use of Incorrect Operator,"The product accidentally uses the wrong operator, which changes the logic in security-relevant ways.",,670,Implementation,
481,Assigning instead of Comparing,The code uses an operator for assignment when the intention was to perform a comparison.,,480,Implementation,"Many IDEs and static analysis products will detect this problem.;Place constants on the left. If one attempts to assign a constant with a variable, the compiler will produce an error."
482,Comparing instead of Assigning,The code uses an operator for comparison when the intention was to perform an assignment.,,480,Implementation,Many IDEs and static analysis products will detect this problem.
483,Incorrect Block Delimitation,"The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.",,670,Implementation,Always use explicit block delimitation and use static-analysis technologies to enforce this practice.
484,Omitted Break Statement in Switch,"The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.",,710;670,Implementation,"Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.;The functionality of omitting a break statement could be clarified with an if statement. This method is much safer."
486,Comparison of Classes by Name,"The product compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name.",,1025,Implementation,"Use class equivalency to determine type. Rather than use the class name to determine if an object is of a given type, use the getClass() method, and == operator."
487,Reliance on Package-level Scope,"Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.",,664,Implementation,"Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering."
488,Exposure of Data Element to Wrong Session,"The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.",59;60,668,Implementation,"Protect the application's sessions from information leakage. Make sure that a session's data is not used or visible by other sessions.;Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).;In a multithreading environment, storing user data in Servlet member fields introduces a data access race condition. Do not use member fields to store information in the Servlet."
489,Active Debug Code,"The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.",121;661,710,Implementation;Build and Compilation;Operation,Remove debug code before deploying the application.
49,Path Equivalence: 'filename/' (Trailing Slash),"The product accepts path input in the form of trailing slash ('filedir/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,41;162,Implementation;Operation,
491,Public cloneable() Method Without Final ('Object Hijack'),"A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.",,668,Implementation,Make the cloneable() method final.
492,Use of Inner Class Containing Sensitive Data,Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.,,668,Implementation,"Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.;Inner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well."
493,Critical Public Variable Without Final Modifier,"The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values.",,668,Implementation,"Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code."
494,Download of Code Without Integrity Check,The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.,184;185;186;187;533;538;657;662;691;692;693;695,345;669;669,Architecture and Design;Implementation,"Perform proper forward and reverse DNS lookups to detect DNS spoofing.;;;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;"
495,Private Data Structure Returned From A Public Method,"The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways.",,664,Implementation,Declare the method private.;Clone the member data and keep an unmodified version of the data private to the object.;Use public setter methods that govern how a private member can be modified.
496,Public Data Assigned to Private Array-Typed Field,Assigning public data to a private array is equivalent to giving public access to the array.,,664,Implementation,Do not allow objects to modify private members of a class.
497,Exposure of Sensitive System Information to an Unauthorized Control Sphere,The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.,170;694,200,Implementation,Production applications should never use methods that generate internal details such as stack traces and error messages unless that information is directly committed to a log that is not viewable by the end user. All error message text should be HTML entity encoded before being written to the log file to protect against potential cross-site scripting attacks against the viewer of the logs
498,Cloneable Class Containing Sensitive Information,"The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.",,668,Implementation,"If you do make your classes clonable, ensure that your clone method is final and throw super.clone()."
499,Serializable Class Containing Sensitive Data,"The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.",,668,Implementation,"In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.;Make sure to prevent serialization of your objects."
5,J2EE Misconfiguration: Data Transmission Without Encryption,Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.,,319,Implementation;Operation,The product configuration should ensure that SSL or an encryption mechanism of equivalent strength and vetted reputation is used for all access-controlled pages.
50,Path Equivalence: '//multiple/leading/slash',"The product accepts path input in the form of multiple leading slash ('//multiple/leading/slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,41;161,Implementation,
500,Public Static Field Not Marked Final,"An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.",,493,Implementation,"Clearly identify the scope for all critical data elements, including whether they should be regarded as static.;"
501,Trust Boundary Violation,The product mixes trusted and untrusted data in the same data structure or structured message.,,664,Architecture and Design,
502,Deserialization of Untrusted Data,The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.,586,913;913,Architecture and Design;Implementation,"If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.;When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.;Explicitly define a final object() to prevent deserialization.;;Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Add only acceptable classes to an allowlist. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation."
506,Embedded Malicious Code,The product contains code that appears to be malicious in nature.,442;448;636,912,Implementation;Bundling;Distribution;Installation,"Remove the malicious code and start an effort to ensure that no more malicious code exists. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker."
507,Trojan Horse,"The product appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.",698,506,Implementation;Operation,Most antivirus software scans for Trojan Horses.;Verify the integrity of the product that is being installed.
508,Non-Replicating Malicious Code,Non-replicating malicious code only resides on the target system or product that is attacked; it does not attempt to spread to other systems.,,507,Implementation;Operation,Antivirus software can help mitigate known malicious code.;Verify the integrity of the software that is being installed.
509,Replicating Malicious Code (Virus or Worm),"Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or the product.",,507,Implementation;Operation,Antivirus software scans for viruses or worms.;Always verify the integrity of the software that is being installed.
51,Path Equivalence: '/multiple//internal/slash',"The product accepts path input in the form of multiple internal slash ('/multiple//internal/slash/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,41,Implementation,Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
510,Trapdoor,"A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism.",,506,Architecture and Design;Implementation;Operation,"Always verify the integrity of the software that is being installed.;Identify and closely inspect the conditions for entering privileged areas of the code, especially those related to authentication, process invocation, and network communications."
511,Logic/Time Bomb,"The product contains code that is designed to disrupt the legitimate operation of the product (or its environment) when a certain time passes, or when a certain logical condition is met.",,506,Architecture and Design;Implementation,"Always verify the integrity of the product that is being installed.;Conduct a code coverage analysis using live testing, then closely inspect any code that is not covered."
512,Spyware,"The product collects personally identifiable information about a human user or the user's activities, but the product accesses this information using other resources besides itself, and it does not require that user's explicit approval or direct input into the product.",,506,Architecture and Design;Implementation;Operation,Use spyware detection and removal software.;Always verify the integrity of the product that is being installed.
514,Covert Channel,A covert channel is a path that can be used to transfer information in a way not intended by the system's designers.,463,1229,Implementation;Operation,
515,Covert Storage Channel,A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information.,,514,Implementation,Ensure that all reserved fields are set to zero before messages are sent and that no unnecessary information is included.
516,DEPRECATED: Covert Timing Channel,This weakness can be found at CWE-385.,,,,
52,Path Equivalence: '/multiple/trailing/slash//',"The product accepts path input in the form of multiple trailing slash ('/multiple/trailing/slash//') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,41;163,Implementation,Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
520,.NET Misconfiguration: Use of Impersonation,Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks.,,266,Architecture and Design;Implementation;Operation,Run the application with limited privilege to the underlying operating and file system.
521,Weak Password Requirements,"The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.",112;16;49;509;55;555;561;565;70,1391;287,Architecture and Design;Implementation,";Consider a second
                 authentication factor beyond the password, which prevents the
                 password from being a single point of failure. See CWE-308 for
                 further information.;Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes."
522,Insufficiently Protected Credentials,"The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.",102;474;50;509;551;555;560;561;600;644;645;652;653,1390;287;668,Architecture and Design;Implementation,"Use an appropriate security mechanism to protect the credentials.;Make appropriate use of cryptography to protect the credentials.;Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.)."
523,Unprotected Transport of Credentials,Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.,102,522,Architecture and Design,"Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier."
524,Use of Cache Containing Sensitive Information,"The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.",204,668,Implementation,Protect information stored in cache.;Do not store unnecessarily sensitive information in the cache.;Consider using encryption in the cache.
525,Use of Web Browser Cache Containing Sensitive Information,The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.,37,524,Implementation,Protect information stored in cache.;Use a restrictive caching policy for forms and web pages that potentially contain sensitive information.;Do not store unnecessarily sensitive information in the cache.;Consider using encryption in the cache.
526,Cleartext Storage of Sensitive Information in an Environment Variable,The product uses an environment variable to store unencrypted sensitive information.,,312,Architecture and Design;Implementation;Operation,"Encrypt information stored in the environment variable to protect it from being exposed to an unauthorized user. If encryption is not feasible or is considered too expensive for the business use of the application, then consider using a properly protected configuration file instead of an environment variable. It should be understood that unencrypted information in a config file is also not guaranteed to be protected, but it is still a better choice, because it reduces attack surface related to weaknesses such as CWE-214. In some settings, vaults might be a feasible option for safer data transfer. Users should be notified of the business choice made to not protect the sensitive information through encryption.;If the environment variable is not necessary for the desired behavior, then remove it entirely, or clear it to an empty value."
527,Exposure of Version-Control Repository to an Unauthorized Control Sphere,"The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.",,552,Operation,"Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed."
528,Exposure of Core Dump File to an Unauthorized Control Sphere,"The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.",,552,Operation,Protect the core dump files from unauthorized access.
529,Exposure of Access Control List Files to an Unauthorized Control Sphere,The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.,,552,Operation,Protect access control list files.
53,Path Equivalence: '\multiple\\internal\backslash',"The product accepts path input in the form of multiple internal backslash ('\multiple\trailing\\slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,41;165,Implementation,Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
530,Exposure of Backup File to an Unauthorized Control Sphere,A backup file is stored in a directory or archive that is made accessible to unauthorized actors.,,552,Operation,Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.
531,Inclusion of Sensitive Information in Test Code,"Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions.",,540,Testing,Remove test code before deploying the application into production.
532,Insertion of Sensitive Information into Log File,Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.,215,538;200,Architecture and Design;Implementation;Operation,Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.;Remove debug log files before deploying the application into production.;Protect log files against unauthorized read/write.;Adjust configurations appropriately when software is transitioned from a debug state to production.
533,DEPRECATED: Information Exposure Through Server Log Files,This entry has been deprecated because its abstraction was too low-level.  See CWE-532.,,,,
534,DEPRECATED: Information Exposure Through Debug Log Files,This entry has been deprecated because its abstraction was too low-level.  See CWE-532.,,,,
535,Exposure of Information Through Shell Error Message,"A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system.",,211,Architecture and Design;Implementation,
536,Servlet Runtime Error Message Containing Sensitive Information,A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker.,,211,Implementation,
537,Java Runtime Error Message Containing Sensitive Information,"In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.",,211,Implementation,Do not expose sensitive error information to the user.
538,Insertion of Sensitive Information into Externally-Accessible File or Directory,"The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.",95,200,Implementation;Operation,Do not expose file and directory information to the user.
539,Use of Persistent Cookies Containing Sensitive Information,"The web application uses persistent cookies, but the cookies contain sensitive information.",21;31;39;59;60,552,Architecture and Design;Implementation,Do not store sensitive information in persistent cookies.
54,Path Equivalence: 'filedir\' (Trailing Backslash),"The product accepts path input in the form of trailing backslash ('filedir\') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,41;162,Implementation,Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
540,Inclusion of Sensitive Information in Source Code,Source code on a web server or repository often contains sensitive information and should generally not be accessible to users.,,538,Implementation,Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.
541,Inclusion of Sensitive Information in an Include File,"If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system.",,540,Implementation,Do not store sensitive information in include files.;Protect include files from being exposed.
542,DEPRECATED: Information Exposure Through Cleanup Log Files,This entry has been deprecated because its abstraction was too low-level.  See CWE-532.,,,,
543,Use of Singleton Pattern Without Synchronization in a Multithreaded Context,The product uses the singleton pattern when creating a resource within a multithreaded environment.,,820;662;662,Implementation,"Use the Thread-Specific Storage Pattern. See References.;Do not use member fields to store information in the Servlet. In multithreading environments, storing user data in Servlet member fields introduces a data access race condition.;Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209)."
544,Missing Standardized Error Handling Mechanism,"The product does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.",,755,Architecture and Design,"define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors."
545,DEPRECATED: Use of Dynamic Class Loading,"This weakness has been deprecated because it partially overlaps CWE-470, it describes legitimate programmer behavior, and other portions will need to be integrated into other entries.",,,,
546,Suspicious Comment,"The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses.",,1078,Implementation,"Remove comments that suggest the presence of bugs, incomplete functionality, or weaknesses, before deploying the application."
547,"Use of Hard-coded, Security-relevant Constants","The product uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.",,1078,Implementation,Avoid using hard-coded constants. Configuration files offer a more flexible solution.
548,Exposure of Information Through Directory Listing,"A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.",,497,Implementation;Operation,"Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack."
549,Missing Password Field Masking,"The product does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords.",,522,Implementation,Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.
55,Path Equivalence: '/./' (Single Dot Directory),"The product accepts path input in the form of single dot directory exploit ('/./') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,41,Implementation,Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
550,Server-generated Error Message Containing Sensitive Information,"Certain conditions, such as network failure, will cause a server error message to be displayed.",,209,Implementation,"Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed."
551,Incorrect Behavior Order: Authorization Before Parsing and Canonicalization,"If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.",,863;696,Implementation,URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked.
552,Files or Directories Accessible to External Parties,"The product makes files or directories accessible to unauthorized actors, even though they should not be.",150;639,668;668;285,Architecture and Design;Implementation;Operation,"When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access."
553,Command Shell in Externally Accessible Directory,A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.,650,552,Implementation;Operation,Remove any Shells accessible under the web root folder and children directories.
554,ASP.NET Misconfiguration: Not Using Input Validation Framework,The ASP.NET application does not use an input validation framework.,,1173,Architecture and Design;Implementation,
555,J2EE Misconfiguration: Plaintext Password in Configuration File,The J2EE application stores a plaintext password in a configuration file.,,260,Architecture and Design;Implementation,Do not hardwire passwords into your software.;Use industry standard libraries to encrypt passwords before storage in configuration files.
556,ASP.NET Misconfiguration: Use of Identity Impersonation,Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.,,266,Implementation;Operation,Use the least privilege principle.
558,Use of getlogin() in Multithreaded Application,"The product uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values.",,663,Implementation,"Using names for security purposes is not advised. Names are easy to forge and can have overlapping user IDs, potentially causing confusion or impersonation.;Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username."
56,Path Equivalence: 'filedir*' (Wildcard),"The product accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",,41;155,Implementation,Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
560,Use of umask() with chmod-style Argument,The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod().,,687,Implementation,"Use umask() with the correct argument.;If you suspect misuse of umask(), you can use grep to spot call instances of umask()."
561,Dead Code,"The product contains dead code, which can never be executed.",,1164,Implementation,Remove dead code before deploying the application.;Use a static analysis tool to spot dead code.
562,Return of Stack Variable Address,"A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.",,758,Implementation,Use static analysis tools to spot return of the address of a stack variable.
563,Assignment to Variable without Use,"The variable's value is assigned but never used, making it a dead store.",,1164,Implementation,Remove unused variables from the code.
564,SQL Injection: Hibernate,Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.,109,89;89;89,Architecture and Design;Implementation,"A non-SQL style database which is not subject to this flaw may be chosen.;Follow the principle of least privilege when creating user accounts to a SQL database. Users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data.;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.;Use vigorous allowlist style checking on any user input that may be used in a SQL command. Rather than escape meta-characters, it is safest to disallow them entirely. Reason: Later use of data that have been entered in the database may neglect to escape meta-characters before use. Narrowly define the set of safe characters based on the expected value of the parameter in the request."
565,Reliance on Cookies without Validation and Integrity Checking,"The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.",226;31;39,642;669;602,Architecture and Design;Implementation,"Avoid using cookie data for a security-related decision.;Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.;Add integrity checks to detect tampering.;Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client."
566,Authorization Bypass Through User-Controlled SQL Primary Key,"The product uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.",,639,Architecture and Design;Implementation,"Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an ""accept known good"" validation strategy.;Use a parameterized query AND make sure that the accepted values conform to the business rules. Construct your SQL statement accordingly."
567,Unsynchronized Access to Shared Data in a Multithreaded Context,"The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.",25,820;662;662,Implementation,"Remove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables."
568,finalize() Method Without super.finalize(),The product contains a finalize() method that does not call super.finalize().,,573;459,Implementation,Call the super.finalize() method.;Use static analysis tools to spot such issues in your code.
57,Path Equivalence: 'fakedir/../realdir/filename',"The product contains protection mechanisms to restrict access to 'realdir/filename', but it constructs pathnames using external input in the form of 'fakedir/../realdir/filename' that are not handled by those mechanisms. This allows attackers to perform unauthorized actions against the targeted file.",,41,Implementation,Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
570,Expression is Always False,The product contains an expression that will always evaluate to false.,,710,Implementation,Use Static Analysis tools to spot such conditions.
571,Expression is Always True,The product contains an expression that will always evaluate to true.,,710,Implementation,Use Static Analysis tools to spot such conditions.
572,Call to Thread run() instead of start(),"The product calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.",,821,Implementation,Use the start() method instead of the run() method.
573,Improper Following of Specification by Caller,"The product does not follow or incorrectly follows the specifications as required by the implementation language, environment, framework, protocol, or platform.",,710,Implementation,
574,EJB Bad Practices: Use of Synchronization Primitives,The product violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.,,695;821,Implementation,Do not use Synchronization Primitives when writing EJBs.
575,EJB Bad Practices: Use of AWT Swing,The product violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.,,695,Implementation,Do not use AWT/Swing when writing EJBs.
576,EJB Bad Practices: Use of Java I/O,The product violates the Enterprise JavaBeans (EJB) specification by using the java.io package.,,695,Implementation,Do not use Java I/O when writing EJBs.
577,EJB Bad Practices: Use of Sockets,The product violates the Enterprise JavaBeans (EJB) specification by using sockets.,,573,Implementation,Do not use Sockets when writing EJBs.
578,EJB Bad Practices: Use of Class Loader,The product violates the Enterprise JavaBeans (EJB) specification by using the class loader.,,573,Implementation,Do not use the Class Loader when writing EJBs.
579,J2EE Bad Practices: Non-serializable Object Stored in Session,"The product stores a non-serializable object as an HttpSession attribute, which can hurt reliability.",,573,Implementation,"In order for session replication to work, the values the product stores as attributes in the session must implement the Serializable interface."
58,Path Equivalence: Windows 8.3 Filename,"The product contains a protection mechanism that restricts access to a long filename on a Windows operating system, but it does not properly restrict access to the equivalent short ""8.3"" filename.",,41,Implementation,Disable Windows from supporting 8.3 filenames by editing the Windows registry. Preventing 8.3 filenames will not remove previously generated 8.3 filenames.
580,clone() Method Without super.clone(),The product contains a clone() method that does not call super.clone() to obtain the new object.,,664;573,Implementation,"Call super.clone() within your clone() method, when obtaining a new object.;In some cases, you can eliminate the clone method altogether and use copy constructors."
581,Object Model Violation: Just One of Equals and Hashcode Defined,The product does not maintain equal hashcodes for equal objects.,,573;697,Implementation,Both Equals() and Hashcode() should be defined.
582,"Array Declared Public, Final, and Static","The product declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.",,668,Implementation,In most situations the array should be made private.
583,finalize() Method Declared Public,The product violates secure coding principles for mobile code by declaring a finalize() method public.,,668,Implementation,"If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access."
584,Return Inside Finally Block,"The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.",,705,Implementation,"Do not use a return statement inside the finally block. The finally block should have ""cleanup"" code."
585,Empty Synchronized Block,The product contains an empty synchronized block.,,1071,Implementation,"When you come across an empty synchronized statement, or a synchronized statement in which the code has been commented out, try to determine what the original intentions were and whether or not the synchronized block is still necessary."
586,Explicit Call to Finalize(),The product makes an explicit call to the finalize() method from outside the finalizer.,,1076,Implementation,Do not make explicit calls to finalize(). Use static analysis tools to spot such instances.
587,Assignment of a Fixed Address to a Pointer,The product sets a pointer to a specific address other than NULL or 0.,,344;758,Implementation,Never set a pointer to a fixed address.
588,Attempt to Access Child of a Non-structure Pointer,Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.,,704;758,Implementation,The choice could be made to use a language that is not susceptible to these issues.;Review of type casting operations can identify locations where incompatible types are cast.
589,Call to Non-ubiquitous API,The product uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.,96,474,Architecture and Design;Implementation,Always test your code on any platform on which it is targeted to run on.;Test your code on the newest and oldest platform on which it is targeted to run on.;Develop a system to test for API functions that are not portable.
59,Improper Link Resolution Before File Access ('Link Following'),"The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.",132;17;35;76,706;706,Implementation,
590,Free of Memory not on the Heap,"The product calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc().",,762,Implementation,"Only free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once.;Before freeing a pointer, the programmer should make sure that the pointer was previously allocated on the heap and that the memory belongs to the programmer. Freeing an unallocated pointer will cause undefined behavior in the program.;;Use a language that provides abstractions for memory allocation and deallocation.;Use a tool that dynamically detects memory management problems, such as valgrind."
591,Sensitive Data Storage in Improperly Locked Memory,"The product stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors.",,413,Implementation,Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms.;Check return values to ensure locking operations are successful.
592,DEPRECATED: Authentication Bypass Issues,This weakness has been deprecated because it covered redundant concepts already described in CWE-287.,,,,
593,Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created,The product modifies the SSL context after connection creation has begun.,94,666;1390,Implementation,"Use a language or a library that provides a cryptography framework at a higher level of abstraction.;Most SSL_CTX functions have SSL counterparts that act on SSL-type objects.;Applications should set up an SSL_CTX completely, before creating SSL objects from it."
594,J2EE Framework: Saving Unserializable Objects to Disk,When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.,,1076,Implementation,All objects that become part of session and application scope must implement the java.io.Serializable interface to ensure serializability of containing objects.
595,Comparison of Object References Instead of Object Contents,"The product compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.",,1025,Implementation,"In Java, use the equals() method to compare objects instead of the == operator. If using ==, it is important for performance reasons that your objects are created by a static factory, not by a constructor."
596,DEPRECATED: Incorrect Semantic Object Comparison,This weakness has been deprecated.  It was poorly described and difficult to distinguish from other entries.  It was also inappropriate to assign a separate ID solely because of domain-specific considerations.  Its closest equivalent is CWE-1023.,,,,
597,Use of Wrong Operator in String Comparison,"The product uses the wrong operator when comparing a string, such as using ""=="" when the .equals() method should be used instead.",,595;595;480,Implementation,"Within Java, use .equals() to compare string values."
598,Use of GET Request Method With Sensitive Query Strings,The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that request.,,201,Architecture and Design;Implementation,"When sensitive information is sent, use the POST method (e.g. registration form)."
599,Missing Validation of OpenSSL Certificate,The product uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.,,295,Implementation,Ensure that proper authentication is included in the system design.;Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.
6,J2EE Misconfiguration: Insufficient Session-ID Length,The J2EE application is configured to use an insufficient session ID length.,21;59,334,Architecture and Design;Implementation,"Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.;A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.) With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes. Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years."
600,Uncaught Exception in Servlet ,"The Servlet does not catch all exceptions, which may reveal sensitive debugging information.",,248,Implementation,Implement Exception blocks to handle all types of Exceptions.
601,URL Redirection to Untrusted Site ('Open Redirect'),"A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",178,610;610,Architecture and Design;Implementation,";Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.;;Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).;;Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth."
602,Client-Side Enforcement of Server-Side Security,The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.,162;202;207;208;21;31;383;384;385;386;387;388,693,Architecture and Design;Architecture and Design,";If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.;Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.;Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."
603,Use of Client-Side Authentication,"A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.",,1390;602,Architecture and Design;Implementation,Do not rely on client side data. Always perform server side authentication.
605,Multiple Binds to the Same Port,"When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed.",,675;666,Implementation;Operation,Restrict server socket address to known local addresses.
606,Unchecked Input for Loop Condition,"The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping.",,1284,Implementation,Do not use user-controlled data for loop conditions.;Perform input validation.
607,Public Static Final Field References Mutable Object,"A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.",,471,Implementation,Protect mutable objects by making them private. Restrict access to the getter and setter as well.
608,Struts: Non-private Field in ActionForm Class,"An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter.",,668,Implementation,Make all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided.
609,Double-Checked Locking,"The product uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.",,667,Implementation,"While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the ""volatile"" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references."
61,UNIX Symbolic Link (Symlink) Following,"The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",27,59,Implementation,Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.;
610,Externally Controlled Reference to a Resource in Another Sphere,The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.,219,664,Architecture and Design,
611,Improper Restriction of XML External Entity Reference,"The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.",221,610;610,Implementation,Many XML parsers and validators can be configured to disable external entity expansion.
612,Improper Authorization of Index Containing Sensitive Information,"The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information.",,1230,Architecture and Design;Implementation,
613,Insufficient Session Expiration,"According to WASC, ""Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.""",,672;672,Architecture and Design;Implementation,Set sessions/credentials expiration date.
614,Sensitive Cookie in HTTPS Session Without 'Secure' Attribute,"The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.",102,319,Implementation,Always set the secure attribute when the cookie should sent via HTTPS only.
615,Inclusion of Sensitive Information in Source Code Comments,"While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc.",,540,Implementation,Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.
616,Incomplete Identification of Uploaded File Variables (PHP),"The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname, $varname_size, $varname_name, $varname_type). These variables could be overwritten by attackers, causing the application to process unauthorized files.",,345,Implementation,"Use PHP 4 or later.;If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']));For later PHP versions, reference uploaded files using the $HTTP_POST_FILES or $_FILES variables, and use is_uploaded_file() or move_uploaded_file() to ensure that you are dealing with an uploaded file."
617,Reachable Assertion,"The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.",,670;670,Implementation,Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources);Perform input validation on user data.
618,Exposed Unsafe ActiveX Method,"An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain).",,749,Architecture and Design;Implementation,"If you must expose a method, make sure to perform input validation on all arguments, and protect against all possible vulnerabilities.;Use code signing, although this does not protect against any weaknesses that are already in the control.;Where possible, avoid marking the control as safe for scripting."
619,Dangling Database Cursor ('Cursor Injection'),"If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor ""dangling.""",,402,Implementation,Close cursors immediately after access to them is complete. Ensure that you close cursors if exceptions occur.
62,UNIX Hard Link,"The product, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",,59,Implementation,
620,Unverified Password Change,"When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.",,1390,Architecture and Design;Implementation,"When prompting for a password change, force the user to provide the original password in addition to the new password.;Do not use ""forgotten password"" functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided."
621,Variable Extraction Error,"The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables.",,914,Implementation,"Use allowlists of variable names that can be extracted.;Consider refactoring your code to avoid extraction routines altogether.;In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions."
622,Improper Validation of Function Hook Arguments,"The product adds hooks to user-accessible API functions, but it does not properly validate the arguments. This could lead to resultant vulnerabilities.",,20,Implementation,"Ensure that all arguments are verified, as defined by the API you are protecting.;Drop privileges before invoking such functions, if possible."
623,Unsafe ActiveX Control Marked Safe For Scripting,"An ActiveX control is intended for restricted use, but it has been marked as safe-for-scripting.",,267,Architecture and Design;Implementation,"During development, do not mark it as safe for scripting.;After distribution, you can set the kill bit for the control so that it is not accessible from Internet Explorer."
624,Executable Regular Expression Error,"The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers.",,77;77;77,Implementation,"The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \Q and \E in Perl."
625,Permissive Regular Expression,The product uses a regular expression that does not sufficiently restrict the set of allowed values.,,185,Implementation,"When applicable, ensure that the regular expression marks beginning and ending string patterns, such as ""/^string$/"" for Perl."
626,Null Byte Interaction Error (Poison Null Byte),The product does not properly handle null bytes or NUL characters when passing data between different representations or components.,,147;436,Implementation,Remove null bytes from all incoming strings.
627,Dynamic Variable Evaluation,"In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions.",,914,Implementation,"Refactor the code to avoid dynamic variable evaluation whenever possible.;Use only allowlists of acceptable variable or function names.;For function names, ensure that you are only calling functions that accept the proper number of arguments, to avoid unexpected null arguments."
628,Function Call with Incorrectly Specified Arguments,"The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses.",,573,Implementation,"Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.;Make sure your API's are stable before you use them in production code."
636,Not Failing Securely ('Failing Open'),"When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions.",,657;755,Architecture and Design;Implementation,Subdivide and allocate resources and components so that a failure in one part does not affect the entire product.
637,Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism'),"The product uses a more complex mechanism than necessary, which could lead to resultant weaknesses when the mechanism is not correctly understood, modeled, configured, implemented, or used.",,657,Architecture and Design;Implementation;Operation,"Avoid complex security mechanisms when simpler ones would meet requirements. Avoid complex data models, and unnecessarily complex operations. Adopt architectures that provide guarantees, simplify understanding through elegance and abstraction, and that can be implemented similarly. Modularize, isolate and do not trust complex code, and apply other secure programming principles on these modules (e.g., least privilege) to mitigate vulnerabilities."
638,Not Using Complete Mediation,"The product does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.",104,657;862,Implementation;Operation,"Invalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible.;Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface."
639,Authorization Bypass Through User-Controlled Key,The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.,,863;863;284,Architecture and Design,"For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.;Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected.;Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering."
64,Windows Shortcut Following (.LNK),"The product, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",,59,Operation,
640,Weak Password Recovery Mechanism for Forgotten Password,"The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.",50,1390;287,Architecture and Design;Implementation,Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.;Do not use standard weak security questions and use several security questions.;Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses.;Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record.;Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.;Assign a new temporary password rather than revealing the original password.
641,Improper Restriction of Names for Files and Other Resources,"The product constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.",,99,Architecture and Design;Implementation,"Do not allow users to control names of resources used on the server side.;Perform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.;Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed."
642,External Control of Critical State Data,"The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.",21;31,668,Architecture and Design;Implementation,"Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.;;Store state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.;;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.;Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.;Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.;Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."
643,Improper Neutralization of Data within XPath Expressions ('XPath Injection'),"The product uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.",,943;91,Implementation,"Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane.;Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context."
644,Improper Neutralization of HTTP Headers for Scripting Syntax,"The product does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash.",,116,Implementation,Perform output validation in order to filter/escape/encode unsafe data that is being passed from the server in an HTTP response header.;Disable script execution functionality in the clients' browser.
645,Overly Restrictive Account Lockout Mechanism,"The product contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.",2,287,Architecture and Design,"Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.;Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout.;Consider alternatives to account lockout that would still be effective against password brute force attacks, such as presenting the user machine with a puzzle to solve (makes it do some computation)."
646,Reliance on File Name or Extension of Externally-Supplied File,"The product allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.",209,345,Architecture and Design;Implementation;Operation,Make decisions on the server side based on file content and not on file name or extension.
647,Use of Non-Canonical URL Paths for Authorization Decisions,The product defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.,,863,Implementation;Operation,Make access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form.;Reject all alternate path encodings that are not in the expected canonical form.
648,Incorrect Use of Privileged APIs,The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.,107;234,269,Architecture and Design;Implementation;Operation,"Before calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call.;Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.;If privileged APIs make certain assumptions about data, context or state validity that are passed by the caller, the calling code must ensure that these assumptions have been validated prior to making the call.;If privileged APIs do not shed their privilege prior to returning to the calling code, then calling code needs to shed these privileges immediately and safely right after the call to the privileged APIs. In particular, the calling code needs to ensure that a privileged thread of execution will never be returned to the user or made available to user-controlled processes.;Only call privileged APIs from safe, consistent and expected state.;Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges)."
649,Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking,"The product uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the product does not use integrity checks to detect if those inputs have been modified.",463,345,Architecture and Design;Implementation,"Protect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side.;Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.;Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.;Obfuscation should not be relied upon. If encryption is used, it needs to be properly applied (i.e. proven algorithm and implementation, use padding, use random initialization vector, user proper encryption mode). Even with proper encryption where the ciphertext does not leak information about the plaintext or reveal its structure, compromising integrity is possible (although less likely) without the provision of the integrity service."
65,Windows Hard Link,"The product, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",,59,Implementation;Operation,
650,Trusting HTTP Permission Methods on the Server Side,"The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state.",,436,Architecture and Design;Implementation;Operation,Configure ACLs on the server side to ensure that proper level of access control is defined for each accessible resource representation.
651,Exposure of WSDL File Containing Sensitive Information,The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return).,,538,Implementation;Operation,"Limit access to the WSDL file as much as possible. If services are provided only to a limited number of entities, it may be better to provide WSDL privately to each of these entities than to publish WSDL publicly.;Make sure that WSDL does not describe methods that should not be publicly accessible. Make sure to protect service methods that should not be publicly accessible with access controls.;Do not use method names in WSDL that might help an adversary guess names of private methods/resources used by the service."
652,Improper Neutralization of Data within XQuery Expressions ('XQuery Injection'),"The product uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.",,943;91,Implementation,"Use parameterized queries. This will help ensure separation between data plane and control plane.;Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XQL queries is safe in that context."
653,Improper Isolation or Compartmentalization,"The product does not properly compartmentalize or isolate functionality, processes, or resources that require different privilege levels, rights, or permissions.",,657;693,Architecture and Design;Implementation,"Break up privileges between different modules, objects, or entities. Minimize the interfaces between modules and require strong access control between them."
654,Reliance on a Single Factor in a Security Decision,"A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.",16;274;49;55;560;565;600;652;653;70,657;693,Architecture and Design;Implementation;Operation,"Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).;Use redundant access rules on different choke points (e.g., firewalls)."
655,Insufficient Psychological Acceptability,"The product has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose.",,657;693,Architecture and Design,"Where possible, perform human factors and usability studies to identify where your product's security mechanisms are difficult to use, and why.;Make the security mechanism as seamless as possible, while also providing the user with sufficient details when a security decision produces unexpected results."
656,Reliance on Security Through Obscurity,"The product uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.",,657;693,Architecture and Design;Implementation,"Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.;When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication."
657,Violation of Secure Design Principles,The product violates well-established principles for secure design.,,710,Architecture and Design;Implementation;Operation,
66,Improper Handling of File Names that Identify Virtual Resources,"The product does not handle or incorrectly handles a file name that identifies a ""virtual"" resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file.",,706,Implementation;Operation,
662,Improper Synchronization,"The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.",25;26;27;29,664;691,Architecture and Design;Implementation,Use industry standard APIs to synchronize your code.
663,Use of a Non-reentrant Function in a Concurrent Context,The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.,29,662,Implementation,"Use reentrant functions if available.;Add synchronization to your non-reentrant function.;In Java, use the ReentrantLock Class."
664,Improper Control of a Resource Through its Lifetime,"The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.",196;21;60;61;62,,Implementation,Use Static analysis tools to check for unreleased resources.
665,Improper Initialization,"The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.",26;29,664,Implementation;Operation,";Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.;Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.;Pay close attention to complex conditionals that affect initialization, since some conditions might not perform the initialization.;Avoid race conditions (CWE-362) during initialization routines.;Run or compile your product with settings that generate warnings about uninitialized variables or data.;Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."
666,Operation on Resource in Wrong Phase of Lifetime,"The product performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors.",,664,Implementation,Follow the resource's lifecycle from creation to release.
667,Improper Locking,"The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.",25;26;27,662;662;662;662,Architecture and Design;Implementation,Use industry standard APIs to implement locking mechanism.
668,Exposure of Resource to Wrong Sphere,"The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.",,664,Architecture and Design;Implementation;Operation,
669,Incorrect Resource Transfer Between Spheres,"The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource.",,664,Architecture and Design;Implementation;Operation,
67,Improper Handling of Windows Device Names,"The product constructs pathnames from user input, but it does not handle or incorrectly handles a pathname containing a Windows device name such as AUX or CON. This typically leads to denial of service or an information exposure when the application attempts to process the pathname as a regular file.",,66,Implementation;Operation,Be familiar with the device names in the operating system where your system is deployed. Check input for these device names.
670,Always-Incorrect Control Flow Implementation,"The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.",,691,Implementation,
671,Lack of Administrator Control over Security,The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator.,,657,Architecture and Design;Implementation,
672,Operation on a Resource after Expiration or Release,"The product uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked.",,666,Implementation;Operation,
673,External Influence of Sphere Definition,The product does not prevent the definition of control spheres from external actors.,,664,Architecture and Design;Implementation,
674,Uncontrolled Recursion,"The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.",230;231,834,Implementation,Ensure an end condition will be reached under all logic conditions.  The end condition may include testing against the depth of recursion and exiting with an error if the recursion goes too deep. The complexity of the end condition contributes to the effectiveness of this action.;Increase the stack size.
675,Multiple Operations on Resource in Single-Operation Context,"The product performs the same operation on a resource two or more times, when the operation should only be applied once.",,573,Implementation,
676,Use of Potentially Dangerous Function,"The product invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely.",,1177,Implementation,"Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the ""banned.h"" include file from Microsoft's SDL. [REF-554] [REF-7]"
680,Integer Overflow to Buffer Overflow,"The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.",10;100;14;24;45;46;47;67;8;9;92,190,,
681,Incorrect Conversion between Numeric Types,"When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.",,704;704,Implementation,Avoid making conversion between numeric types. Always check for the allowed ranges.
682,Incorrect Calculation,The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.,128;129,,Implementation,"Understand your programming language's underlying representation and how it interacts with numeric calculation. Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, ""not-a-number"" calculations, and how your language handles numbers that are too large or too small for its underlying representation.;Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.;Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity.;;;Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.;Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.;Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results."
683,Function Call With Incorrect Order of Arguments,"The product calls a function, procedure, or routine, but the caller specifies the arguments in an incorrect order, leading to resultant weaknesses.",,628,Implementation,"Use the function, procedure, or routine as specified.;Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type."
684,Incorrect Provision of Specified Functionality,"The code does not function according to its published specifications, potentially leading to incorrect usage.",,710,Implementation,Ensure that your code strictly conforms to specifications.
685,Function Call With Incorrect Number of Arguments,"The product calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses.",,628,Implementation,Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.
686,Function Call With Incorrect Argument Type,"The product calls a function, procedure, or routine, but the caller specifies an argument that is the wrong data type, which may lead to resultant weaknesses.",,628,Implementation,Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.
687,Function Call With Incorrectly Specified Argument Value,"The product calls a function, procedure, or routine, but the caller specifies an argument that contains the wrong value, which may lead to resultant weaknesses.",,628,Implementation,
688,Function Call With Incorrect Variable or Reference as Argument,"The product calls a function, procedure, or routine, but the caller specifies the wrong variable or reference as one of the arguments, which may lead to undefined behavior and resultant weaknesses.",,628,Implementation,Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.
689,Permission Race Condition During Resource Copy,"The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place.",26;27,362,Implementation,
69,Improper Handling of Windows ::DATA Alternate Data Stream,"The product does not properly prevent access to, or detect usage of, alternate data streams (ADS).",168,66,Implementation,Software tools are capable of finding ADSs on your system.;Ensure that the source code correctly parses the filename to read or write to the correct stream.
690,Unchecked Return Value to NULL Pointer Dereference,"The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference.",,252,Implementation,
691,Insufficient Control Flow Management,"The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways.",29,,Architecture and Design;Implementation,
692,Incomplete Denylist to Cross-Site Scripting,"The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.",120;267;71;80;85,184,,
693,Protection Mechanism Failure,The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.,1;107;127;17;20;22;237;36;477;480;51;57;59;65;668;74;87,,Architecture and Design;Implementation;Operation,
694,Use of Multiple Resources with Duplicate Identifier,"The product uses multiple resources that can have the same identifier, in a context in which unique identifiers are required.",,99;573,Architecture and Design;Implementation,"Where possible, use unique identifiers. If non-unique identifiers are detected, then do not operate any resource with a non-unique identifier and report the error appropriately."
695,Use of Low-Level Functionality,The product uses low-level functionality that is explicitly prohibited by the framework or specification under which the product is supposed to operate.,36,573,Implementation,
696,Incorrect Behavior Order,"The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.",463,691,Architecture and Design;Implementation,
697,Incorrect Comparison,"The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.",10;120;14;15;182;24;267;3;41;43;44;45;46;47;52;53;6;64;67;7;71;73;78;79;8;80;88;9;92,,Implementation,
698,Execution After Redirect (EAR),"The web application sends a redirect to another location, but instead of exiting, it executes additional code.",,705;670,Implementation,
7,J2EE Misconfiguration: Missing Custom Error Page,The default error page of a web application should not display sensitive information about the product.,,756,Implementation,"Handle exceptions appropriately in source code.;Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.;Do not attempt to process an error or attempt to mask it.;Verify return values are correct and do not supply sensitive information about the system."
703,Improper Check or Handling of Exceptional Conditions,The product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.,,,Architecture and Design;Implementation;Operation,
704,Incorrect Type Conversion or Cast,"The product does not correctly convert an object, resource, or structure from one type to a different type.",,664,Implementation,
705,Incorrect Control Flow Scoping,The product does not properly return control flow to the proper location after it has completed a task or detected an unusual condition.,,691,Implementation,
706,Use of Incorrectly-Resolved Name or Reference,"The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.",159;177;48;641,664,Architecture and Design;Implementation,
707,Improper Neutralization,The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.,250;276;277;278;279;3;43;468;52;53;64;7;78;79;83;84,,Implementation,
708,Incorrect Ownership Assignment,"The product assigns an owner to a resource, but the owner is outside of the intended control sphere.",,282,Architecture and Design;Implementation;Operation,Periodically review the privileges and their owners.;Use automated tools to check for privilege settings.
71,DEPRECATED: Apple '.DS_Store',This entry has been deprecated as it represents a specific observed example of a UNIX Hard Link weakness type rather than its own individual weakness type. Please refer to CWE-62.,,,,
710,Improper Adherence to Coding Standards,"The product does not follow certain coding rules for development, which can lead to resultant weaknesses or increase the severity of the associated vulnerabilities.",,,Architecture and Design;Implementation,"Document and closely follow coding standards.;Where possible, use automated tools to enforce the standards."
72,Improper Handling of Apple HFS+ Alternate Data Stream Path,The product does not properly handle special paths that may identify the data or resource fork of a file on the HFS+ file system.,,66,Implementation,
73,External Control of File Name or Path,The product allows user input to control or influence paths or file names that are used in filesystem operations.,13;267;64;72;76;78;79;80,642;610;20,Architecture and Design;Implementation,"When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to ""inbox.txt"" and ID 2 could map to ""profile.txt"". Features such as the ESAPI AccessReferenceMap provide this capability.;;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes "".."" sequences and symbolic links (CWE-23, CWE-59).;Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.;If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.;Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."
732,Incorrect Permission Assignment for Critical Resource,The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.,1;122;127;17;180;206;234;60;61;62;642,285;668,Architecture and Design;Implementation;Installation;Operation,"When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user) [REF-62], and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party.;Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207];;During program startup, explicitly set the default permissions or umask to the most restrictive setting possible. Also set the appropriate permissions during program installation. This will prevent you from inheriting insecure permissions from any user who installs or runs the program.;For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.;Do not suggest insecure configuration changes in documentation, especially if those configurations can extend to resources and other programs that are outside the scope of the application.;Do not assume that a system administrator will manually change the configuration to the settings that are recommended in the software's manual.;Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.;When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access."
733,Compiler Optimization Removal or Modification of Security-critical Code,"The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.",10;24;46;8;9,1038,,
74,Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'),"The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",10;101;105;108;120;13;135;14;24;250;267;273;28;3;34;42;43;45;46;47;51;52;53;6;64;67;7;71;72;76;78;79;8;80;83;84;9,707,Implementation,Programming languages and supporting technologies might be chosen which are not subject to these issues.;Utilize an appropriate mix of allowlist and denylist parsing to filter control-plane syntax from all input.
749,Exposed Dangerous Method or Function,"The product provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.",500,284,Architecture and Design;Implementation,"If you must expose a method, make sure to perform input validation on all arguments, limit access to authorized parties, and protect against all possible vulnerabilities.;"
75,Failure to Sanitize Special Elements into a Different Plane (Special Element Injection),The product does not adequately filter user-controlled input for special elements with control implications.,81;93,74,Implementation,Programming languages and supporting technologies might be chosen which are not subject to these issues.;Utilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.
754,Improper Check for Unusual or Exceptional Conditions,The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.,,703,Implementation,";Check the results of all functions that return a value and verify that the value is expected.;If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).;;;If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.;Use system limits, which should help to prevent resource exhaustion. However, the product should still handle low resource conditions since they may still occur."
755,Improper Handling of Exceptional Conditions,The product does not handle or incorrectly handles an exceptional condition.,,703,Implementation,
756,Missing Custom Error Page,"The product does not return custom error pages to the user, possibly exposing sensitive information.",,755,,
757,Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade'),"A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.",220;606;620,693,Architecture and Design,
758,"Reliance on Undefined, Unspecified, or Implementation-Defined Behavior","The product uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity.",,710,,
759,Use of a One-Way Hash without a Salt,"The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product does not also use a salt as part of the input.",,916,Implementation,";If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.;When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."
76,Improper Neutralization of Equivalent Special Elements,"The product correctly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.",,75,Implementation,Programming languages and supporting technologies might be chosen which are not subject to these issues.;Utilize an appropriate mix of allowlist and denylist parsing to filter equivalent special element syntax from all input.
760,Use of a One-Way Hash with a Predictable Salt,"The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product uses a predictable salt as part of the input.",,916,Implementation,";If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password."
761,Free of Pointer not at Start of Buffer,"The product calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer.",,763;404,Implementation,"When utilizing pointer arithmetic to traverse a buffer, use a separate variable to track progress through memory and preserve the originally allocated address for later freeing.;When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.;;Use a language that provides abstractions for memory allocation and deallocation.;Use a tool that dynamically detects memory management problems, such as valgrind."
762,Mismatched Memory Management Routines,"The product attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource.",,763;404,Implementation,"Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().;;;Use a language that provides abstractions for memory allocation and deallocation.;Use a tool that dynamically detects memory management problems, such as valgrind."
763,Release of Invalid Pointer or Reference,"The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly.",,404;404;404,Implementation,"Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().;When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.;;Use a language that provides abstractions for memory allocation and deallocation.;Use a tool that dynamically detects memory management problems, such as valgrind."
764,Multiple Locks of a Critical Resource,"The product locks a critical resource more times than intended, leading to an unexpected state in the system.",,667;675;662;662,Implementation,"When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again."
765,Multiple Unlocks of a Critical Resource,"The product unlocks a critical resource more times than intended, leading to an unexpected state in the system.",,667;675,Implementation,"When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the product acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again."
766,Critical Data Element Declared Public,"The product declares a critical variable, field, or member to be public when intended security policy requires it to be private.",,732;1061,Implementation,"Data should be private, static, and final whenever possible. This will assure that your code is protected by instantiating early, preventing access, and preventing tampering."
767,Access to Critical Private Variable via Public Method,The product defines a public method that reads or modifies a private variable.,,668,Implementation,Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.
768,Incorrect Short Circuit Evaluation,"The product contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring.",,691,Implementation,Minimizing the number of statements in a conditional that produce side effects will help to prevent the likelihood of short circuit evaluation to alter control flow in an unexpected way.
769,DEPRECATED: Uncontrolled File Descriptor Consumption,This entry has been deprecated because it was a duplicate of CWE-774. All content has been transferred to CWE-774.,,,,
77,Improper Neutralization of Special Elements used in a Command ('Command Injection'),"The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",136;15;183;248;40;43;75;76,74;74,Implementation,"If at all possible, use library calls rather than external processes to recreate the desired functionality.;If possible, ensure that all external commands called from the program are statically created.;;Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.;Assign permissions that prevent the user from accessing/opening privileged files."
770,Allocation of Resources Without Limits or Throttling,"The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",125;130;147;197;229;230;231;469;482;486;487;488;489;490;491;493;494;495;496;528,400;665;400,Architecture and Design;Implementation;Operation;System Configuration,"Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.;Limit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoid CWE-410.;Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.;;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;Ensure that protocols have specific limits of scale placed on them.;;"
771,Missing Reference to Active Allocated Resource,"The product does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed.",,400,Implementation,
772,Missing Release of Resource after Effective Lifetime,"The product does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.",469,404;404;404;404,Implementation,";It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.;"
773,Missing Reference to Active File Descriptor or Handle,"The product does not properly maintain references to a file descriptor or handle, which prevents that file descriptor/handle from being reclaimed.",,771,Implementation,
774,Allocation of File Descriptors or Handles Without Limits or Throttling,"The product allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor.",,770,Architecture and Design;Implementation,
775,Missing Release of File Descriptor or Handle after Effective Lifetime,"The product does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed.",,772;404;404,Implementation,
776,Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion'),"The product uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.",197,674;674;405,Implementation;Operation,"If possible, prohibit the use of DTDs or use an XML parser that limits the expansion of recursive DTD entities.;Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content."
777,Regular Expression without Anchors,"The product uses a regular expression to perform neutralization, but the regular expression is not anchored and may allow malicious or malformed data to slip through.",,625,Implementation,"Be sure to understand both what will be matched and what will not be matched by a regular expression. Anchoring the ends of the expression will allow the programmer to define an allowlist strictly limited to what is matched by the text in the regular expression. If you are using a package that only matches one line by default, ensure that you can match multi-line inputs if necessary."
778,Insufficient Logging,"When a security-critical event occurs, the product either does not record the event or omits important details about the event when logging it.",,223;693,Operation,"Use a centralized logging mechanism that supports multiple levels of detail.;Ensure that all security-related successes and failures can be logged. When storing data in the cloud (e.g., AWS S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to enable and capture detailed logging information.;Be sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems, including unexpected costs when using a cloud environment.;To enable storage logging using Azure's Portal, navigate to the name of the Storage Account, locate Monitoring (CLASSIC) section, and select Diagnostic settings (classic). For each of the various properties (blob, file, table, queue), ensure the status is properly set for the desired logging data. If using PowerShell, the Set-AzStorageServiceLoggingProperty command could be called using appropriate -ServiceType, -LoggingOperations, and -RetentionDays arguments."
779,Logging of Excessive Data,"The product logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack.",,400,Operation,"Suppress large numbers of duplicate log messages and replace them with periodic summaries. For example, syslog may include an entry that states ""last message repeated X times"" when recording repeated events.;Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.;Adjust configurations appropriately when the product is transitioned from a debug state to production."
78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),"The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",108;15;43;6;88,77;74;77;77,Implementation,"If at all possible, use library calls rather than external processes to recreate the desired functionality.;;For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).;If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.;;;When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.;Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's ""-T"" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).;Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's ""-T"" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).;;Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.;Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."
780,Use of RSA Algorithm without OAEP,"The product uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.",,327,Implementation,
781,Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code,"The product defines an IOCTL that uses METHOD_NEITHER for I/O, but it does not validate or incorrectly validates the addresses that are provided.",,1285,Implementation,"If METHOD_NEITHER is required for the IOCTL, then ensure that all user-space addresses are properly validated before they are first accessed. The ProbeForRead and ProbeForWrite routines are available for this task. Also properly protect and manage the user-supplied buffers, since the I/O Manager does not do this when METHOD_NEITHER is being used. See References.;If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.;If the IOCTL is part of a driver that is only intended to be accessed by trusted users, then use proper access control for the associated device or device namespace. See References."
782,Exposed IOCTL with Insufficient Access Control,"The product implements an IOCTL with functionality that should be restricted, but it does not properly enforce access control for the IOCTL.",,749,Architecture and Design;Implementation,"In Windows environments, use proper access control for the associated device or device namespace. See References."
783,Operator Precedence Logic Error,The product uses an expression in which operator precedence causes incorrect logic to be used.,,670,Implementation,"Regularly wrap sub-expressions in parentheses, especially in security-critical code."
784,Reliance on Cookies without Validation and Integrity Checking in a Security Decision,"The product uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user.",,807;565,Implementation,"Avoid using cookie data for a security-related decision.;Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.;Add integrity checks to detect tampering.;Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client."
785,Use of Path Manipulation Function without Maximum-sized Buffer,"The product invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX.",,676;120;20,Implementation,Always specify output buffers large enough to handle the maximum-size possible result from path manipulation functions.
786,Access of Memory Location Before Start of Buffer,The product reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.,,119;119;119,,
787,Out-of-bounds Write,"The product writes data past the end, or before the beginning, of the intended buffer.",,119;119;119;119,Implementation,";;;;;;Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available."
788,Access of Memory Location After End of Buffer,The product reads or writes to a buffer using an index or pointer that references a memory location after the end of the buffer.,,119;119;119,,
789,Memory Allocation with Excessive Size Value,"The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.",,770,Implementation,"Perform adequate input validation against any value that influences the amount of memory that is allocated. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary.;Run your program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized."
79,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.,209;588;591;592;63;85,74;74,Implementation,";;Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.;;With Struts, write all data from form beans with the bean's filter attribute set to true.;To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.;;When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.;Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.;When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."
790,Improper Filtering of Special Elements,"The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",,138,Implementation,
791,Incomplete Filtering of Special Elements,"The product receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.",,790,Implementation,
792,Incomplete Filtering of One or More Instances of Special Elements,"The product receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component.",,791,Implementation,
793,Only Filtering One Instance of a Special Element,"The product receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component.",,792,Implementation,
794,Incomplete Filtering of Multiple Instances of Special Elements,"The product receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component.",,792,Implementation,
795,Only Filtering Special Elements at a Specified Location,"The product receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component.",,791,Implementation,
796,Only Filtering Special Elements Relative to a Marker,"The product receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. ""at the beginning/end of a string; the second argument""), thereby missing remaining special elements that may exist before sending it to a downstream component.",,795,Implementation,
797,Only Filtering Special Elements at an Absolute Position,"The product receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. ""byte number 10""), thereby missing remaining special elements that may exist before sending it to a downstream component.",,795,Implementation,
798,Use of Hard-coded Credentials,"The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.",191;70,1391;287;344;671,Architecture and Design,";For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a ""first login"" mode that requires the user to enter a unique strong password or key.;If the product must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.;;"
799,Improper Control of Interaction Frequency,"The product does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests.",,691,Architecture and Design;Implementation;Operation,
8,J2EE Misconfiguration: Entity Bean Declared Remote,"When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities.",,668,Architecture and Design;Implementation,"Declare Java beans ""local"" when possible. When a bean must be remotely accessible, make sure that sensitive information is not exposed, and ensure that the application logic performs appropriate validation of any data that might be modified by an attacker."
80,Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as ""<"", "">"", and ""&"" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.",18;193;32;86,79,Implementation,"Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.;;With Struts, write all data from form beans with the bean's filter attribute set to true.;To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set."
804,Guessable CAPTCHA,"The product uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor.",,863;1390,Architecture and Design;Implementation,
805,Buffer Access with Incorrect Length Value,"The product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.",100;256,119;119;119,Implementation,";;;;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the product or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;"
806,Buffer Access Using Size of Source Buffer,"The product uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.",,805,Implementation,"Use an abstraction library to abstract away risky APIs. Examples include the Safe C String Library (SafeStr) by Viega, and the Strsafe.h library from Microsoft. This is not a complete solution, since many buffer overflows are not related to strings.;;Programmers should adhere to the following rules when allocating and managing their applications memory: Double check that your buffer is as large as you specify. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if calling this function in a loop and make sure there is no danger of writing past the allocated space. Truncate all input strings to a reasonable length before passing them to the copy and concatenation functions;;;Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution."
807,Reliance on Untrusted Inputs in a Security Decision,"The product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.",,693,Architecture and Design;Implementation,";;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.;"
81,Improper Neutralization of Script in an Error Message Web Page,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page.",198,79,Implementation;Operation,"Do not write user-controlled input to error pages.;Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.;;With Struts, write all data from form beans with the bean's filter attribute set to true.;To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set."
82,Improper Neutralization of Script in Attributes of IMG Tags in a Web Page,"The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags, such as the src attribute.",,83,Implementation,";To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set."
820,Missing Synchronization,The product utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource.,,662;662;662,,
821,Incorrect Synchronization,"The product utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource.",,662;662;662,,
822,Untrusted Pointer Dereference,"The product obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer.",129,119;119;119,,
823,Use of Out-of-range Pointer Offset,"The product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.",129,119;119;119,,
824,Access of Uninitialized Pointer,The product accesses or uses a pointer that has not been initialized.,,119;119;119;119,,
825,Expired Pointer Dereference,"The product dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid.",,119;119;119;672,,"Choose a language that provides automatic memory management.;When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy."
826,Premature Release of Resource During Expected Lifetime,The product releases a resource that is still intended to be used by itself or another actor.,,666,,
827,Improper Control of Document Type Definition,"The product does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the product to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker.",,706;829,Implementation,
828,Signal Handler with Functionality that is not Asynchronous-Safe,"The product defines a signal handler that contains code sequences that are not asynchronous-safe, i.e., the functionality is not reentrant, or it can be interrupted.",,364,,";Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product."
829,Inclusion of Functionality from Untrusted Control Sphere,"The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.",175;201;228;251;252;253;263;538;549;640;660;695;698,669;669,Implementation,"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.;;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;;;;Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth."
83,Improper Neutralization of Script in Attributes in a Web Page,"The product does not neutralize or incorrectly neutralizes ""javascript:"" or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.",243;244;588,79,Implementation,"Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.;;With Struts, write all data from form beans with the bean's filter attribute set to true.;To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set."
830,Inclusion of Web Functionality from an Untrusted Source,"The product includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the product, potentially granting total access and control of the product to the untrusted source.",,829,Implementation,
831,Signal Handler Function Associated with Multiple Signals,The product defines a function that is used as a handler for more than one signal.,,364,,
832,Unlock of a Resource that is not Locked,The product attempts to unlock a resource that is not locked.,,667,,
833,Deadlock,"The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.",25,667;662,,
834,Excessive Iteration,The product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.,,691,,
835,Loop with Unreachable Exit Condition ('Infinite Loop'),"The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",,834;834,,
836,Use of Password Hash Instead of Password for Authentication,"The product records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.",644;652,1390,Implementation,
837,"Improper Enforcement of a Single, Unique Action","The product requires that an actor should only be able to perform an action once, or to have only one unique action, but the product does not enforce or improperly enforces this restriction.",,799,,
838,Inappropriate Encoding for Output Context,"The product uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.",468,116;116,,"Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.;Where possible, use communications protocols or data formats that provide strict boundaries between control and data. If this is not feasible, ensure that the protocols or formats allow the communicating components to explicitly state which encoding/decoding method is being used. Some template frameworks provide built-in support.;"
839,Numeric Range Comparison Without Minimum Check,"The product checks a value to ensure that it is less than or equal to a maximum, but it does not also verify that the value is greater than or equal to the minimum.",,1023,,"If the number to be used is always expected to be positive, change the variable type from signed to unsigned or size_t.;If the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive."
84,Improper Neutralization of Encoded URI Schemes in a Web Page,The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings.,,79,Implementation,"Resolve all URIs to absolute or canonical representations before processing.;Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.;;With Struts, write all data from form beans with the bean's filter attribute set to true.;To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set."
841,Improper Enforcement of Behavioral Workflow,"The product supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence.",,691,Implementation,
842,Placement of User into Incorrect Group,The product or the administrator places a user into an incorrect group.,,286,Implementation;Operation,
843,Access of Resource Using Incompatible Type ('Type Confusion'),"The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.",,704;704,Implementation,
85,Doubled Character XSS Manipulations,The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.,245,79,Implementation,"Resolve all filtered input to absolute or canonical representations before processing.;Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.;;With Struts, write all data from form beans with the bean's filter attribute set to true.;To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set."
86,Improper Neutralization of Invalid Characters in Identifiers in Web Pages,"The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.",247;73;85,79;436,Implementation,";To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set."
862,Missing Authorization,The product does not perform an authorization check when an actor attempts to access a resource or perform an action.,665,285;284,Architecture and Design;Implementation;Operation,";Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].;;;Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a ""default deny"" policy when defining these ACLs."
863,Incorrect Authorization,"The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",,285;284,Architecture and Design;Implementation;Operation,";Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].;;;Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a ""default deny"" policy when defining these ACLs."
87,Improper Neutralization of Alternate XSS Syntax,The product does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.,199,79,Implementation,"Resolve all input to absolute or canonical representations before processing.;Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.;;With Struts, write all data from form beans with the bean's filter attribute set to true.;To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set."
88,Improper Neutralization of Argument Delimiters in a Command ('Argument Injection'),"The product constructs a string for a command to be executed by a separate component
in another control sphere, but it does not properly delimit the
intended arguments, options, or switches within that command string.",137;174;41;460;88,77;74;77;77,Implementation,"Where possible, avoid building a single string that contains the command and its arguments.  Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command.  For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments.  In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.;Understand all the potential areas where untrusted inputs can enter your product: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.;;Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.;;When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.;When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.;Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.;Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results."
89,Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),"The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.",108;109;110;470;66;7,943;74,Implementation;Implementation,";;;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;;When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.;;Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.;When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."
9,J2EE Misconfiguration: Weak Access Permissions for EJB Methods,"If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the product.",,266,Architecture and Design;Implementation,Follow the principle of least privilege when assigning access rights to EJB methods. Permission to invoke EJB methods should not be granted to the ANYONE role.
90,Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection'),"The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.",136,943,Implementation,
908,Use of Uninitialized Resource,The product uses or accesses a resource that has not been initialized.,,665;665,Implementation,"Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps.;Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.;Avoid race conditions (CWE-362) during initialization routines.;Run or compile the product with settings that generate warnings about uninitialized variables or data."
909,Missing Initialization of Resource,The product does not initialize a critical resource.,,665;665,Implementation,"Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all specified steps.;Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.;Avoid race conditions (CWE-362) during initialization routines.;Run or compile your product with settings that generate warnings about uninitialized variables or data."
91,XML Injection (aka Blind XPath Injection),"The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.",250;83,74;74,Implementation,
910,Use of Expired File Descriptor,The product uses or accesses a file descriptor after it has been closed.,,672,Implementation,
911,Improper Update of Reference Count,"The product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.",,664,Implementation,
912,Hidden Functionality,"The product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.",133;190,684,Architecture and Design;Implementation,"Always verify the integrity of the product that is being installed.;Conduct a code coverage analysis using live testing, then closely inspect any code that is not covered."
913,Improper Control of Dynamically-Managed Code Resources,"The product does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements.",,664,Architecture and Design;Implementation,"For any externally-influenced input, check the input against an allowlist of acceptable values.;Refactor the code so that it does not need to be dynamically managed."
914,Improper Control of Dynamically-Identified Variables,The product does not properly restrict reading from or writing to dynamically-identified variables.,,99;913,Implementation,"For any externally-influenced input, check the input against an allowlist of internal program variables that are allowed to be modified.;Refactor the code so that internal program variables do not need to be dynamically identified."
915,Improperly Controlled Modification of Dynamically-Determined Object Attributes,"The product receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.",,913,Architecture and Design;Implementation,";If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.;For any externally-influenced input, check the input against an allowlist of internal object attributes or fields that are allowed to be modified.;Refactor the code so that object attributes or fields do not need to be dynamically identified, and only expose getter/setter functionality for the intended attributes."
916,Use of Password Hash With Insufficient Computational Effort,"The product generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.",55,328;327,Architecture and Design,";When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."
917,Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection'),"The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.",,77;74;77;77,Architecture and Design;Implementation,"Avoid adding user-controlled data into an expression interpreter when possible.;;The framework or tooling might allow the developer to disable or deactivate the processing of EL expressions, such as setting the isELIgnored attribute for a JSP page to ""true""."
918,Server-Side Request Forgery (SSRF),"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",664,441;610,Architecture and Design;Implementation,
92,DEPRECATED: Improper Sanitization of Custom Special Characters,"This entry has been deprecated. It originally came from PLOVER, which sometimes defined ""other"" and ""miscellaneous"" categories in order to satisfy exhaustiveness requirements for taxonomies. Within the context of CWE, the use of a more abstract entry is preferred in mapping situations. CWE-75 is a more appropriate mapping.",,,,
920,Improper Restriction of Power Consumption,"The product operates in an environment in which power is a limited resource that cannot be automatically replenished, but the product does not properly restrict the amount of power that its operation consumes.",,400;400,Architecture and Design,
921,Storage of Sensitive Data in a Mechanism without Access Control,The product stores sensitive information in a file system or device that does not have built-in access control.,,922,Architecture and Design,
922,Insecure Storage of Sensitive Information,The product stores sensitive information without properly limiting read or write access by unauthorized actors.,,664,Architecture and Design;Implementation;System Configuration,
923,Improper Restriction of Communication Channel to Intended Endpoints,"The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.",161;481;501;697,284,Architecture and Design,
924,Improper Enforcement of Message Integrity During Transmission in a Communication Channel,"The product establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission.",,345;345,Architecture and Design,
925,Improper Verification of Intent by Broadcast Receiver,The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.,499,940,Architecture and Design,"Before acting on the Intent, check the Intent Action to make sure it matches the expected System action."
926,Improper Export of Android Application Components,"The Android application exports a component for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains.",,285,Architecture and Design,"If they do not need to be shared by other applications, explicitly mark components with android:exported=""false"" in the application manifest.;If you only intend to use exported components between related apps under your control, use android:protectionLevel=""signature"" in the xml manifest to restrict access to applications signed by you.;Limit Content Provider permissions (read/write) as appropriate.;Limit Content Provider permissions (read/write) as appropriate."
927,Use of Implicit Intent for Sensitive Communication,The Android application uses an implicit intent for transmitting sensitive data to other applications.,,285;668,Architecture and Design,"If the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used."
93,Improper Neutralization of CRLF Sequences ('CRLF Injection'),"The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.",15;81,74,Implementation,Avoid using CRLF as a special sequence.;Appropriately filter or quote CRLF sequences in user-controlled input.
939,Improper Authorization in Handler for Custom URL Scheme,"The product uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.",,862,Implementation,
94,Improper Control of Generation of Code ('Code Injection'),"The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",242;35;77,74;74;913,Implementation,"Refactor your program so that you do not have to dynamically generate code.;;;Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.;Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.;Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's ""-T"" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).;Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's ""-T"" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).;"
940,Improper Verification of Source of a Communication Channel,"The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.",500;594;595;596,923;346,Architecture and Design;Implementation,
941,Incorrectly Specified Destination in a Communication Channel,"The product creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor.",,923,Architecture and Design;Implementation,
942,Permissive Cross-domain Policy with Untrusted Domains,The product uses a cross-domain policy file that includes domains that should not be trusted.,,863;923;183,Implementation;Architecture and Design,"Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.;For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.;For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server."
943,Improper Neutralization of Special Elements in Data Query Logic,"The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.",676,74,Implementation,
95,Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection'),"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. ""eval"").",35,94,Implementation;Implementation,"If possible, refactor your code so that it does not need to use eval() at all.;;;"
96,Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection'),"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",35;73;77;81;85,94,Implementation;Implementation,;Perform proper output validation and escaping to neutralize all code syntax from data written to code files.
97,Improper Neutralization of Server-Side Includes (SSI) Within a Web Page,"The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.",101;35,96,Implementation,
98,Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion'),"The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in ""require,"" ""include,"" or similar functions.",193,706;829,Implementation,"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.;;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.;;Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.;;;;Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.;Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.;;Set allow_url_fopen to false, which limits the ability to include files from remote locations."
99,Improper Control of Resource Identifiers ('Resource Injection'),"The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.",10;240;75,74,Architecture and Design;Implementation,
